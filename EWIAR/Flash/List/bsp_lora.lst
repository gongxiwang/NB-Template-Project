###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        12/Jul/2019  09:14:39
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\USER\BSP\bsp_lora.c
#    Command line =  
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\USER\BSP\bsp_lora.c -D
#        LORA_MODULE -lCN
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\Flash\List\ -o
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\Flash\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        D:\Softwares\IAR7.40\arm\INC\c\DLib_Config_Full.h -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\CPU\inc\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-CPU\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-CPU\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-LIB\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-OSII\Ports\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-OSII\Source\
#        -I E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\USER\BSP\
#        -I E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\USER\APP\
#        -Om --use_c++_inline
#    List file    =  
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\Flash\List\bsp_lora.lst
#    Object file  =  
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\Flash\Obj\bsp_lora.o
#
###############################################################################

E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\USER\BSP\bsp_lora.c
      1          /** Copyright(c) 2015, XunFang Tech Limited. All rights reserved.
      2            * @file		bsp_lora.c
      3            * @author		walle
      4            * @version	V1.0.0
      5            * @date		31/5/2019
      6            * @brief		LORA驱动函数
      7            */
      8          #if 1
      9          #include "bsp.h"
     10          #include "stdio.h"
     11          #include "string.h"
     12          #include "bsp_lora.h"
     13          
     14          /**
     15            * @brief		tim2初始化函数
     16            * @details	定时器2初始化，配置10ms中断
     17            * @param 	NULL	无
     18            * @retval 	NULL	无
     19            */

   \                                 In section .text, align 2, keep-with-next
     20          void LORA_Timer_Init(void)
     21          {															
   \                     LORA_Timer_Init: (+1)
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
     22             	TIM_TimeBaseInitTypeDef  time;
     23              NVIC_InitTypeDef nvic; 
     24          
     25              RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3 , ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2002             MOVS     R0,#+2
   \   00000006   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     26          	TIM_DeInit(TIM3);
   \   0000000A   0x....             LDR.N    R4,??DataTable0  ;; 0x40000400
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       TIM_DeInit
     27          
     28              time.TIM_Period = 999;		 					/* 1s 自动重装载寄存器周期的值(计数值) */    											    /* 累计 TIM_Period个频率后产生一个更新或者中断 */
   \   00000012   0xF240 0x30E7      MOVW     R0,#+999
   \   00000016   0xF8AD 0x0008      STRH     R0,[SP, #+8]
     29              time.TIM_Prescaler= (72 - 1);				    /* 时钟预分频数 72M/72 */
   \   0000001A   0x2047             MOVS     R0,#+71
   \   0000001C   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     30              time.TIM_ClockDivision=TIM_CKD_DIV1; 			/* 采样分频 */
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xF8AD 0x000A      STRH     R0,[SP, #+10]
     31              time.TIM_CounterMode=TIM_CounterMode_Up; 		/* 向上计数模式 */
   \   00000026   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     32              TIM_TimeBaseInit(TIM3, &time);
   \   0000002A   0xA901             ADD      R1,SP,#+4
   \   0000002C   0x4620             MOV      R0,R4
   \   0000002E   0x.... 0x....      BL       TIM_TimeBaseInit
     33              TIM_ClearFlag(TIM3, TIM_FLAG_Update);			/* 清除溢出中断标志 */
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0x.... 0x....      BL       TIM_ClearFlag
     34              TIM_ITConfig(TIM3,TIM_IT_Update,ENABLE);		
   \   0000003A   0x2201             MOVS     R2,#+1
   \   0000003C   0x4611             MOV      R1,R2
   \   0000003E   0x4620             MOV      R0,R4
   \   00000040   0x.... 0x....      BL       TIM_ITConfig
     35              
     36          	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);												
   \   00000044   0xF44F 0x60C0      MOV      R0,#+1536
   \   00000048   0x.... 0x....      BL       NVIC_PriorityGroupConfig
     37              nvic.NVIC_IRQChannel = TIM3_IRQChannel;	  
   \   0000004C   0x201D             MOVS     R0,#+29
   \   0000004E   0xF88D 0x0000      STRB     R0,[SP, #+0]
     38              nvic.NVIC_IRQChannelPreemptionPriority = 11;
   \   00000052   0x200B             MOVS     R0,#+11
   \   00000054   0xF88D 0x0001      STRB     R0,[SP, #+1]
     39              nvic.NVIC_IRQChannelSubPriority = 2;	
   \   00000058   0x2002             MOVS     R0,#+2
   \   0000005A   0xF88D 0x0002      STRB     R0,[SP, #+2]
     40              nvic.NVIC_IRQChannelCmd = ENABLE;
   \   0000005E   0x2001             MOVS     R0,#+1
   \   00000060   0xF88D 0x0003      STRB     R0,[SP, #+3]
     41              NVIC_Init(&nvic);
   \   00000064   0xA800             ADD      R0,SP,#+0
   \   00000066   0x.... 0x....      BL       NVIC_Init
     42          	BSP_IntVectSet(BSP_INT_ID_TIM3, BSP_IntHandlerTIM3); 				//设置串口1的中断向量，必须要有的
   \   0000006A   0x....             LDR.N    R1,??DataTable0_1
   \   0000006C   0x201D             MOVS     R0,#+29
   \   0000006E   0x.... 0x....      BL       BSP_IntVectSet
     43          	BSP_IntEn(BSP_INT_ID_TIM3);
   \   00000072   0x201D             MOVS     R0,#+29
   \   00000074   0x.... 0x....      BL       BSP_IntEn
     44          }
   \   00000078   0xBD1F             POP      {R0-R4,PC}       ;; return
     45          
     46          
     47          /**
     48            * @brief tim2中断函数
     49            * @details	
     50            * @param 	NULL 无
     51            * @retval NULL 无
     52            */
     53          #if 0
     54          void BSP_IntHandlerTIM3(void)
     55          {
     56          	OS_CPU_SR  cpu_sr; 
     57          	OS_ENTER_CRITICAL();
     58              OSIntNesting++;
     59              OS_EXIT_CRITICAL();
     60          	if(TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET ) 
     61          	{
     62          		TIM_Cmd(TIM3, DISABLE);	 
     63          		TIM_ClearITPendingBit(TIM3, TIM_FLAG_Update); 	  
     64          	}
     65              OSIntExit();
     66          }	
     67          #endif
     68          
     69          /**
     70            * @brief 将十六进制字符串转成数字
     71           */

   \                                 In section .text, align 2, keep-with-next
     72          u16 LORA_HexStrToNum(char* str)
     73          {
   \                     LORA_HexStrToNum: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
     74          	u16 i = 0;
     75          	u8 tmp = 0;
   \   00000004   0x2500             MOVS     R5,#+0
     76          	u8 tmp1 = 0;
     77          	u16 len = strlen(str);
   \   00000006   0x.... 0x....      BL       strlen
   \   0000000A   0xB280             UXTH     R0,R0
     78          	if(len == 0)
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD101             BNE.N    ??LORA_HexStrToNum_0
     79          	{
     80          		return 0;
   \   00000010   0x4628             MOV      R0,R5
   \   00000012   0xBD70             POP      {R4-R6,PC}
     81          	}
     82          	 
     83          	for( i = 0 ; i < len; i ++)
   \                     ??LORA_HexStrToNum_0: (+1)
   \   00000014   0x4629             MOV      R1,R5
   \   00000016   0xE005             B.N      ??LORA_HexStrToNum_1
     84          	{
     85          		if(str[i] >= '0' && str[i] <= '9')
     86          	    {
     87          			tmp1 = str[i] - '0';
     88          	    }
     89          	    else if(str[i] >= 'A' && str[i] <= 'F')
     90          	    {
     91          			tmp1 = str[i] - 'A' + 10; 
     92          	    }
     93          	    else if(str[i] >= 'a' && str[i] <= 'f')
     94          	    {
     95          			tmp1 = str[i] - 'a' + 10;
     96          	    }
     97          	    else
     98          	    {
     99          			tmp1 = 0;
    100          	    }
    101          	    
    102          	    if((i % 2) == 0)
    103          	    {
    104          			tmp = tmp1; 
    105          	    }
    106          	    else
    107          	    {
    108          			tmp <<= 4;
    109          			tmp += tmp1;
   \                     ??LORA_HexStrToNum_2: (+1)
   \   00000018   0xEB02 0x1505      ADD      R5,R2,R5, LSL #+4
    110          			str[i >> 1] = tmp;
   \   0000001C   0x104A             ASRS     R2,R1,#+1
   \   0000001E   0x5515             STRB     R5,[R2, R4]
    111          	    }
   \                     ??LORA_HexStrToNum_3: (+1)
   \   00000020   0x1C49             ADDS     R1,R1,#+1
   \   00000022   0xB289             UXTH     R1,R1
   \                     ??LORA_HexStrToNum_1: (+1)
   \   00000024   0x4281             CMP      R1,R0
   \   00000026   0xDA1B             BGE.N    ??LORA_HexStrToNum_4
   \   00000028   0x5D0A             LDRB     R2,[R1, R4]
   \   0000002A   0x4613             MOV      R3,R2
   \   0000002C   0xF1A3 0x0630      SUB      R6,R3,#+48
   \   00000030   0x2E0A             CMP      R6,#+10
   \   00000032   0xD201             BCS.N    ??LORA_HexStrToNum_5
   \   00000034   0x3A30             SUBS     R2,R2,#+48
   \   00000036   0xE00B             B.N      ??LORA_HexStrToNum_6
   \                     ??LORA_HexStrToNum_5: (+1)
   \   00000038   0xF1A3 0x0641      SUB      R6,R3,#+65
   \   0000003C   0x2E06             CMP      R6,#+6
   \   0000003E   0xD201             BCS.N    ??LORA_HexStrToNum_7
   \   00000040   0x3A37             SUBS     R2,R2,#+55
   \   00000042   0xE005             B.N      ??LORA_HexStrToNum_6
   \                     ??LORA_HexStrToNum_7: (+1)
   \   00000044   0x3B61             SUBS     R3,R3,#+97
   \   00000046   0x2B06             CMP      R3,#+6
   \   00000048   0xD201             BCS.N    ??LORA_HexStrToNum_8
   \   0000004A   0x3A57             SUBS     R2,R2,#+87
   \   0000004C   0xE000             B.N      ??LORA_HexStrToNum_6
   \                     ??LORA_HexStrToNum_8: (+1)
   \   0000004E   0x2200             MOVS     R2,#+0
   \                     ??LORA_HexStrToNum_6: (+1)
   \   00000050   0xEB01 0x73D1      ADD      R3,R1,R1, LSR #+31
   \   00000054   0x105B             ASRS     R3,R3,#+1
   \   00000056   0xEBB1 0x0343      SUBS     R3,R1,R3, LSL #+1
   \   0000005A   0xD1DD             BNE.N    ??LORA_HexStrToNum_2
   \   0000005C   0x4615             MOV      R5,R2
   \   0000005E   0xE7DF             B.N      ??LORA_HexStrToNum_3
    112          	    
    113          	}
    114          	str[i >> 1] = 0;	  
   \                     ??LORA_HexStrToNum_4: (+1)
   \   00000060   0x1048             ASRS     R0,R1,#+1
   \   00000062   0x2100             MOVS     R1,#+0
   \   00000064   0x5501             STRB     R1,[R0, R4]
    115          	return (i >> 1);
   \   00000066   0xB280             UXTH     R0,R0
   \   00000068   0xBD70             POP      {R4-R6,PC}       ;; return
    116          }
    117          
    118          /**
    119            * @brief 将字符型数字转成整型
    120           */

   \                                 In section .text, align 2, keep-with-next
    121          u32 LORA_Strtoul(const char* pStr,int base)
    122          {
    123            return strtoul(pStr, 0, base);
   \                     LORA_Strtoul: (+1)
   \   00000000   0x460A             MOV      R2,R1
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x.... 0x....      B.W      strtoul
    124          }
    125          
    126          /**
    127            * @brief 计算LoRa数据的长度
    128           */

   \                                 In section .text, align 2, keep-with-next
    129          u32 LORA_Datalen(char* pStr)
    130          {
    131          	u8 DataLen = 0;
   \                     LORA_Datalen: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
    132          	if(*pStr == 0x5A)/* 判断数据开头 */
   \   00000002   0x7802             LDRB     R2,[R0, #+0]
   \   00000004   0x2A5A             CMP      R2,#+90
   \   00000006   0xD002             BEQ.N    ??LORA_Datalen_0
    133          	{
    134          		while(*pStr++ != 0xCA)
    135          		{
    136          			DataLen ++;
    137          		}
    138          		return (DataLen + 1);
    139          	}
    140          	else
    141          	{
    142          		return DataLen;
   \   00000008   0x4608             MOV      R0,R1
   \   0000000A   0x4770             BX       LR               ;; return
    143          	}
   \                     ??LORA_Datalen_1: (+1)
   \   0000000C   0x1C49             ADDS     R1,R1,#+1
   \                     ??LORA_Datalen_0: (+1)
   \   0000000E   0xF810 0x2B01      LDRB     R2,[R0], #+1
   \   00000012   0x2ACA             CMP      R2,#+202
   \   00000014   0xD1FA             BNE.N    ??LORA_Datalen_1
   \   00000016   0xB2C9             UXTB     R1,R1
   \   00000018   0x1C48             ADDS     R0,R1,#+1
   \   0000001A   0x4770             BX       LR
    144          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x40000400         DC32     0x40000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x........         DC32     BSP_IntHandlerTIM3
    145          
    146          
    147          
    148          
    149          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   LORA_Datalen
      16   LORA_HexStrToNum
        16   -> strlen
       0   LORA_Strtoul
         0   -> strtoul
      24   LORA_Timer_Init
        24   -> BSP_IntEn
        24   -> BSP_IntVectSet
        24   -> NVIC_Init
        24   -> NVIC_PriorityGroupConfig
        24   -> RCC_APB1PeriphClockCmd
        24   -> TIM_ClearFlag
        24   -> TIM_DeInit
        24   -> TIM_ITConfig
        24   -> TIM_TimeBaseInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
      28  LORA_Datalen
     106  LORA_HexStrToNum
       8  LORA_Strtoul
     122  LORA_Timer_Init

 
 272 bytes in section .text
 
 272 bytes of CODE memory

Errors: none
Warnings: none
