###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        12/Jul/2019  09:14:39
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\USER\BSP\bsp_periph.c
#    Command line =  
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\USER\BSP\bsp_periph.c
#        -D LORA_MODULE -lCN
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\Flash\List\ -o
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\Flash\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        D:\Softwares\IAR7.40\arm\INC\c\DLib_Config_Full.h -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\CPU\inc\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-CPU\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-CPU\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-LIB\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-OSII\Ports\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-OSII\Source\
#        -I E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\USER\BSP\
#        -I E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\USER\APP\
#        -Om --use_c++_inline
#    List file    =  
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\Flash\List\bsp_periph.lst
#    Object file  =  
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\Flash\Obj\bsp_periph.o
#
###############################################################################

E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\USER\BSP\bsp_periph.c
      1          /*
      2          *********************************************************************************************************
      3          *                                     MICIRUM BOARD SUPPORT PACKAGE
      4          *
      5          *                            (c) Copyright 2007-2008; Micrium, Inc.; Weston, FL
      6          *
      7          *                   All rights reserved.  Protected by international copyright laws.
      8          *                   Knowledge of the source code may not be used to write a similar
      9          *                   product.  This file may only be used in accordance with a license
     10          *                   and should not be redistributed in any way.
     11          *********************************************************************************************************
     12          */
     13          
     14          /*
     15          *********************************************************************************************************
     16          *
     17          *                                        BOARD SUPPORT PACKAGE
     18          *
     19          *                                     ST Microelectronics STM32
     20          *                                              with the
     21          *                                   IAR STM32-SK Evaluation Board
     22          *
     23          * Filename      : bsp_periph.c
     24          * Version       : V1.00
     25          * Programmer(s) : BAN
     26          *********************************************************************************************************
     27          */
     28          
     29          /*
     30          *********************************************************************************************************
     31          *                                             INCLUDE FILES
     32          *********************************************************************************************************
     33          */
     34          
     35          #define  BSP_PERIPH_MODULE
     36          #include <bsp.h>
     37          
     38          
     39          /*
     40          *********************************************************************************************************
     41          *                                            LOCAL DEFINES
     42          *********************************************************************************************************
     43          */
     44          
     45          #define  BSP_PERIPH_REG_RCC_BASE                 0x40021000
     46          #define  BSP_PERIPH_REG_RCC_CFGR            (*(volatile  CPU_INT32U *)(BSP_PERIPH_REG_RCC_BASE + 0x004))
     47          #define  BSP_PERIPH_REG_RCC_AHBENR          (*(volatile  CPU_INT32U *)(BSP_PERIPH_REG_RCC_BASE + 0x014))
     48          #define  BSP_PERIPH_REG_RCC_APB2ENR         (*(volatile  CPU_INT32U *)(BSP_PERIPH_REG_RCC_BASE + 0x018))
     49          #define  BSP_PERIPH_REG_RCC_APB1ENR         (*(volatile  CPU_INT32U *)(BSP_PERIPH_REG_RCC_BASE + 0x01C))
     50          
     51          
     52          /*
     53          *********************************************************************************************************
     54          *                                           LOCAL CONSTANTS
     55          *********************************************************************************************************
     56          */
     57          
     58          
     59          /*
     60          *********************************************************************************************************
     61          *                                          LOCAL DATA TYPES
     62          *********************************************************************************************************
     63          */
     64          
     65          
     66          /*
     67          *********************************************************************************************************
     68          *                                            LOCAL TABLES
     69          *********************************************************************************************************
     70          */
     71          
     72          
     73          /*
     74          *********************************************************************************************************
     75          *                                       LOCAL GLOBAL VARIABLES
     76          *********************************************************************************************************
     77          */
     78          
     79          
     80          /*
     81          *********************************************************************************************************
     82          *                                      LOCAL FUNCTION PROTOTYPES
     83          *********************************************************************************************************
     84          */
     85          
     86          
     87          /*
     88          *********************************************************************************************************
     89          *                                     LOCAL CONFIGURATION ERRORS
     90          *********************************************************************************************************
     91          */
     92          
     93          
     94          /*
     95          *********************************************************************************************************
     96          *                                         BSP_PeriphClkFreqGet()
     97          *
     98          * Description : Get clock frequency of a peripheral.
     99          *
    100          * Argument(s) : pwr_clk_id      Power/clock ID.
    101          *
    102          * Return(s)   : none.
    103          *
    104          * Caller(s)   : Application.
    105          *
    106          * Note(s)     : none.
    107          *********************************************************************************************************
    108          */
    109          

   \                                 In section .text, align 2, keep-with-next
    110          CPU_INT32U  BSP_PeriphClkFreqGet (CPU_DATA  pwr_clk_id)
    111          {
   \                     BSP_PeriphClkFreqGet: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    112              CPU_INT32U  clk_freq;
    113              CPU_INT32U  clk_div;
    114          
    115          
    116              clk_freq = BSP_CPU_ClkFreq();
   \   00000004   0x.... 0x....      BL       BSP_CPU_ClkFreq
    117          
    118              switch (pwr_clk_id) {
   \   00000008   0x2C02             CMP      R4,#+2
   \   0000000A   0xD934             BLS.N    ??BSP_PeriphClkFreqGet_0
   \   0000000C   0x1F24             SUBS     R4,R4,#+4
   \   0000000E   0xD032             BEQ.N    ??BSP_PeriphClkFreqGet_0
   \   00000010   0x1EA4             SUBS     R4,R4,#+2
   \   00000012   0xD030             BEQ.N    ??BSP_PeriphClkFreqGet_0
   \   00000014   0x1EA4             SUBS     R4,R4,#+2
   \   00000016   0xD02E             BEQ.N    ??BSP_PeriphClkFreqGet_0
   \   00000018   0x1EA4             SUBS     R4,R4,#+2
   \   0000001A   0xD02C             BEQ.N    ??BSP_PeriphClkFreqGet_0
   \   0000001C   0x3C16             SUBS     R4,R4,#+22
   \   0000001E   0xD013             BEQ.N    ??BSP_PeriphClkFreqGet_1
   \   00000020   0x1EA4             SUBS     R4,R4,#+2
   \   00000022   0x2C0D             CMP      R4,#+13
   \   00000024   0xD910             BLS.N    ??BSP_PeriphClkFreqGet_1
   \   00000026   0x3C1E             SUBS     R4,R4,#+30
   \   00000028   0x2C05             CMP      R4,#+5
   \   0000002A   0xD918             BLS.N    ??BSP_PeriphClkFreqGet_2
   \   0000002C   0x3C0B             SUBS     R4,R4,#+11
   \   0000002E   0xD016             BEQ.N    ??BSP_PeriphClkFreqGet_2
   \   00000030   0x1EE4             SUBS     R4,R4,#+3
   \   00000032   0x2C01             CMP      R4,#+1
   \   00000034   0xD913             BLS.N    ??BSP_PeriphClkFreqGet_2
   \   00000036   0x1EE4             SUBS     R4,R4,#+3
   \   00000038   0x2C06             CMP      R4,#+6
   \   0000003A   0xD910             BLS.N    ??BSP_PeriphClkFreqGet_2
   \   0000003C   0x3C08             SUBS     R4,R4,#+8
   \   0000003E   0xD00E             BEQ.N    ??BSP_PeriphClkFreqGet_2
   \   00000040   0x1EA4             SUBS     R4,R4,#+2
   \   00000042   0x2C02             CMP      R4,#+2
   \   00000044   0xD90B             BLS.N    ??BSP_PeriphClkFreqGet_2
   \   00000046   0xE015             B.N      ??BSP_PeriphClkFreqGet_3
    119                  case BSP_PERIPH_ID_DMA1:
    120                  case BSP_PERIPH_ID_DMA2:
    121                  case BSP_PERIPH_ID_SRAM:
    122                  case BSP_PERIPH_ID_FLITF:
    123                  case BSP_PERIPH_ID_CRC:
    124                  case BSP_PERIPH_ID_FSMC:
    125                  case BSP_PERIPH_ID_SDIO:
    126                       return (clk_freq);
    127          
    128                  case BSP_PERIPH_ID_AFIO:
    129                  case BSP_PERIPH_ID_IOPA:
    130                  case BSP_PERIPH_ID_IOPB:
    131                  case BSP_PERIPH_ID_IOPC:
    132                  case BSP_PERIPH_ID_IOPD:
    133                  case BSP_PERIPH_ID_IOPE:
    134                  case BSP_PERIPH_ID_IOPF:
    135                  case BSP_PERIPH_ID_IOPG:
    136                  case BSP_PERIPH_ID_ADC1:
    137                  case BSP_PERIPH_ID_ADC2:
    138                  case BSP_PERIPH_ID_TIM1:
    139                  case BSP_PERIPH_ID_SPI1:
    140                  case BSP_PERIPH_ID_TIM8:
    141                  case BSP_PERIPH_ID_USART1:
    142                  case BSP_PERIPH_ID_ADC3:
    143                       clk_div = (BSP_PERIPH_REG_RCC_CFGR & 0x00003800) >> 11;
   \                     ??BSP_PeriphClkFreqGet_1: (+1)
   \   00000048   0x....             LDR.N    R1,??DataTable2  ;; 0x40021004
   \   0000004A   0x6809             LDR      R1,[R1, #+0]
   \   0000004C   0xF3C1 0x21C2      UBFX     R1,R1,#+11,#+3
    144                       if (clk_div < 4) {
   \   00000050   0x2904             CMP      R1,#+4
   \   00000052   0xD310             BCC.N    ??BSP_PeriphClkFreqGet_0
    145                           return (clk_freq);
    146                       }
    147                       clk_div   = (clk_div - 3) << 1;
    148                       clk_freq /= clk_div;
    149                       return (clk_freq);
   \   00000054   0x1EC9             SUBS     R1,R1,#+3
   \   00000056   0x0049             LSLS     R1,R1,#+1
   \   00000058   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000005C   0xBD10             POP      {R4,PC}
    150          
    151                  case BSP_PERIPH_ID_TIM2:
    152                  case BSP_PERIPH_ID_TIM3:
    153                  case BSP_PERIPH_ID_TIM4:
    154                  case BSP_PERIPH_ID_TIM5:
    155                  case BSP_PERIPH_ID_TIM6:
    156                  case BSP_PERIPH_ID_TIM7:
    157                  case BSP_PERIPH_ID_WWDG:
    158                  case BSP_PERIPH_ID_SPI2:
    159                  case BSP_PERIPH_ID_SPI3:
    160                  case BSP_PERIPH_ID_USART2:
    161                  case BSP_PERIPH_ID_USART3:
    162                  case BSP_PERIPH_ID_USART4:
    163                  case BSP_PERIPH_ID_USART5:
    164                  case BSP_PERIPH_ID_I2C1:
    165                  case BSP_PERIPH_ID_I2C2:
    166                  case BSP_PERIPH_ID_USB:
    167                  case BSP_PERIPH_ID_CAN:
    168                  case BSP_PERIPH_ID_BKP:
    169                  case BSP_PERIPH_ID_PWR:
    170                  case BSP_PERIPH_ID_DAC:
    171                       clk_div = (BSP_PERIPH_REG_RCC_CFGR & 0x00000700) >> 8;
   \                     ??BSP_PeriphClkFreqGet_2: (+1)
   \   0000005E   0x....             LDR.N    R1,??DataTable2  ;; 0x40021004
   \   00000060   0x6809             LDR      R1,[R1, #+0]
   \   00000062   0xF3C1 0x2102      UBFX     R1,R1,#+8,#+3
    172                       if (clk_div < 4) {
   \   00000066   0x2904             CMP      R1,#+4
   \   00000068   0xD305             BCC.N    ??BSP_PeriphClkFreqGet_0
    173                           return (clk_freq);
    174                       }
    175                       clk_div   = (clk_div - 3) << 1;
    176                       clk_freq /= clk_div;
    177                       return (clk_freq);
   \   0000006A   0x1EC9             SUBS     R1,R1,#+3
   \   0000006C   0x0049             LSLS     R1,R1,#+1
   \   0000006E   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000072   0xBD10             POP      {R4,PC}
    178              }
    179          
    180              return ((CPU_INT32U)0);
   \                     ??BSP_PeriphClkFreqGet_3: (+1)
   \   00000074   0x2000             MOVS     R0,#+0
   \                     ??BSP_PeriphClkFreqGet_0: (+1)
   \   00000076   0xBD10             POP      {R4,PC}          ;; return
    181          }
    182          
    183          
    184          /*
    185          *********************************************************************************************************
    186          *                                             BSP_PeriphEn()
    187          *
    188          * Description : Enable clock for peripheral.
    189          *
    190          * Argument(s) : pwr_clk_id      Power/clock ID.
    191          *
    192          * Return(s)   : none.
    193          *
    194          * Caller(s)   : Application.
    195          *
    196          * Note(s)     : none.
    197          *********************************************************************************************************
    198          */
    199          

   \                                 In section .text, align 2, keep-with-next
    200          void  BSP_PeriphEn (CPU_DATA  pwr_clk_id)
    201          {
    202              switch (pwr_clk_id) {
   \                     BSP_PeriphEn: (+1)
   \   00000000   0x4601             MOV      R1,R0
   \   00000002   0x2902             CMP      R1,#+2
   \   00000004   0xD91D             BLS.N    ??BSP_PeriphEn_0
   \   00000006   0x1F09             SUBS     R1,R1,#+4
   \   00000008   0xD01B             BEQ.N    ??BSP_PeriphEn_0
   \   0000000A   0x1E89             SUBS     R1,R1,#+2
   \   0000000C   0xD019             BEQ.N    ??BSP_PeriphEn_0
   \   0000000E   0x1E89             SUBS     R1,R1,#+2
   \   00000010   0xD017             BEQ.N    ??BSP_PeriphEn_0
   \   00000012   0x1E89             SUBS     R1,R1,#+2
   \   00000014   0xD015             BEQ.N    ??BSP_PeriphEn_0
   \   00000016   0x3916             SUBS     R1,R1,#+22
   \   00000018   0xD01B             BEQ.N    ??BSP_PeriphEn_1
   \   0000001A   0x1E89             SUBS     R1,R1,#+2
   \   0000001C   0x290D             CMP      R1,#+13
   \   0000001E   0xD918             BLS.N    ??BSP_PeriphEn_1
   \   00000020   0x391E             SUBS     R1,R1,#+30
   \   00000022   0x2905             CMP      R1,#+5
   \   00000024   0xD91E             BLS.N    ??BSP_PeriphEn_2
   \   00000026   0x390B             SUBS     R1,R1,#+11
   \   00000028   0xD01C             BEQ.N    ??BSP_PeriphEn_2
   \   0000002A   0x1EC9             SUBS     R1,R1,#+3
   \   0000002C   0x2901             CMP      R1,#+1
   \   0000002E   0xD919             BLS.N    ??BSP_PeriphEn_2
   \   00000030   0x1EC9             SUBS     R1,R1,#+3
   \   00000032   0x2906             CMP      R1,#+6
   \   00000034   0xD916             BLS.N    ??BSP_PeriphEn_2
   \   00000036   0x3908             SUBS     R1,R1,#+8
   \   00000038   0xD014             BEQ.N    ??BSP_PeriphEn_2
   \   0000003A   0x1E89             SUBS     R1,R1,#+2
   \   0000003C   0x2902             CMP      R1,#+2
   \   0000003E   0xD911             BLS.N    ??BSP_PeriphEn_2
   \   00000040   0x4770             BX       LR
    203                  case BSP_PERIPH_ID_DMA1:
    204                  case BSP_PERIPH_ID_DMA2:
    205                  case BSP_PERIPH_ID_SRAM:
    206                  case BSP_PERIPH_ID_FLITF:
    207                  case BSP_PERIPH_ID_CRC:
    208                  case BSP_PERIPH_ID_FSMC:
    209                  case BSP_PERIPH_ID_SDIO:
    210                       BSP_PERIPH_REG_RCC_AHBENR |= DEF_BIT(pwr_clk_id);
   \                     ??BSP_PeriphEn_0: (+1)
   \   00000042   0x....             LDR.N    R1,??DataTable2_1  ;; 0x40021014
   \   00000044   0x680A             LDR      R2,[R1, #+0]
   \   00000046   0x2301             MOVS     R3,#+1
   \   00000048   0xFA03 0xF000      LSL      R0,R3,R0
   \   0000004C   0x4310             ORRS     R0,R0,R2
   \   0000004E   0x6008             STR      R0,[R1, #+0]
    211                       break;
   \   00000050   0x4770             BX       LR
    212          
    213                  case BSP_PERIPH_ID_AFIO:
    214                  case BSP_PERIPH_ID_IOPA:
    215                  case BSP_PERIPH_ID_IOPB:
    216                  case BSP_PERIPH_ID_IOPC:
    217                  case BSP_PERIPH_ID_IOPD:
    218                  case BSP_PERIPH_ID_IOPE:
    219                  case BSP_PERIPH_ID_IOPF:
    220                  case BSP_PERIPH_ID_IOPG:
    221                  case BSP_PERIPH_ID_ADC1:
    222                  case BSP_PERIPH_ID_ADC2:
    223                  case BSP_PERIPH_ID_TIM1:
    224                  case BSP_PERIPH_ID_SPI1:
    225                  case BSP_PERIPH_ID_TIM8:
    226                  case BSP_PERIPH_ID_USART1:
    227                  case BSP_PERIPH_ID_ADC3:
    228                       BSP_PERIPH_REG_RCC_APB2ENR |= DEF_BIT(pwr_clk_id - 32);
   \                     ??BSP_PeriphEn_1: (+1)
   \   00000052   0x....             LDR.N    R1,??DataTable2_1  ;; 0x40021014
   \   00000054   0x684A             LDR      R2,[R1, #+4]
   \   00000056   0x2301             MOVS     R3,#+1
   \   00000058   0x3820             SUBS     R0,R0,#+32
   \   0000005A   0xFA03 0xF000      LSL      R0,R3,R0
   \   0000005E   0x4310             ORRS     R0,R0,R2
   \   00000060   0x6048             STR      R0,[R1, #+4]
    229                       break;
   \   00000062   0x4770             BX       LR
    230          
    231                  case BSP_PERIPH_ID_TIM2:
    232                  case BSP_PERIPH_ID_TIM3:
    233                  case BSP_PERIPH_ID_TIM4:
    234                  case BSP_PERIPH_ID_TIM5:
    235                  case BSP_PERIPH_ID_TIM6:
    236                  case BSP_PERIPH_ID_TIM7:
    237                  case BSP_PERIPH_ID_WWDG:
    238                  case BSP_PERIPH_ID_SPI2:
    239                  case BSP_PERIPH_ID_SPI3:
    240                  case BSP_PERIPH_ID_USART2:
    241                  case BSP_PERIPH_ID_USART3:
    242                  case BSP_PERIPH_ID_USART4:
    243                  case BSP_PERIPH_ID_USART5:
    244                  case BSP_PERIPH_ID_I2C1:
    245                  case BSP_PERIPH_ID_I2C2:
    246                  case BSP_PERIPH_ID_USB:
    247                  case BSP_PERIPH_ID_CAN:
    248                  case BSP_PERIPH_ID_BKP:
    249                  case BSP_PERIPH_ID_PWR:
    250                  case BSP_PERIPH_ID_DAC:
    251                       BSP_PERIPH_REG_RCC_APB1ENR |= DEF_BIT(pwr_clk_id - 64);
   \                     ??BSP_PeriphEn_2: (+1)
   \   00000064   0x....             LDR.N    R1,??DataTable2_1  ;; 0x40021014
   \   00000066   0x688A             LDR      R2,[R1, #+8]
   \   00000068   0x2301             MOVS     R3,#+1
   \   0000006A   0x3840             SUBS     R0,R0,#+64
   \   0000006C   0xFA03 0xF000      LSL      R0,R3,R0
   \   00000070   0x4310             ORRS     R0,R0,R2
   \   00000072   0x6088             STR      R0,[R1, #+8]
    252                       break;
    253              }
    254          }
   \   00000074   0x4770             BX       LR               ;; return
    255          
    256          
    257          /*
    258          *********************************************************************************************************
    259          *                                             BSP_PeriphDis()
    260          *
    261          * Description : Disable clock for peripheral.
    262          *
    263          * Argument(s) : pwr_clk_id      Power/clock ID.
    264          *
    265          * Return(s)   : none.
    266          *
    267          * Caller(s)   : Application.
    268          *
    269          * Note(s)     : none.
    270          *********************************************************************************************************
    271          */
    272          

   \                                 In section .text, align 2, keep-with-next
    273          void  BSP_PeriphDis (CPU_DATA  pwr_clk_id)
    274          {
    275              switch (pwr_clk_id) {
   \                     BSP_PeriphDis: (+1)
   \   00000000   0x4601             MOV      R1,R0
   \   00000002   0x2902             CMP      R1,#+2
   \   00000004   0xD91D             BLS.N    ??BSP_PeriphDis_0
   \   00000006   0x1F09             SUBS     R1,R1,#+4
   \   00000008   0xD01B             BEQ.N    ??BSP_PeriphDis_0
   \   0000000A   0x1E89             SUBS     R1,R1,#+2
   \   0000000C   0xD019             BEQ.N    ??BSP_PeriphDis_0
   \   0000000E   0x1E89             SUBS     R1,R1,#+2
   \   00000010   0xD017             BEQ.N    ??BSP_PeriphDis_0
   \   00000012   0x1E89             SUBS     R1,R1,#+2
   \   00000014   0xD015             BEQ.N    ??BSP_PeriphDis_0
   \   00000016   0x3916             SUBS     R1,R1,#+22
   \   00000018   0xD01C             BEQ.N    ??BSP_PeriphDis_1
   \   0000001A   0x1E89             SUBS     R1,R1,#+2
   \   0000001C   0x290D             CMP      R1,#+13
   \   0000001E   0xD919             BLS.N    ??BSP_PeriphDis_1
   \   00000020   0x391E             SUBS     R1,R1,#+30
   \   00000022   0x2905             CMP      R1,#+5
   \   00000024   0xD920             BLS.N    ??BSP_PeriphDis_2
   \   00000026   0x390B             SUBS     R1,R1,#+11
   \   00000028   0xD01E             BEQ.N    ??BSP_PeriphDis_2
   \   0000002A   0x1EC9             SUBS     R1,R1,#+3
   \   0000002C   0x2901             CMP      R1,#+1
   \   0000002E   0xD91B             BLS.N    ??BSP_PeriphDis_2
   \   00000030   0x1EC9             SUBS     R1,R1,#+3
   \   00000032   0x2906             CMP      R1,#+6
   \   00000034   0xD918             BLS.N    ??BSP_PeriphDis_2
   \   00000036   0x3908             SUBS     R1,R1,#+8
   \   00000038   0xD016             BEQ.N    ??BSP_PeriphDis_2
   \   0000003A   0x1E89             SUBS     R1,R1,#+2
   \   0000003C   0x2902             CMP      R1,#+2
   \   0000003E   0xD913             BLS.N    ??BSP_PeriphDis_2
   \   00000040   0x4770             BX       LR
    276                  case BSP_PERIPH_ID_DMA1:
    277                  case BSP_PERIPH_ID_DMA2:
    278                  case BSP_PERIPH_ID_SRAM:
    279                  case BSP_PERIPH_ID_FLITF:
    280                  case BSP_PERIPH_ID_CRC:
    281                  case BSP_PERIPH_ID_FSMC:
    282                  case BSP_PERIPH_ID_SDIO:
    283                       BSP_PERIPH_REG_RCC_AHBENR &= ~DEF_BIT(pwr_clk_id);
   \                     ??BSP_PeriphDis_0: (+1)
   \   00000042   0x....             LDR.N    R1,??DataTable2_1  ;; 0x40021014
   \   00000044   0x680A             LDR      R2,[R1, #+0]
   \   00000046   0x2301             MOVS     R3,#+1
   \   00000048   0xFA03 0xF000      LSL      R0,R3,R0
   \   0000004C   0xEA22 0x0000      BIC      R0,R2,R0
   \   00000050   0x6008             STR      R0,[R1, #+0]
    284                       break;
   \   00000052   0x4770             BX       LR
    285          
    286                  case BSP_PERIPH_ID_AFIO:
    287                  case BSP_PERIPH_ID_IOPA:
    288                  case BSP_PERIPH_ID_IOPB:
    289                  case BSP_PERIPH_ID_IOPC:
    290                  case BSP_PERIPH_ID_IOPD:
    291                  case BSP_PERIPH_ID_IOPE:
    292                  case BSP_PERIPH_ID_IOPF:
    293                  case BSP_PERIPH_ID_IOPG:
    294                  case BSP_PERIPH_ID_ADC1:
    295                  case BSP_PERIPH_ID_ADC2:
    296                  case BSP_PERIPH_ID_TIM1:
    297                  case BSP_PERIPH_ID_SPI1:
    298                  case BSP_PERIPH_ID_TIM8:
    299                  case BSP_PERIPH_ID_USART1:
    300                  case BSP_PERIPH_ID_ADC3:
    301                       BSP_PERIPH_REG_RCC_APB2ENR &= ~DEF_BIT(pwr_clk_id - 32);
   \                     ??BSP_PeriphDis_1: (+1)
   \   00000054   0x....             LDR.N    R1,??DataTable2_1  ;; 0x40021014
   \   00000056   0x684A             LDR      R2,[R1, #+4]
   \   00000058   0x2301             MOVS     R3,#+1
   \   0000005A   0x3820             SUBS     R0,R0,#+32
   \   0000005C   0xFA03 0xF000      LSL      R0,R3,R0
   \   00000060   0xEA22 0x0000      BIC      R0,R2,R0
   \   00000064   0x6048             STR      R0,[R1, #+4]
    302                       break;
   \   00000066   0x4770             BX       LR
    303          
    304                  case BSP_PERIPH_ID_TIM2:
    305                  case BSP_PERIPH_ID_TIM3:
    306                  case BSP_PERIPH_ID_TIM4:
    307                  case BSP_PERIPH_ID_TIM5:
    308                  case BSP_PERIPH_ID_TIM6:
    309                  case BSP_PERIPH_ID_TIM7:
    310                  case BSP_PERIPH_ID_WWDG:
    311                  case BSP_PERIPH_ID_SPI2:
    312                  case BSP_PERIPH_ID_SPI3:
    313                  case BSP_PERIPH_ID_USART2:
    314                  case BSP_PERIPH_ID_USART3:
    315                  case BSP_PERIPH_ID_USART4:
    316                  case BSP_PERIPH_ID_USART5:
    317                  case BSP_PERIPH_ID_I2C1:
    318                  case BSP_PERIPH_ID_I2C2:
    319                  case BSP_PERIPH_ID_USB:
    320                  case BSP_PERIPH_ID_CAN:
    321                  case BSP_PERIPH_ID_BKP:
    322                  case BSP_PERIPH_ID_PWR:
    323                  case BSP_PERIPH_ID_DAC:
    324                       BSP_PERIPH_REG_RCC_APB1ENR &= ~DEF_BIT(pwr_clk_id - 64);
   \                     ??BSP_PeriphDis_2: (+1)
   \   00000068   0x....             LDR.N    R1,??DataTable2_1  ;; 0x40021014
   \   0000006A   0x688A             LDR      R2,[R1, #+8]
   \   0000006C   0x2301             MOVS     R3,#+1
   \   0000006E   0x3840             SUBS     R0,R0,#+64
   \   00000070   0xFA03 0xF000      LSL      R0,R3,R0
   \   00000074   0xEA22 0x0000      BIC      R0,R2,R0
   \   00000078   0x6088             STR      R0,[R1, #+8]
    325                       break;
    326              }
    327          }
   \   0000007A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x40021004         DC32     0x40021004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x40021014         DC32     0x40021014

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   BSP_PeriphClkFreqGet
         8   -> BSP_CPU_ClkFreq
       0   BSP_PeriphDis
       0   BSP_PeriphEn


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
     120  BSP_PeriphClkFreqGet
     124  BSP_PeriphDis
     118  BSP_PeriphEn

 
 370 bytes in section .text
 
 370 bytes of CODE memory

Errors: none
Warnings: none
