###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        12/Jul/2019  09:14:39
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\USER\BSP\bsp_nbiot.c
#    Command line =  
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\USER\BSP\bsp_nbiot.c -D
#        LORA_MODULE -lCN
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\Flash\List\ -o
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\Flash\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        D:\Softwares\IAR7.40\arm\INC\c\DLib_Config_Full.h -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\CPU\inc\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-CPU\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-CPU\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-LIB\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-OSII\Ports\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-OSII\Source\
#        -I E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\USER\BSP\
#        -I E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\USER\APP\
#        -Om --use_c++_inline
#    List file    =  
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\Flash\List\bsp_nbiot.lst
#    Object file  =  
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\Flash\Obj\bsp_nbiot.o
#
###############################################################################

E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\USER\BSP\bsp_nbiot.c
      1          /** Copyright(c) 2015, XunFang Tech Limited. All rights reserved.
      2            * @file		bsp_nbiot.c
      3            * @author		walle
      4            * @version	V1.0.0
      5            * @date		31/5/2019
      6            * @brief		NB驱动函数
      7            */
      8          
      9          #include "bsp.h"
     10          #include "stdio.h"
     11          #include "string.h"
     12          
     13          /**
     14            * @brief		tim2初始化函数
     15            * @details	定时器2初始化，配置10ms中断
     16            * @param 	NULL	无
     17            * @retval 	NULL	无
     18            */

   \                                 In section .text, align 2, keep-with-next
     19          void NBiot_Timer_Init(void)
     20          {															
   \                     NBiot_Timer_Init: (+1)
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
     21             	TIM_TimeBaseInitTypeDef  time;
     22              NVIC_InitTypeDef nvic; 
     23          
     24              RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3 , ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2002             MOVS     R0,#+2
   \   00000006   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     25          	TIM_DeInit(TIM3);
   \   0000000A   0x....             LDR.N    R4,??DataTable1  ;; 0x40000400
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       TIM_DeInit
     26          
     27              time.TIM_Period = 999;		 					/* 1s 自动重装载寄存器周期的值(计数值) */    											    /* 累计 TIM_Period个频率后产生一个更新或者中断 */
   \   00000012   0xF240 0x30E7      MOVW     R0,#+999
   \   00000016   0xF8AD 0x0008      STRH     R0,[SP, #+8]
     28              time.TIM_Prescaler= (72 - 1);				    /* 时钟预分频数 72M/72 */
   \   0000001A   0x2047             MOVS     R0,#+71
   \   0000001C   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     29              time.TIM_ClockDivision=TIM_CKD_DIV1; 			/* 采样分频 */
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xF8AD 0x000A      STRH     R0,[SP, #+10]
     30              time.TIM_CounterMode=TIM_CounterMode_Up; 		/* 向上计数模式 */
   \   00000026   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     31              TIM_TimeBaseInit(TIM3, &time);
   \   0000002A   0xA901             ADD      R1,SP,#+4
   \   0000002C   0x4620             MOV      R0,R4
   \   0000002E   0x.... 0x....      BL       TIM_TimeBaseInit
     32              TIM_ClearFlag(TIM3, TIM_FLAG_Update);			/* 清除溢出中断标志 */
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0x.... 0x....      BL       TIM_ClearFlag
     33              TIM_ITConfig(TIM3,TIM_IT_Update,ENABLE);		
   \   0000003A   0x2201             MOVS     R2,#+1
   \   0000003C   0x4611             MOV      R1,R2
   \   0000003E   0x4620             MOV      R0,R4
   \   00000040   0x.... 0x....      BL       TIM_ITConfig
     34              
     35          	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);												
   \   00000044   0xF44F 0x60C0      MOV      R0,#+1536
   \   00000048   0x.... 0x....      BL       NVIC_PriorityGroupConfig
     36              nvic.NVIC_IRQChannel = TIM3_IRQChannel;	  
   \   0000004C   0x201D             MOVS     R0,#+29
   \   0000004E   0xF88D 0x0000      STRB     R0,[SP, #+0]
     37              nvic.NVIC_IRQChannelPreemptionPriority = 11;
   \   00000052   0x200B             MOVS     R0,#+11
   \   00000054   0xF88D 0x0001      STRB     R0,[SP, #+1]
     38              nvic.NVIC_IRQChannelSubPriority = 2;	
   \   00000058   0x2002             MOVS     R0,#+2
   \   0000005A   0xF88D 0x0002      STRB     R0,[SP, #+2]
     39              nvic.NVIC_IRQChannelCmd = ENABLE;
   \   0000005E   0x2001             MOVS     R0,#+1
   \   00000060   0xF88D 0x0003      STRB     R0,[SP, #+3]
     40              NVIC_Init(&nvic);
   \   00000064   0xA800             ADD      R0,SP,#+0
   \   00000066   0x.... 0x....      BL       NVIC_Init
     41          	BSP_IntVectSet(BSP_INT_ID_TIM3, BSP_IntHandlerTIM3); 				//设置串口1的中断向量，必须要有的
   \   0000006A   0x.... 0x....      ADR.W    R1,BSP_IntHandlerTIM3
   \   0000006E   0x201D             MOVS     R0,#+29
   \   00000070   0x.... 0x....      BL       BSP_IntVectSet
     42          	BSP_IntEn(BSP_INT_ID_TIM3);
   \   00000074   0x201D             MOVS     R0,#+29
   \   00000076   0x.... 0x....      BL       BSP_IntEn
     43          }
   \   0000007A   0xBD1F             POP      {R0-R4,PC}       ;; return
     44          
     45          
     46          /**
     47            * @brief		tim2中断函数
     48            * @details	
     49            * @param 	NULL	无
     50            * @retval 	NULL	无
     51            */

   \                                 In section .text, align 4, keep-with-next
     52          void BSP_IntHandlerTIM3(void)
     53          {
   \                     BSP_IntHandlerTIM3: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     54          	OS_CPU_SR  cpu_sr; 
     55          	OS_ENTER_CRITICAL();
   \   00000002   0x.... 0x....      BL       OS_CPU_SR_Save
     56              OSIntNesting++;
   \   00000006   0x....             LDR.N    R1,??DataTable1_1
   \   00000008   0x780A             LDRB     R2,[R1, #+0]
   \   0000000A   0x1C52             ADDS     R2,R2,#+1
   \   0000000C   0x700A             STRB     R2,[R1, #+0]
     57              OS_EXIT_CRITICAL();
   \   0000000E   0x.... 0x....      BL       OS_CPU_SR_Restore
     58          	if(TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET ) 
   \   00000012   0x....             LDR.N    R4,??DataTable1  ;; 0x40000400
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x4620             MOV      R0,R4
   \   00000018   0x.... 0x....      BL       TIM_GetITStatus
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD007             BEQ.N    ??BSP_IntHandlerTIM3_0
     59          	{
     60          		TIM_Cmd(TIM3, DISABLE);	 
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x4620             MOV      R0,R4
   \   00000024   0x.... 0x....      BL       TIM_Cmd
     61          		TIM_ClearITPendingBit(TIM3, TIM_FLAG_Update); 	  
   \   00000028   0x2101             MOVS     R1,#+1
   \   0000002A   0x4620             MOV      R0,R4
   \   0000002C   0x.... 0x....      BL       TIM_ClearITPendingBit
     62          	}
     63              OSIntExit();
   \                     ??BSP_IntHandlerTIM3_0: (+1)
   \   00000030   0xE8BD 0x4010      POP      {R4,LR}
   \   00000034   0x.... 0x....      B.W      OSIntExit
     64          }	
     65          
     66          
     67          /**
     68            * @brief 将十六进制字符串转成数字
     69           */

   \                                 In section .text, align 2, keep-with-next
     70          u16 NB_HexStrToNum(char* str)
     71          {
   \                     NB_HexStrToNum: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
     72          	u16 i = 0;
     73          	u8 tmp = 0;
   \   00000004   0x2500             MOVS     R5,#+0
     74          	u8 tmp1 = 0;
     75          	u16 len = strlen(str);
   \   00000006   0x.... 0x....      BL       strlen
   \   0000000A   0xB280             UXTH     R0,R0
     76          	if(len == 0)
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD101             BNE.N    ??NB_HexStrToNum_0
     77          	{
     78          		return 0;
   \   00000010   0x4628             MOV      R0,R5
   \   00000012   0xBD70             POP      {R4-R6,PC}
     79          	}
     80          	 
     81          	for( i = 0 ; i < len; i ++)
   \                     ??NB_HexStrToNum_0: (+1)
   \   00000014   0x4629             MOV      R1,R5
   \   00000016   0xE005             B.N      ??NB_HexStrToNum_1
     82          	{
     83          		if(str[i] >= '0' && str[i] <= '9')
     84          	    {
     85          			tmp1 = str[i] - '0';
     86          	    }
     87          	    else if(str[i] >= 'A' && str[i] <= 'F')
     88          	    {
     89          			tmp1 = str[i] - 'A' + 10; 
     90          	    }
     91          	    else if(str[i] >= 'a' && str[i] <= 'f')
     92          	    {
     93          			tmp1 = str[i] - 'a' + 10;
     94          	    }
     95          	    else
     96          	    {
     97          			tmp1 = 0;
     98          	    }
     99          	    
    100          	    if((i % 2) == 0)
    101          	    {
    102          			tmp = tmp1; 
    103          	    }
    104          	    else
    105          	    {
    106          			tmp <<= 4;
    107          			tmp += tmp1;
   \                     ??NB_HexStrToNum_2: (+1)
   \   00000018   0xEB02 0x1505      ADD      R5,R2,R5, LSL #+4
    108          			str[i >> 1] = tmp;
   \   0000001C   0x104A             ASRS     R2,R1,#+1
   \   0000001E   0x5515             STRB     R5,[R2, R4]
    109          	    }
   \                     ??NB_HexStrToNum_3: (+1)
   \   00000020   0x1C49             ADDS     R1,R1,#+1
   \   00000022   0xB289             UXTH     R1,R1
   \                     ??NB_HexStrToNum_1: (+1)
   \   00000024   0x4281             CMP      R1,R0
   \   00000026   0xDA1B             BGE.N    ??NB_HexStrToNum_4
   \   00000028   0x5D0A             LDRB     R2,[R1, R4]
   \   0000002A   0x4613             MOV      R3,R2
   \   0000002C   0xF1A3 0x0630      SUB      R6,R3,#+48
   \   00000030   0x2E0A             CMP      R6,#+10
   \   00000032   0xD201             BCS.N    ??NB_HexStrToNum_5
   \   00000034   0x3A30             SUBS     R2,R2,#+48
   \   00000036   0xE00B             B.N      ??NB_HexStrToNum_6
   \                     ??NB_HexStrToNum_5: (+1)
   \   00000038   0xF1A3 0x0641      SUB      R6,R3,#+65
   \   0000003C   0x2E06             CMP      R6,#+6
   \   0000003E   0xD201             BCS.N    ??NB_HexStrToNum_7
   \   00000040   0x3A37             SUBS     R2,R2,#+55
   \   00000042   0xE005             B.N      ??NB_HexStrToNum_6
   \                     ??NB_HexStrToNum_7: (+1)
   \   00000044   0x3B61             SUBS     R3,R3,#+97
   \   00000046   0x2B06             CMP      R3,#+6
   \   00000048   0xD201             BCS.N    ??NB_HexStrToNum_8
   \   0000004A   0x3A57             SUBS     R2,R2,#+87
   \   0000004C   0xE000             B.N      ??NB_HexStrToNum_6
   \                     ??NB_HexStrToNum_8: (+1)
   \   0000004E   0x2200             MOVS     R2,#+0
   \                     ??NB_HexStrToNum_6: (+1)
   \   00000050   0xEB01 0x73D1      ADD      R3,R1,R1, LSR #+31
   \   00000054   0x105B             ASRS     R3,R3,#+1
   \   00000056   0xEBB1 0x0343      SUBS     R3,R1,R3, LSL #+1
   \   0000005A   0xD1DD             BNE.N    ??NB_HexStrToNum_2
   \   0000005C   0x4615             MOV      R5,R2
   \   0000005E   0xE7DF             B.N      ??NB_HexStrToNum_3
    110          	    
    111          	}
    112          	str[i >> 1] = 0;	  
   \                     ??NB_HexStrToNum_4: (+1)
   \   00000060   0x1048             ASRS     R0,R1,#+1
   \   00000062   0x2100             MOVS     R1,#+0
   \   00000064   0x5501             STRB     R1,[R0, R4]
    113          	return (i >> 1);
   \   00000066   0xB280             UXTH     R0,R0
   \   00000068   0xBD70             POP      {R4-R6,PC}       ;; return
    114          }
    115          
    116          //******************************************************************************
    117          // fn : NB_Strtoul
    118          //
    119          // brief : 将字符型数字转成整型
    120          //
    121          // param : pStr -> 要转换内容地址
    122          //         base -> 转换内容以多少进制进行转换（2-36）
    123          //
    124          // return : 整形数据

   \                                 In section .text, align 2, keep-with-next
    125          u32 NB_Strtoul(const char* pStr,int base)
    126          {
    127            return strtoul(pStr, 0, base);
   \                     NB_Strtoul: (+1)
   \   00000000   0x460A             MOV      R2,R1
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x.... 0x....      B.W      strtoul
    128          }
    129          
    130          /***********************************************************************
    131          * 功能：将一个十六进制字节串转换成ASCII码表示的十六进制字符串
    132          * 输入参数：pHex----十六进制数字节串首地址
    133          *        			pAscii---转换后ASCII码表示的十六进制字符串首地址
    134          *        			nLen---要转换的十六进制数长度（字节数）
    135          * 注：转换后的结果全部是大写ASCII码表示的十六进制数
    136          *此部分百度的
    137          ************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    138          void HexToAscii(unsigned char *pHex, unsigned char *pAscii, int nLen)
    139          {
   \                     HexToAscii: (+1)
   \   00000000   0xB4F8             PUSH     {R3-R7}
    140          	unsigned char Nibble[2];
    141              unsigned int i,j;
    142              for (i = 0; i < nLen; i++){
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0xE000             B.N      ??HexToAscii_0
   \                     ??HexToAscii_1: (+1)
   \   00000006   0x1C5B             ADDS     R3,R3,#+1
   \                     ??HexToAscii_0: (+1)
   \   00000008   0x4293             CMP      R3,R2
   \   0000000A   0xD21C             BCS.N    ??HexToAscii_2
    143                  Nibble[0] = (pHex[i] & 0xF0) >> 4;
   \   0000000C   0x5C1C             LDRB     R4,[R3, R0]
   \   0000000E   0x0925             LSRS     R5,R4,#+4
   \   00000010   0xF88D 0x5000      STRB     R5,[SP, #+0]
    144                  Nibble[1] = pHex[i] & 0x0F;
   \   00000014   0xAD00             ADD      R5,SP,#+0
   \   00000016   0xF004 0x040F      AND      R4,R4,#0xF
   \   0000001A   0x706C             STRB     R4,[R5, #+1]
    145                  for (j = 0; j < 2; j++){
   \   0000001C   0x2400             MOVS     R4,#+0
   \   0000001E   0xE008             B.N      ??HexToAscii_3
    146                      if (Nibble[j] < 10){ 			
    147                          Nibble[j] += 0x30;
    148                      }
    149                      else{
    150                          if (Nibble[j] < 16)
   \                     ??HexToAscii_4: (+1)
   \   00000020   0x2E10             CMP      R6,#+16
   \   00000022   0xDA02             BGE.N    ??HexToAscii_5
    151                              Nibble[j] = Nibble[j] - 10 + 'A';
   \   00000024   0xF107 0x0637      ADD      R6,R7,#+55
   \   00000028   0x5566             STRB     R6,[R4, R5]
    152                      }
    153                      *pAscii++ = Nibble[j];
   \                     ??HexToAscii_5: (+1)
   \   0000002A   0x5D66             LDRB     R6,[R4, R5]
   \   0000002C   0xF801 0x6B01      STRB     R6,[R1], #+1
   \   00000030   0x1C64             ADDS     R4,R4,#+1
   \                     ??HexToAscii_3: (+1)
   \   00000032   0x2C02             CMP      R4,#+2
   \   00000034   0xD2E7             BCS.N    ??HexToAscii_1
   \   00000036   0x5D67             LDRB     R7,[R4, R5]
   \   00000038   0x463E             MOV      R6,R7
   \   0000003A   0x2E0A             CMP      R6,#+10
   \   0000003C   0xDAF0             BGE.N    ??HexToAscii_4
   \   0000003E   0xF107 0x0630      ADD      R6,R7,#+48
   \   00000042   0x5566             STRB     R6,[R4, R5]
   \   00000044   0xE7F1             B.N      ??HexToAscii_5
    154                  }   
    155              }  		
    156          }
   \                     ??HexToAscii_2: (+1)
   \   00000046   0xBCF1             POP      {R0,R4-R7}
   \   00000048   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x40000400         DC32     0x40000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     OSIntNesting
    157          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   BSP_IntHandlerTIM3
         0   -> OSIntExit
         8   -> OS_CPU_SR_Restore
         8   -> OS_CPU_SR_Save
         8   -> TIM_ClearITPendingBit
         8   -> TIM_Cmd
         8   -> TIM_GetITStatus
      20   HexToAscii
      16   NB_HexStrToNum
        16   -> strlen
       0   NB_Strtoul
         0   -> strtoul
      24   NBiot_Timer_Init
        24   -> BSP_IntEn
        24   -> BSP_IntVectSet
        24   -> NVIC_Init
        24   -> NVIC_PriorityGroupConfig
        24   -> RCC_APB1PeriphClockCmd
        24   -> TIM_ClearFlag
        24   -> TIM_DeInit
        24   -> TIM_ITConfig
        24   -> TIM_TimeBaseInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
      56  BSP_IntHandlerTIM3
      74  HexToAscii
     106  NB_HexStrToNum
       8  NB_Strtoul
     124  NBiot_Timer_Init

 
 376 bytes in section .text
 
 376 bytes of CODE memory

Errors: none
Warnings: none
