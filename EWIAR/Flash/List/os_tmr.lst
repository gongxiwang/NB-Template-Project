###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        12/Jul/2019  09:14:40
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\UCOS-II\uC-OSII\Source\os_tmr.c
#    Command line =  
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\UCOS-II\uC-OSII\Source\os_tmr.c
#        -D LORA_MODULE -lCN
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\Flash\List\ -o
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\Flash\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        D:\Softwares\IAR7.40\arm\INC\c\DLib_Config_Full.h -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\CPU\inc\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-CPU\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-CPU\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-LIB\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-OSII\Ports\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-OSII\Source\
#        -I E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\USER\BSP\
#        -I E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\USER\APP\
#        -Om --use_c++_inline
#    List file    =  
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\Flash\List\os_tmr.lst
#    Object file  =  
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\Flash\Obj\os_tmr.o
#
###############################################################################

E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\UCOS-II\uC-OSII\Source\os_tmr.c
      1          /*
      2          ************************************************************************************************************************
      3          *                                                uC/OS-II
      4          *                                          The Real-Time Kernel
      5          *                                            TIMER MANAGEMENT
      6          *
      7          *                              (c) Copyright 1992-2007, Micrium, Weston, FL
      8          *                                           All Rights Reserved
      9          *
     10          *
     11          * File    : OS_TMR.C
     12          * By      : Jean J. Labrosse
     13          * Version : V2.86
     14          *
     15          * LICENSING TERMS:
     16          * ---------------
     17          *   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.  
     18          * If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license 
     19          * its use in your product. We provide ALL the source code for your convenience and to help you experience 
     20          * uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a 
     21          * licensing fee.
     22          ************************************************************************************************************************
     23          */
     24          
     25          #include <ucos_ii.h>
     26          
     27          /*
     28          ************************************************************************************************************************
     29          *                                                        NOTES
     30          *
     31          * 1) Your application MUST define the following #define constants:
     32          *
     33          *    OS_TASK_TMR_PRIO          The priority of the Timer management task
     34          *    OS_TASK_TMR_STK_SIZE      The size     of the Timer management task's stack
     35          *
     36          * 2) You must call OSTmrSignal() to notify the Timer management task that it's time to update the timers.
     37          ************************************************************************************************************************
     38          */
     39          
     40          /*
     41          ************************************************************************************************************************
     42          *                                                     CONSTANTS
     43          ************************************************************************************************************************
     44          */
     45          
     46          #define  OS_TMR_LINK_DLY       0
     47          #define  OS_TMR_LINK_PERIODIC  1
     48          
     49          /*
     50          ************************************************************************************************************************
     51          *                                                  LOCAL PROTOTYPES
     52          ************************************************************************************************************************
     53          */
     54          
     55          #if OS_TMR_EN > 0
     56          static  OS_TMR  *OSTmr_Alloc         (void);
     57          static  void     OSTmr_Free          (OS_TMR *ptmr);
     58          static  void     OSTmr_InitTask      (void);
     59          static  void     OSTmr_Link          (OS_TMR *ptmr, INT8U type);
     60          static  void     OSTmr_Unlink        (OS_TMR *ptmr);
     61          static  void     OSTmr_Lock          (void);
     62          static  void     OSTmr_Unlock        (void);
     63          static  void     OSTmr_Task          (void   *p_arg);
     64          #endif
     65          
     66          /*$PAGE*/
     67          /*
     68          ************************************************************************************************************************
     69          *                                                   CREATE A TIMER
     70          *
     71          * Description: This function is called by your application code to create a timer.
     72          *
     73          * Arguments  : dly           Initial delay.
     74          *                            If the timer is configured for ONE-SHOT mode, this is the timeout used
     75          *                            If the timer is configured for PERIODIC mode, this is the first timeout to wait for
     76          *                               before the timer starts entering periodic mode
     77          *
     78          *              period        The 'period' being repeated for the timer.
     79          *                               If you specified 'OS_TMR_OPT_PERIODIC' as an option, when the timer expires, it will
     80          *                               automatically restart with the same period.
     81          *
     82          *              opt           Specifies either:
     83          *                               OS_TMR_OPT_ONE_SHOT       The timer counts down only once
     84          *                               OS_TMR_OPT_PERIODIC       The timer counts down and then reloads itself
     85          *
     86          *              callback      Is a pointer to a callback function that will be called when the timer expires.  The
     87          *                               callback function must be declared as follows:
     88          *
     89          *                               void MyCallback (OS_TMR *ptmr, void *p_arg);
     90          *
     91          *              callback_arg  Is an argument (a pointer) that is passed to the callback function when it is called.
     92          *
     93          *              pname         Is a pointer to an ASCII string that is used to name the timer.  Names are useful for
     94          *                               debugging.  The length of the ASCII string for the name can be as big as:
     95          *
     96          *                               OS_TMR_CFG_NAME_SIZE and should be found in OS_CFG.H
     97          *
     98          *              perr          Is a pointer to an error code.  '*perr' will contain one of the following:
     99          *                               OS_ERR_NONE
    100          *                               OS_ERR_TMR_INVALID_DLY     you specified an invalid delay
    101          *                               OS_ERR_TMR_INVALID_PERIOD  you specified an invalid period
    102          *                               OS_ERR_TMR_INVALID_OPT     you specified an invalid option
    103          *                               OS_ERR_TMR_ISR             if the call was made from an ISR
    104          *                               OS_ERR_TMR_NON_AVAIL       if there are no free timers from the timer pool
    105          *                               OS_ERR_TMR_NAME_TOO_LONG   if the timer name is too long to fit
    106          *
    107          * Returns    : A pointer to an OS_TMR data structure.  
    108          *              This is the 'handle' that your application will use to reference the timer created.
    109          ************************************************************************************************************************
    110          */
    111          
    112          #if OS_TMR_EN > 0

   \                                 In section .text, align 2, keep-with-next
    113          OS_TMR  *OSTmrCreate (INT32U           dly,
    114                                INT32U           period,
    115                                INT8U            opt,
    116                                OS_TMR_CALLBACK  callback,
    117                                void            *callback_arg,
    118                                INT8U           *pname,
    119                                INT8U           *perr)
    120          {
   \                     OSTmrCreate: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4607             MOV      R7,R0
   \   00000006   0x4688             MOV      R8,R1
   \   00000008   0x4691             MOV      R9,R2
   \   0000000A   0x469A             MOV      R10,R3
   \   0000000C   0x9C0A             LDR      R4,[SP, #+40]
    121              OS_TMR   *ptmr;
    122          #if OS_TMR_CFG_NAME_SIZE > 0
    123              INT8U     len;
    124          #endif
    125          
    126          
    127          #if OS_ARG_CHK_EN > 0
    128              if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
    129                  return ((OS_TMR *)0);
    130              }
    131              switch (opt) {
    132                  case OS_TMR_OPT_PERIODIC:
    133                       if (period == 0) {
    134                           *perr = OS_ERR_TMR_INVALID_PERIOD;
    135                           return ((OS_TMR *)0);
    136                       }
    137                       break;
    138          
    139                  case OS_TMR_OPT_ONE_SHOT:
    140                       if (dly == 0) {
    141                           *perr = OS_ERR_TMR_INVALID_DLY;
    142                           return ((OS_TMR *)0);
    143                       }
    144                       break;
    145          
    146                  default:
    147                       *perr = OS_ERR_TMR_INVALID_OPT;
    148                       return ((OS_TMR *)0);
    149              }
    150          #endif
    151              if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable19
   \   00000012   0x7800             LDRB     R0,[R0, #+0]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD003             BEQ.N    ??OSTmrCreate_0
    152                  *perr  = OS_ERR_TMR_ISR;
   \   00000018   0x208B             MOVS     R0,#+139
   \   0000001A   0x7020             STRB     R0,[R4, #+0]
    153                  return ((OS_TMR *)0);
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xE02B             B.N      ??OSTmrCreate_1
    154              }
    155              OSTmr_Lock();
   \                     ??OSTmrCreate_0: (+1)
   \   00000020   0x.... 0x....      BL       OSTmr_Lock
    156              ptmr = OSTmr_Alloc();                                   /* Obtain a timer from the free pool                      */
   \   00000024   0x.... 0x....      BL       OSTmr_Alloc
   \   00000028   0x0005             MOVS     R5,R0
    157              if (ptmr == (OS_TMR *)0) {
   \   0000002A   0xD105             BNE.N    ??OSTmrCreate_2
    158                  OSTmr_Unlock();
   \   0000002C   0x.... 0x....      BL       OSTmr_Unlock
    159                  *perr = OS_ERR_TMR_NON_AVAIL;
   \   00000030   0x2086             MOVS     R0,#+134
   \   00000032   0x7020             STRB     R0,[R4, #+0]
    160                  return ((OS_TMR *)0);
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xE01F             B.N      ??OSTmrCreate_1
    161              }
    162              ptmr->OSTmrState       = OS_TMR_STATE_STOPPED;          /* Indicate that timer is not running yet                 */
   \                     ??OSTmrCreate_2: (+1)
   \   00000038   0xF105 0x0030      ADD      R0,R5,#+48
   \   0000003C   0x2101             MOVS     R1,#+1
   \   0000003E   0x7041             STRB     R1,[R0, #+1]
    163              ptmr->OSTmrDly         = dly;
   \   00000040   0x1D2E             ADDS     R6,R5,#+4
   \   00000042   0x6177             STR      R7,[R6, #+20]
    164              ptmr->OSTmrPeriod      = period;
   \   00000044   0xF8C6 0x8018      STR      R8,[R6, #+24]
    165              ptmr->OSTmrOpt         = opt;
   \   00000048   0xF880 0x9000      STRB     R9,[R0, #+0]
    166              ptmr->OSTmrCallback    = callback;
   \   0000004C   0xF8C6 0xA000      STR      R10,[R6, #+0]
    167              ptmr->OSTmrCallbackArg = callback_arg;
   \   00000050   0x9808             LDR      R0,[SP, #+32]
   \   00000052   0x6070             STR      R0,[R6, #+4]
   \   00000054   0x9F09             LDR      R7,[SP, #+36]
    168          #if OS_TMR_CFG_NAME_SIZE > 0
    169              if (pname !=(INT8U *)0) {
   \   00000056   0x2F00             CMP      R7,#+0
   \   00000058   0xD009             BEQ.N    ??OSTmrCreate_3
    170                  len = OS_StrLen(pname);                             /* Copy timer name                                        */
    171                  if (len < OS_TMR_CFG_NAME_SIZE) {
   \   0000005A   0x4638             MOV      R0,R7
   \   0000005C   0x.... 0x....      BL       OS_StrLen
   \   00000060   0x2810             CMP      R0,#+16
   \   00000062   0xDA0B             BGE.N    ??OSTmrCreate_4
    172                      (void)OS_StrCopy(ptmr->OSTmrName, pname);
   \   00000064   0x4639             MOV      R1,R7
   \   00000066   0xF105 0x0020      ADD      R0,R5,#+32
   \   0000006A   0x.... 0x....      BL       OS_StrCopy
    173                  } else {
    174          #if OS_TMR_CFG_NAME_SIZE > 1
    175                      ptmr->OSTmrName[0] = '#';                       /* Invalid size specified                                 */
    176                      ptmr->OSTmrName[1] = OS_ASCII_NUL;
    177          #endif
    178                      *perr              = OS_ERR_TMR_NAME_TOO_LONG;
    179                      OSTmr_Unlock();
    180                      return (ptmr);
    181                  }
    182              }
    183          #endif
    184              OSTmr_Unlock();
   \                     ??OSTmrCreate_3: (+1)
   \   0000006E   0x.... 0x....      BL       OSTmr_Unlock
    185              *perr = OS_ERR_NONE;
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x7020             STRB     R0,[R4, #+0]
    186              return (ptmr);
   \   00000076   0x4628             MOV      R0,R5
   \                     ??OSTmrCreate_1: (+1)
   \   00000078   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   \                     ??OSTmrCreate_4: (+1)
   \   0000007C   0x2023             MOVS     R0,#+35
   \   0000007E   0x7730             STRB     R0,[R6, #+28]
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0x7770             STRB     R0,[R6, #+29]
   \   00000084   0x208C             MOVS     R0,#+140
   \   00000086   0x7020             STRB     R0,[R4, #+0]
   \   00000088   0x.... 0x....      BL       OSTmr_Unlock
   \   0000008C   0x4628             MOV      R0,R5
   \   0000008E   0xE7F3             B.N      ??OSTmrCreate_1
    187          }
    188          #endif
    189          
    190          /*$PAGE*/
    191          /*
    192          ************************************************************************************************************************
    193          *                                                   DELETE A TIMER
    194          *
    195          * Description: This function is called by your application code to delete a timer.
    196          *
    197          * Arguments  : ptmr          Is a pointer to the timer to stop and delete.
    198          *
    199          *              perr          Is a pointer to an error code.  '*perr' will contain one of the following:
    200          *                               OS_ERR_NONE
    201          *                               OS_ERR_TMR_INVALID        'ptmr'  is a NULL pointer
    202          *                               OS_ERR_TMR_INVALID_TYPE   'ptmr'  is not pointing to an OS_TMR
    203          *                               OS_ERR_TMR_ISR            if the function was called from an ISR
    204          *                               OS_ERR_TMR_INACTIVE       if the timer was not created
    205          *                               OS_ERR_TMR_INVALID_STATE  the timer is in an invalid state
    206          *
    207          * Returns    : OS_TRUE       If the call was successful
    208          *              OS_FALSE      If not
    209          ************************************************************************************************************************
    210          */
    211          
    212          #if OS_TMR_EN > 0

   \                                 In section .text, align 2, keep-with-next
    213          BOOLEAN  OSTmrDel (OS_TMR  *ptmr,
    214                             INT8U   *perr)
    215          {
   \                     OSTmrDel: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4605             MOV      R5,R0
   \   00000004   0x460C             MOV      R4,R1
    216          #if OS_ARG_CHK_EN > 0
    217              if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
    218                  return (OS_FALSE);
    219              }
    220              if (ptmr == (OS_TMR *)0) {
    221                  *perr = OS_ERR_TMR_INVALID;
    222                  return (OS_FALSE);
    223              }
    224          #endif
    225              if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
   \   00000006   0x7828             LDRB     R0,[R5, #+0]
   \   00000008   0x2864             CMP      R0,#+100
   \   0000000A   0xD003             BEQ.N    ??OSTmrDel_0
    226                  *perr = OS_ERR_TMR_INVALID_TYPE;
   \   0000000C   0x2089             MOVS     R0,#+137
   \   0000000E   0x7020             STRB     R0,[R4, #+0]
    227                  return (OS_FALSE);
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xBD32             POP      {R1,R4,R5,PC}
    228              }
    229              if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
   \                     ??OSTmrDel_0: (+1)
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable19
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD003             BEQ.N    ??OSTmrDel_1
    230                  *perr  = OS_ERR_TMR_ISR;
   \   0000001E   0x208B             MOVS     R0,#+139
   \   00000020   0x7020             STRB     R0,[R4, #+0]
    231                  return (OS_FALSE);
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xBD32             POP      {R1,R4,R5,PC}
    232              }
    233              OSTmr_Lock();
   \                     ??OSTmrDel_1: (+1)
   \   00000026   0x.... 0x....      BL       OSTmr_Lock
    234              switch (ptmr->OSTmrState) {
   \   0000002A   0xF895 0x0031      LDRB     R0,[R5, #+49]
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD019             BEQ.N    ??OSTmrDel_2
   \   00000032   0x2802             CMP      R0,#+2
   \   00000034   0xD00E             BEQ.N    ??OSTmrDel_3
   \   00000036   0xD30D             BCC.N    ??OSTmrDel_3
   \   00000038   0x2803             CMP      R0,#+3
   \   0000003A   0xD11A             BNE.N    ??OSTmrDel_4
    235                  case OS_TMR_STATE_RUNNING:
    236                       OSTmr_Unlink(ptmr);                            /* Remove from current wheel spoke                        */
   \   0000003C   0x4628             MOV      R0,R5
   \   0000003E   0x.... 0x....      BL       OSTmr_Unlink
    237                       OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
   \   00000042   0x4628             MOV      R0,R5
   \   00000044   0x.... 0x....      BL       OSTmr_Free
    238                       OSTmr_Unlock();
   \   00000048   0x.... 0x....      BL       OSTmr_Unlock
    239                       *perr = OS_ERR_NONE;
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x7020             STRB     R0,[R4, #+0]
    240                       return (OS_TRUE);
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0xBD32             POP      {R1,R4,R5,PC}
    241          
    242                  case OS_TMR_STATE_STOPPED:                          /* Timer has not started or ...                           */
    243                  case OS_TMR_STATE_COMPLETED:                        /* ... timer has completed the ONE-SHOT time              */
    244                       OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
   \                     ??OSTmrDel_3: (+1)
   \   00000054   0x4628             MOV      R0,R5
   \   00000056   0x.... 0x....      BL       OSTmr_Free
    245                       OSTmr_Unlock();
   \   0000005A   0x.... 0x....      BL       OSTmr_Unlock
    246                       *perr = OS_ERR_NONE;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x7020             STRB     R0,[R4, #+0]
    247                       return (OS_TRUE);
   \   00000062   0x2001             MOVS     R0,#+1
   \   00000064   0xBD32             POP      {R1,R4,R5,PC}
    248          
    249                  case OS_TMR_STATE_UNUSED:                           /* Already deleted                                        */
    250                       OSTmr_Unlock();
   \                     ??OSTmrDel_2: (+1)
   \   00000066   0x.... 0x....      BL       OSTmr_Unlock
    251                       *perr = OS_ERR_TMR_INACTIVE;
   \   0000006A   0x2087             MOVS     R0,#+135
   \   0000006C   0x7020             STRB     R0,[R4, #+0]
    252                       return (OS_FALSE);
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0xBD32             POP      {R1,R4,R5,PC}
    253          
    254                  default:
    255                       OSTmr_Unlock();
   \                     ??OSTmrDel_4: (+1)
   \   00000072   0x.... 0x....      BL       OSTmr_Unlock
    256                       *perr = OS_ERR_TMR_INVALID_STATE;
   \   00000076   0x208D             MOVS     R0,#+141
   \   00000078   0x7020             STRB     R0,[R4, #+0]
    257                       return (OS_FALSE);
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    258              }
    259          }
    260          #endif
    261          
    262          /*$PAGE*/
    263          /*
    264          ************************************************************************************************************************
    265          *                                             GET THE NAME OF A TIMER
    266          *
    267          * Description: This function is called to obtain the name of a timer.
    268          *
    269          * Arguments  : ptmr          Is a pointer to the timer to obtain the name for
    270          *
    271          *              pdest         Is a pointer to where the name of the timer will be placed.  It is the caller's responsibility
    272          *                            to ensure that he has sufficient storage in the destination, i.e. at least OS_TMR_CFG_NAME_SIZE
    273          *
    274          *              perr          Is a pointer to an error code.  '*perr' will contain one of the following:
    275          *                               OS_ERR_NONE               The call was successful
    276          *                               OS_ERR_TMR_INVALID_DEST   'pdest' is a NULL pointer
    277          *                               OS_ERR_TMR_INVALID        'ptmr'  is a NULL pointer
    278          *                               OS_ERR_TMR_INVALID_TYPE   'ptmr'  is not pointing to an OS_TMR
    279          *                               OS_ERR_NAME_GET_ISR       if the call was made from an ISR
    280          *                               OS_ERR_TMR_INACTIVE       'ptmr'  points to a timer that is not active
    281          *                               OS_ERR_TMR_INVALID_STATE  the timer is in an invalid state
    282          *
    283          * Returns    : The length of the string or 0 if the timer does not exist.
    284          ************************************************************************************************************************
    285          */
    286          
    287          #if OS_TMR_EN > 0 && OS_TMR_CFG_NAME_SIZE > 0

   \                                 In section .text, align 2, keep-with-next
    288          INT8U  OSTmrNameGet (OS_TMR  *ptmr,
    289                               INT8U   *pdest,
    290                               INT8U   *perr)
    291          {
   \                     OSTmrNameGet: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4605             MOV      R5,R0
   \   00000004   0x460E             MOV      R6,R1
   \   00000006   0x4614             MOV      R4,R2
    292              INT8U  len;
    293          
    294          
    295          #if OS_ARG_CHK_EN > 0
    296              if (perr == (INT8U *)0) {
    297                  return (0);
    298              }
    299              if (pdest == (INT8U *)0) {
    300                  *perr = OS_ERR_TMR_INVALID_DEST;
    301                  return (0);
    302              }
    303              if (ptmr == (OS_TMR *)0) {
    304                  *perr = OS_ERR_TMR_INVALID;
    305                  return (0);
    306              }
    307          #endif
    308              if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
   \   00000008   0x7828             LDRB     R0,[R5, #+0]
   \   0000000A   0x2864             CMP      R0,#+100
   \   0000000C   0xD003             BEQ.N    ??OSTmrNameGet_0
    309                  *perr = OS_ERR_TMR_INVALID_TYPE;
   \   0000000E   0x2089             MOVS     R0,#+137
   \   00000010   0x7020             STRB     R0,[R4, #+0]
    310                  return (0);
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xBD70             POP      {R4-R6,PC}
    311              }
    312              if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
   \                     ??OSTmrNameGet_0: (+1)
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable19
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD003             BEQ.N    ??OSTmrNameGet_1
    313                  *perr = OS_ERR_NAME_GET_ISR;
   \   00000020   0x2011             MOVS     R0,#+17
   \   00000022   0x7020             STRB     R0,[R4, #+0]
    314                  return (0);
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xBD70             POP      {R4-R6,PC}
    315              }
    316              OSTmr_Lock();
   \                     ??OSTmrNameGet_1: (+1)
   \   00000028   0x.... 0x....      BL       OSTmr_Lock
    317              switch (ptmr->OSTmrState) {
   \   0000002C   0xF895 0x0031      LDRB     R0,[R5, #+49]
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD00E             BEQ.N    ??OSTmrNameGet_2
   \   00000034   0x1E40             SUBS     R0,R0,#+1
   \   00000036   0x2802             CMP      R0,#+2
   \   00000038   0xD811             BHI.N    ??OSTmrNameGet_3
    318                  case OS_TMR_STATE_RUNNING:
    319                  case OS_TMR_STATE_STOPPED:
    320                  case OS_TMR_STATE_COMPLETED:
    321                       len   = OS_StrCopy(pdest, ptmr->OSTmrName);
   \   0000003A   0xF105 0x0120      ADD      R1,R5,#+32
   \   0000003E   0x4630             MOV      R0,R6
   \   00000040   0x.... 0x....      BL       OS_StrCopy
   \   00000044   0x4605             MOV      R5,R0
    322                       OSTmr_Unlock();
   \   00000046   0x.... 0x....      BL       OSTmr_Unlock
    323                       *perr = OS_ERR_NONE;
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x7020             STRB     R0,[R4, #+0]
    324                       return (len);
   \   0000004E   0x4628             MOV      R0,R5
   \   00000050   0xBD70             POP      {R4-R6,PC}
    325          
    326                  case OS_TMR_STATE_UNUSED:                      /* Timer is not allocated                                      */
    327                       OSTmr_Unlock();
   \                     ??OSTmrNameGet_2: (+1)
   \   00000052   0x.... 0x....      BL       OSTmr_Unlock
    328                       *perr = OS_ERR_TMR_INACTIVE;
   \   00000056   0x2087             MOVS     R0,#+135
   \   00000058   0x7020             STRB     R0,[R4, #+0]
    329                       return (0);
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0xBD70             POP      {R4-R6,PC}
    330          
    331                  default:
    332                       OSTmr_Unlock();
   \                     ??OSTmrNameGet_3: (+1)
   \   0000005E   0x.... 0x....      BL       OSTmr_Unlock
    333                       *perr = OS_ERR_TMR_INVALID_STATE;
   \   00000062   0x208D             MOVS     R0,#+141
   \   00000064   0x7020             STRB     R0,[R4, #+0]
    334                       return (0);
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0xBD70             POP      {R4-R6,PC}       ;; return
    335              }
    336          }
    337          #endif
    338          
    339          /*$PAGE*/
    340          /*
    341          ************************************************************************************************************************
    342          *                                    GET HOW MUCH TIME IS LEFT BEFORE A TIMER EXPIRES
    343          *
    344          * Description: This function is called to get the number of ticks before a timer times out.
    345          *
    346          * Arguments  : ptmr          Is a pointer to the timer to obtain the remaining time from.
    347          *
    348          *              perr          Is a pointer to an error code.  '*perr' will contain one of the following:
    349          *                               OS_ERR_NONE
    350          *                               OS_ERR_TMR_INVALID        'ptmr' is a NULL pointer
    351          *                               OS_ERR_TMR_INVALID_TYPE   'ptmr'  is not pointing to an OS_TMR
    352          *                               OS_ERR_TMR_ISR            if the call was made from an ISR
    353          *                               OS_ERR_TMR_INACTIVE       'ptmr' points to a timer that is not active
    354          *                               OS_ERR_TMR_INVALID_STATE  the timer is in an invalid state
    355          *
    356          * Returns    : The time remaining for the timer to expire.  The time represents 'timer' increments.  In other words, if
    357          *              OSTmr_Task() is signaled every 1/10 of a second then the returned value represents the number of 1/10 of
    358          *              a second remaining before the timer expires.
    359          ************************************************************************************************************************
    360          */
    361          
    362          #if OS_TMR_EN > 0

   \                                 In section .text, align 2, keep-with-next
    363          INT32U  OSTmrRemainGet (OS_TMR  *ptmr,
    364                                  INT8U   *perr)
    365          {
   \                     OSTmrRemainGet: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4605             MOV      R5,R0
   \   00000004   0x460C             MOV      R4,R1
    366              INT32U  remain;
    367          
    368          
    369          #if OS_ARG_CHK_EN > 0
    370              if (perr == (INT8U *)0) {
    371                  return (0);
    372              }
    373              if (ptmr == (OS_TMR *)0) {
    374                  *perr = OS_ERR_TMR_INVALID;
    375                  return (0);
    376              }
    377          #endif
    378              if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
   \   00000006   0x7828             LDRB     R0,[R5, #+0]
   \   00000008   0x2864             CMP      R0,#+100
   \   0000000A   0xD003             BEQ.N    ??OSTmrRemainGet_0
    379                  *perr = OS_ERR_TMR_INVALID_TYPE;
   \   0000000C   0x2089             MOVS     R0,#+137
   \   0000000E   0x7020             STRB     R0,[R4, #+0]
    380                  return (0);
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xBD70             POP      {R4-R6,PC}
    381              }
    382              if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
   \                     ??OSTmrRemainGet_0: (+1)
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable19
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD003             BEQ.N    ??OSTmrRemainGet_1
    383                  *perr = OS_ERR_TMR_ISR;
   \   0000001E   0x208B             MOVS     R0,#+139
   \   00000020   0x7020             STRB     R0,[R4, #+0]
    384                  return (0);
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xBD70             POP      {R4-R6,PC}
    385              }
    386              OSTmr_Lock();
   \                     ??OSTmrRemainGet_1: (+1)
   \   00000026   0x.... 0x....      BL       OSTmr_Lock
    387              switch (ptmr->OSTmrState) {
   \   0000002A   0xF105 0x0030      ADD      R0,R5,#+48
   \   0000002E   0x7841             LDRB     R1,[R0, #+1]
   \   00000030   0x2900             CMP      R1,#+0
   \   00000032   0xD026             BEQ.N    ??OSTmrRemainGet_2
   \   00000034   0x2902             CMP      R1,#+2
   \   00000036   0xD01F             BEQ.N    ??OSTmrRemainGet_3
   \   00000038   0xD30C             BCC.N    ??OSTmrRemainGet_4
   \   0000003A   0x2903             CMP      R1,#+3
   \   0000003C   0xD127             BNE.N    ??OSTmrRemainGet_5
    388                  case OS_TMR_STATE_RUNNING:
    389                       remain = ptmr->OSTmrMatch - OSTmrTime;    /* Determine how much time is left to timeout                  */
   \   0000003E   0x6968             LDR      R0,[R5, #+20]
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable19_1
   \   00000044   0x6809             LDR      R1,[R1, #+0]
   \   00000046   0x1A46             SUBS     R6,R0,R1
    390                       OSTmr_Unlock();
   \   00000048   0x.... 0x....      BL       OSTmr_Unlock
    391                       *perr  = OS_ERR_NONE;
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x7020             STRB     R0,[R4, #+0]
    392                       return (remain);
   \   00000050   0x4630             MOV      R0,R6
   \   00000052   0xBD70             POP      {R4-R6,PC}
    393          
    394                  case OS_TMR_STATE_STOPPED:                     /* It's assumed that the timer has not started yet             */
    395                       switch (ptmr->OSTmrOpt) {
   \                     ??OSTmrRemainGet_4: (+1)
   \   00000054   0x69AE             LDR      R6,[R5, #+24]
   \   00000056   0x7800             LDRB     R0,[R0, #+0]
   \   00000058   0x2802             CMP      R0,#+2
   \   0000005A   0xD107             BNE.N    ??OSTmrRemainGet_6
    396                           case OS_TMR_OPT_PERIODIC:
    397                                if (ptmr->OSTmrDly == 0) {
   \   0000005C   0x2E00             CMP      R6,#+0
   \   0000005E   0xD100             BNE.N    ??OSTmrRemainGet_7
    398                                    remain = ptmr->OSTmrPeriod;
   \   00000060   0x69EE             LDR      R6,[R5, #+28]
    399                                } else {
    400                                    remain = ptmr->OSTmrDly;
    401                                }
    402                                OSTmr_Unlock();
   \                     ??OSTmrRemainGet_7: (+1)
   \   00000062   0x.... 0x....      BL       OSTmr_Unlock
    403                                *perr  = OS_ERR_NONE;
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0x7020             STRB     R0,[R4, #+0]
    404                                break;
   \   0000006A   0xE003             B.N      ??OSTmrRemainGet_8
    405          
    406                           case OS_TMR_OPT_ONE_SHOT:
    407                           default:
    408                                remain = ptmr->OSTmrDly;
    409                                OSTmr_Unlock();
   \                     ??OSTmrRemainGet_6: (+1)
   \   0000006C   0x.... 0x....      BL       OSTmr_Unlock
    410                                *perr  = OS_ERR_NONE;
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0x7020             STRB     R0,[R4, #+0]
    411                                break;
    412                       }
    413                       return (remain);
   \                     ??OSTmrRemainGet_8: (+1)
   \   00000074   0x4630             MOV      R0,R6
   \   00000076   0xBD70             POP      {R4-R6,PC}
    414          
    415                  case OS_TMR_STATE_COMPLETED:                   /* Only ONE-SHOT that timed out can be in this state           */
    416                       OSTmr_Unlock();
   \                     ??OSTmrRemainGet_3: (+1)
   \   00000078   0x.... 0x....      BL       OSTmr_Unlock
    417                       *perr = OS_ERR_NONE;
   \   0000007C   0x2000             MOVS     R0,#+0
   \   0000007E   0x7020             STRB     R0,[R4, #+0]
    418                       return (0);
   \   00000080   0xBD70             POP      {R4-R6,PC}
    419          
    420                  case OS_TMR_STATE_UNUSED:
    421                       OSTmr_Unlock();
   \                     ??OSTmrRemainGet_2: (+1)
   \   00000082   0x.... 0x....      BL       OSTmr_Unlock
    422                       *perr = OS_ERR_TMR_INACTIVE;
   \   00000086   0x2087             MOVS     R0,#+135
   \   00000088   0x7020             STRB     R0,[R4, #+0]
    423                       return (0);
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0xBD70             POP      {R4-R6,PC}
    424          
    425                  default:
    426                       OSTmr_Unlock();
   \                     ??OSTmrRemainGet_5: (+1)
   \   0000008E   0x.... 0x....      BL       OSTmr_Unlock
    427                       *perr = OS_ERR_TMR_INVALID_STATE;
   \   00000092   0x208D             MOVS     R0,#+141
   \   00000094   0x7020             STRB     R0,[R4, #+0]
    428                       return (0);
   \   00000096   0x2000             MOVS     R0,#+0
   \   00000098   0xBD70             POP      {R4-R6,PC}       ;; return
    429              }
    430          }
    431          #endif
    432          
    433          /*$PAGE*/
    434          /*
    435          ************************************************************************************************************************
    436          *                                    FIND OUT WHAT STATE A TIMER IS IN
    437          *
    438          * Description: This function is called to determine what state the timer is in:
    439          *
    440          *                  OS_TMR_STATE_UNUSED     the timer has not been created
    441          *                  OS_TMR_STATE_STOPPED    the timer has been created but has not been started or has been stopped
    442          *                  OS_TMR_COMPLETED        the timer is in ONE-SHOT mode and has completed it's timeout
    443          *                  OS_TMR_RUNNING          the timer is currently running
    444          *
    445          * Arguments  : ptmr          Is a pointer to the desired timer
    446          *
    447          *              perr          Is a pointer to an error code.  '*perr' will contain one of the following:
    448          *                               OS_ERR_NONE
    449          *                               OS_ERR_TMR_INVALID        'ptmr' is a NULL pointer
    450          *                               OS_ERR_TMR_INVALID_TYPE   'ptmr'  is not pointing to an OS_TMR
    451          *                               OS_ERR_TMR_ISR            if the call was made from an ISR
    452          *                               OS_ERR_TMR_INACTIVE       'ptmr' points to a timer that is not active
    453          *                               OS_ERR_TMR_INVALID_STATE  if the timer is not in a valid state
    454          *
    455          * Returns    : The current state of the timer (see description).
    456          ************************************************************************************************************************
    457          */
    458          
    459          #if OS_TMR_EN > 0

   \                                 In section .text, align 2, keep-with-next
    460          INT8U  OSTmrStateGet (OS_TMR  *ptmr,
    461                                INT8U   *perr)
    462          {
   \                     OSTmrStateGet: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4605             MOV      R5,R0
   \   00000004   0x460C             MOV      R4,R1
    463              INT8U  state;
    464          
    465          
    466          #if OS_ARG_CHK_EN > 0
    467              if (perr == (INT8U *)0) {
    468                  return (0);
    469              }
    470              if (ptmr == (OS_TMR *)0) {
    471                  *perr = OS_ERR_TMR_INVALID;
    472                  return (0);
    473              }
    474          #endif
    475              if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
   \   00000006   0x7828             LDRB     R0,[R5, #+0]
   \   00000008   0x2864             CMP      R0,#+100
   \   0000000A   0xD003             BEQ.N    ??OSTmrStateGet_0
    476                  *perr = OS_ERR_TMR_INVALID_TYPE;
   \   0000000C   0x2089             MOVS     R0,#+137
   \   0000000E   0x7020             STRB     R0,[R4, #+0]
    477                  return (0);
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xBD32             POP      {R1,R4,R5,PC}
    478              }
    479              if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
   \                     ??OSTmrStateGet_0: (+1)
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable19
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD003             BEQ.N    ??OSTmrStateGet_1
    480                  *perr = OS_ERR_TMR_ISR;
   \   0000001E   0x208B             MOVS     R0,#+139
   \   00000020   0x7020             STRB     R0,[R4, #+0]
    481                  return (0);
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xBD32             POP      {R1,R4,R5,PC}
    482              }
    483              OSTmr_Lock();
   \                     ??OSTmrStateGet_1: (+1)
   \   00000026   0x.... 0x....      BL       OSTmr_Lock
    484              state = ptmr->OSTmrState;
   \   0000002A   0xF895 0x5031      LDRB     R5,[R5, #+49]
    485              switch (state) {
   \   0000002E   0x4628             MOV      R0,R5
   \   00000030   0x2803             CMP      R0,#+3
   \   00000032   0xD802             BHI.N    ??OSTmrStateGet_2
    486                  case OS_TMR_STATE_UNUSED:   
    487                  case OS_TMR_STATE_STOPPED:  
    488                  case OS_TMR_STATE_COMPLETED:
    489                  case OS_TMR_STATE_RUNNING:  
    490                       *perr = OS_ERR_NONE;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x7020             STRB     R0,[R4, #+0]
    491                       break;
   \   00000038   0xE001             B.N      ??OSTmrStateGet_3
    492                       
    493                  default:
    494                       *perr = OS_ERR_TMR_INVALID_STATE;
   \                     ??OSTmrStateGet_2: (+1)
   \   0000003A   0x208D             MOVS     R0,#+141
   \   0000003C   0x7020             STRB     R0,[R4, #+0]
    495                       break;
    496              }
    497              OSTmr_Unlock();
   \                     ??OSTmrStateGet_3: (+1)
   \   0000003E   0x.... 0x....      BL       OSTmr_Unlock
    498              return (state);
   \   00000042   0x4628             MOV      R0,R5
   \   00000044   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    499          }
    500          #endif
    501          
    502          /*$PAGE*/
    503          /*
    504          ************************************************************************************************************************
    505          *                                                   START A TIMER
    506          *
    507          * Description: This function is called by your application code to start a timer.
    508          *
    509          * Arguments  : ptmr          Is a pointer to an OS_TMR
    510          *
    511          *              perr          Is a pointer to an error code.  '*perr' will contain one of the following:
    512          *                               OS_ERR_NONE
    513          *                               OS_ERR_TMR_INVALID
    514          *                               OS_ERR_TMR_INVALID_TYPE    'ptmr'  is not pointing to an OS_TMR
    515          *                               OS_ERR_TMR_ISR             if the call was made from an ISR
    516          *                               OS_ERR_TMR_INACTIVE        if the timer was not created
    517          *                               OS_ERR_TMR_INVALID_STATE   the timer is in an invalid state
    518          *
    519          * Returns    : OS_TRUE    if the timer was started
    520          *              OS_FALSE   if an error was detected
    521          ************************************************************************************************************************
    522          */
    523          
    524          #if OS_TMR_EN > 0

   \                                 In section .text, align 2, keep-with-next
    525          BOOLEAN  OSTmrStart (OS_TMR   *ptmr,
    526                               INT8U    *perr)
    527          {
   \                     OSTmrStart: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4605             MOV      R5,R0
   \   00000004   0x460C             MOV      R4,R1
    528          #if OS_ARG_CHK_EN > 0
    529              if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
    530                  return (OS_FALSE);
    531              }
    532              if (ptmr == (OS_TMR *)0) {
    533                  *perr = OS_ERR_TMR_INVALID;
    534                  return (OS_FALSE);
    535              }
    536          #endif
    537              if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
   \   00000006   0x7828             LDRB     R0,[R5, #+0]
   \   00000008   0x2864             CMP      R0,#+100
   \   0000000A   0xD003             BEQ.N    ??OSTmrStart_0
    538                  *perr = OS_ERR_TMR_INVALID_TYPE;
   \   0000000C   0x2089             MOVS     R0,#+137
   \   0000000E   0x7020             STRB     R0,[R4, #+0]
    539                  return (OS_FALSE);
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xBD32             POP      {R1,R4,R5,PC}
    540              }
    541              if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
   \                     ??OSTmrStart_0: (+1)
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable19
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD003             BEQ.N    ??OSTmrStart_1
    542                  *perr  = OS_ERR_TMR_ISR;
   \   0000001E   0x208B             MOVS     R0,#+139
   \   00000020   0x7020             STRB     R0,[R4, #+0]
    543                  return (OS_FALSE);
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xBD32             POP      {R1,R4,R5,PC}
    544              }
    545              OSTmr_Lock();
   \                     ??OSTmrStart_1: (+1)
   \   00000026   0x.... 0x....      BL       OSTmr_Lock
    546              switch (ptmr->OSTmrState) {
   \   0000002A   0xF895 0x0031      LDRB     R0,[R5, #+49]
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD01B             BEQ.N    ??OSTmrStart_2
   \   00000032   0x2802             CMP      R0,#+2
   \   00000034   0xD00F             BEQ.N    ??OSTmrStart_3
   \   00000036   0xD30E             BCC.N    ??OSTmrStart_3
   \   00000038   0x2803             CMP      R0,#+3
   \   0000003A   0xD11C             BNE.N    ??OSTmrStart_4
    547                  case OS_TMR_STATE_RUNNING:                          /* Restart the timer                                      */
    548                       OSTmr_Unlink(ptmr);                            /* ... Stop the timer                                     */
   \   0000003C   0x4628             MOV      R0,R5
   \   0000003E   0x.... 0x....      BL       OSTmr_Unlink
    549                       OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x4628             MOV      R0,R5
   \   00000046   0x.... 0x....      BL       OSTmr_Link
    550                       OSTmr_Unlock();
   \   0000004A   0x.... 0x....      BL       OSTmr_Unlock
    551                       *perr = OS_ERR_NONE;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x7020             STRB     R0,[R4, #+0]
    552                       return (OS_TRUE);
   \   00000052   0x2001             MOVS     R0,#+1
   \   00000054   0xBD32             POP      {R1,R4,R5,PC}
    553          
    554                  case OS_TMR_STATE_STOPPED:                          /* Start the timer                                        */
    555                  case OS_TMR_STATE_COMPLETED:
    556                       OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
   \                     ??OSTmrStart_3: (+1)
   \   00000056   0x2100             MOVS     R1,#+0
   \   00000058   0x4628             MOV      R0,R5
   \   0000005A   0x.... 0x....      BL       OSTmr_Link
    557                       OSTmr_Unlock();
   \   0000005E   0x.... 0x....      BL       OSTmr_Unlock
    558                       *perr = OS_ERR_NONE;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x7020             STRB     R0,[R4, #+0]
    559                       return (OS_TRUE);
   \   00000066   0x2001             MOVS     R0,#+1
   \   00000068   0xBD32             POP      {R1,R4,R5,PC}
    560          
    561                  case OS_TMR_STATE_UNUSED:                           /* Timer not created                                      */
    562                       OSTmr_Unlock();
   \                     ??OSTmrStart_2: (+1)
   \   0000006A   0x.... 0x....      BL       OSTmr_Unlock
    563                       *perr = OS_ERR_TMR_INACTIVE;
   \   0000006E   0x2087             MOVS     R0,#+135
   \   00000070   0x7020             STRB     R0,[R4, #+0]
    564                       return (OS_FALSE);
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0xBD32             POP      {R1,R4,R5,PC}
    565          
    566                  default:
    567                       OSTmr_Unlock();
   \                     ??OSTmrStart_4: (+1)
   \   00000076   0x.... 0x....      BL       OSTmr_Unlock
    568                       *perr = OS_ERR_TMR_INVALID_STATE;
   \   0000007A   0x208D             MOVS     R0,#+141
   \   0000007C   0x7020             STRB     R0,[R4, #+0]
    569                       return (OS_FALSE);
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    570              }
    571          }
    572          #endif
    573          
    574          /*$PAGE*/
    575          /*
    576          ************************************************************************************************************************
    577          *                                                   STOP A TIMER
    578          *
    579          * Description: This function is called by your application code to stop a timer.
    580          *
    581          * Arguments  : ptmr          Is a pointer to the timer to stop.
    582          *
    583          *              opt           Allows you to specify an option to this functions which can be:
    584          *
    585          *                               OS_TMR_OPT_NONE          Do nothing special but stop the timer
    586          *                               OS_TMR_OPT_CALLBACK      Execute the callback function, pass it the callback argument
    587          *                                                        specified when the timer was created.
    588          *                               OS_TMR_OPT_CALLBACK_ARG  Execute the callback function, pass it the callback argument
    589          *                                                        specified in THIS function call
    590          *
    591          *              callback_arg  Is a pointer to a 'new' callback argument that can be passed to the callback function
    592          *                               instead of the timer's callback argument.  In other words, use 'callback_arg' passed in
    593          *                               THIS function INSTEAD of ptmr->OSTmrCallbackArg
    594          *
    595          *              perr          Is a pointer to an error code.  '*perr' will contain one of the following:
    596          *                               OS_ERR_NONE
    597          *                               OS_ERR_TMR_INVALID         'ptmr' is a NULL pointer
    598          *                               OS_ERR_TMR_INVALID_TYPE    'ptmr'  is not pointing to an OS_TMR
    599          *                               OS_ERR_TMR_ISR             if the function was called from an ISR
    600          *                               OS_ERR_TMR_INACTIVE        if the timer was not created
    601          *                               OS_ERR_TMR_INVALID_OPT     if you specified an invalid option for 'opt'
    602          *                               OS_ERR_TMR_STOPPED         if the timer was already stopped
    603          *                               OS_ERR_TMR_INVALID_STATE   the timer is in an invalid state
    604          *                               OS_ERR_TMR_NO_CALLBACK     if the timer does not have a callback function defined
    605          *
    606          * Returns    : OS_TRUE       If we stopped the timer (if the timer is already stopped, we also return OS_TRUE)
    607          *              OS_FALSE      If not
    608          ************************************************************************************************************************
    609          */
    610          
    611          #if OS_TMR_EN > 0

   \                                 In section .text, align 2, keep-with-next
    612          BOOLEAN  OSTmrStop (OS_TMR  *ptmr,
    613                              INT8U    opt,
    614                              void    *callback_arg,
    615                              INT8U   *perr)
    616          {
   \                     OSTmrStop: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4605             MOV      R5,R0
   \   00000004   0x460F             MOV      R7,R1
   \   00000006   0x4616             MOV      R6,R2
   \   00000008   0x461C             MOV      R4,R3
    617              OS_TMR_CALLBACK  pfnct;
    618          
    619          
    620          #if OS_ARG_CHK_EN > 0
    621              if (perr == (INT8U *)0) {                                     /* Validate arguments                               */
    622                  return (OS_FALSE);
    623              }
    624              if (ptmr == (OS_TMR *)0) {
    625                  *perr = OS_ERR_TMR_INVALID;
    626                  return (OS_FALSE);
    627              }
    628          #endif
    629              if (ptmr->OSTmrType != OS_TMR_TYPE) {                         /* Validate timer structure                         */
   \   0000000A   0x7828             LDRB     R0,[R5, #+0]
   \   0000000C   0x2864             CMP      R0,#+100
   \   0000000E   0xD003             BEQ.N    ??OSTmrStop_0
    630                  *perr = OS_ERR_TMR_INVALID_TYPE;
   \   00000010   0x2089             MOVS     R0,#+137
   \   00000012   0x7020             STRB     R0,[R4, #+0]
    631                  return (OS_FALSE);
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xBDF2             POP      {R1,R4-R7,PC}
    632              }
    633              if (OSIntNesting > 0) {                                       /* See if trying to call from an ISR                */
   \                     ??OSTmrStop_0: (+1)
   \   00000018   0x....             LDR.N    R0,??DataTable19
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD003             BEQ.N    ??OSTmrStop_1
    634                  *perr  = OS_ERR_TMR_ISR;
   \   00000020   0x208B             MOVS     R0,#+139
   \   00000022   0x7020             STRB     R0,[R4, #+0]
    635                  return (OS_FALSE);
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xBDF2             POP      {R1,R4-R7,PC}
    636              }
    637              OSTmr_Lock();
   \                     ??OSTmrStop_1: (+1)
   \   00000028   0x.... 0x....      BL       OSTmr_Lock
    638              switch (ptmr->OSTmrState) {
   \   0000002C   0xF895 0x0031      LDRB     R0,[R5, #+49]
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD030             BEQ.N    ??OSTmrStop_2
   \   00000034   0x2802             CMP      R0,#+2
   \   00000036   0xD028             BEQ.N    ??OSTmrStop_3
   \   00000038   0xD327             BCC.N    ??OSTmrStop_3
   \   0000003A   0x2803             CMP      R0,#+3
   \   0000003C   0xD131             BNE.N    ??OSTmrStop_4
    639                  case OS_TMR_STATE_RUNNING:
    640                       OSTmr_Unlink(ptmr);                                  /* Remove from current wheel spoke                  */
   \   0000003E   0x4628             MOV      R0,R5
   \   00000040   0x.... 0x....      BL       OSTmr_Unlink
    641                       *perr = OS_ERR_NONE;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x7020             STRB     R0,[R4, #+0]
    642                       switch (opt) {
   \   00000048   0x2F00             CMP      R7,#+0
   \   0000004A   0xD01A             BEQ.N    ??OSTmrStop_5
   \   0000004C   0x2F03             CMP      R7,#+3
   \   0000004E   0xD002             BEQ.N    ??OSTmrStop_6
   \   00000050   0x2F04             CMP      R7,#+4
   \   00000052   0xD00A             BEQ.N    ??OSTmrStop_7
   \   00000054   0xE013             B.N      ??OSTmrStop_8
    643                           case OS_TMR_OPT_CALLBACK:
    644                                pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
   \                     ??OSTmrStop_6: (+1)
   \   00000056   0x686A             LDR      R2,[R5, #+4]
    645                                if (pfnct != (OS_TMR_CALLBACK)0) {
   \   00000058   0x0010             MOVS     R0,R2
   \   0000005A   0xD003             BEQ.N    ??OSTmrStop_9
    646                                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
   \   0000005C   0x68A9             LDR      R1,[R5, #+8]
   \   0000005E   0x4628             MOV      R0,R5
   \   00000060   0x4790             BLX      R2
   \   00000062   0xE00E             B.N      ??OSTmrStop_5
    647                                } else {
    648                                    *perr = OS_ERR_TMR_NO_CALLBACK;
   \                     ??OSTmrStop_9: (+1)
   \   00000064   0x208F             MOVS     R0,#+143
   \   00000066   0x7020             STRB     R0,[R4, #+0]
   \   00000068   0xE00B             B.N      ??OSTmrStop_5
    649                                }
    650                                break;
    651          
    652                           case OS_TMR_OPT_CALLBACK_ARG:
    653                                pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
   \                     ??OSTmrStop_7: (+1)
   \   0000006A   0x686A             LDR      R2,[R5, #+4]
    654                                if (pfnct != (OS_TMR_CALLBACK)0) {
   \   0000006C   0x0010             MOVS     R0,R2
   \   0000006E   0xD003             BEQ.N    ??OSTmrStop_10
    655                                    (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
   \   00000070   0x4631             MOV      R1,R6
   \   00000072   0x4628             MOV      R0,R5
   \   00000074   0x4790             BLX      R2
   \   00000076   0xE004             B.N      ??OSTmrStop_5
    656                                } else {
    657                                    *perr = OS_ERR_TMR_NO_CALLBACK;
   \                     ??OSTmrStop_10: (+1)
   \   00000078   0x208F             MOVS     R0,#+143
   \   0000007A   0x7020             STRB     R0,[R4, #+0]
   \   0000007C   0xE001             B.N      ??OSTmrStop_5
    658                                }
    659                                break;
    660          
    661                           case OS_TMR_OPT_NONE:
    662                                break;
    663          
    664                           default:
    665                               *perr = OS_ERR_TMR_INVALID_OPT;
   \                     ??OSTmrStop_8: (+1)
   \   0000007E   0x2084             MOVS     R0,#+132
   \   00000080   0x7020             STRB     R0,[R4, #+0]
    666                               break;
    667                       }
    668                       OSTmr_Unlock();
   \                     ??OSTmrStop_5: (+1)
   \   00000082   0x.... 0x....      BL       OSTmr_Unlock
    669                       return (OS_TRUE);
   \   00000086   0x2001             MOVS     R0,#+1
   \   00000088   0xBDF2             POP      {R1,R4-R7,PC}
    670          
    671                  case OS_TMR_STATE_COMPLETED:                              /* Timer has already completed the ONE-SHOT or ...  */
    672                  case OS_TMR_STATE_STOPPED:                                /* ... timer has not started yet.                   */
    673                       OSTmr_Unlock();
   \                     ??OSTmrStop_3: (+1)
   \   0000008A   0x.... 0x....      BL       OSTmr_Unlock
    674                       *perr = OS_ERR_TMR_STOPPED;
   \   0000008E   0x208E             MOVS     R0,#+142
   \   00000090   0x7020             STRB     R0,[R4, #+0]
    675                       return (OS_TRUE);
   \   00000092   0x2001             MOVS     R0,#+1
   \   00000094   0xBDF2             POP      {R1,R4-R7,PC}
    676          
    677                  case OS_TMR_STATE_UNUSED:                                 /* Timer was not created                            */
    678                       OSTmr_Unlock();
   \                     ??OSTmrStop_2: (+1)
   \   00000096   0x.... 0x....      BL       OSTmr_Unlock
    679                       *perr = OS_ERR_TMR_INACTIVE;
   \   0000009A   0x2087             MOVS     R0,#+135
   \   0000009C   0x7020             STRB     R0,[R4, #+0]
    680                       return (OS_FALSE);
   \   0000009E   0x2000             MOVS     R0,#+0
   \   000000A0   0xBDF2             POP      {R1,R4-R7,PC}
    681          
    682                  default:
    683                       OSTmr_Unlock();
   \                     ??OSTmrStop_4: (+1)
   \   000000A2   0x.... 0x....      BL       OSTmr_Unlock
    684                       *perr = OS_ERR_TMR_INVALID_STATE;
   \   000000A6   0x208D             MOVS     R0,#+141
   \   000000A8   0x7020             STRB     R0,[R4, #+0]
    685                       return (OS_FALSE);
   \   000000AA   0x2000             MOVS     R0,#+0
   \   000000AC   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    686              }
    687          }
    688          #endif
    689          
    690          /*$PAGE*/
    691          /*
    692          ************************************************************************************************************************
    693          *                                      SIGNAL THAT IT'S TIME TO UPDATE THE TIMERS
    694          *
    695          * Description: This function is typically called by the ISR that occurs at the timer tick rate and is used to signal to
    696          *              OSTmr_Task() that it's time to update the timers.
    697          *
    698          * Arguments  : none
    699          *
    700          * Returns    : OS_ERR_NONE         The call was successful and the timer task was signaled.
    701          *              OS_ERR_SEM_OVF      If OSTmrSignal() was called more often than OSTmr_Task() can handle the timers.  
    702          *                                  This would indicate that your system is heavily loaded.
    703          *              OS_ERR_EVENT_TYPE   Unlikely you would get this error because the semaphore used for signaling is created 
    704          *                                  by uC/OS-II.
    705          *              OS_ERR_PEVENT_NULL  Again, unlikely you would ever get this error because the semaphore used for signaling 
    706          *                                  is created by uC/OS-II.
    707          ************************************************************************************************************************
    708          */
    709          
    710          #if OS_TMR_EN > 0

   \                                 In section .text, align 2, keep-with-next
    711          INT8U  OSTmrSignal (void)
    712          {
    713              INT8U  err;
    714          
    715          
    716              err = OSSemPost(OSTmrSemSignal);
    717              return (err);
   \                     OSTmrSignal: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable19_2
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x.... 0x....      B.W      OSSemPost
    718          }
    719          #endif
    720          
    721          /*$PAGE*/
    722          /*
    723          ************************************************************************************************************************
    724          *                                               ALLOCATE AND FREE A TIMER
    725          *
    726          * Description: This function is called to allocate a timer.
    727          *
    728          * Arguments  : none
    729          *
    730          * Returns    : a pointer to a timer if one is available
    731          ************************************************************************************************************************
    732          */
    733          
    734          #if OS_TMR_EN > 0

   \                                 In section .text, align 2, keep-with-next
    735          static  OS_TMR  *OSTmr_Alloc (void)
    736          {
    737              OS_TMR *ptmr;
    738          
    739          
    740              if (OSTmrFreeList == (OS_TMR *)0) {
   \                     OSTmr_Alloc: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable19_3
   \   00000002   0x6808             LDR      R0,[R1, #+0]
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD101             BNE.N    ??OSTmr_Alloc_0
    741                  return ((OS_TMR *)0);
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x4770             BX       LR
    742              }
    743              ptmr            = (OS_TMR *)OSTmrFreeList;
    744              OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
   \                     ??OSTmr_Alloc_0: (+1)
   \   0000000C   0x68C2             LDR      R2,[R0, #+12]
   \   0000000E   0x600A             STR      R2,[R1, #+0]
    745              ptmr->OSTmrNext = (OS_TCB *)0;
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x60C1             STR      R1,[R0, #+12]
    746              ptmr->OSTmrPrev = (OS_TCB *)0;
   \   00000014   0x6101             STR      R1,[R0, #+16]
    747              OSTmrUsed++;
   \   00000016   0x....             LDR.N    R1,??DataTable19_4
   \   00000018   0x880A             LDRH     R2,[R1, #+0]
   \   0000001A   0x1C52             ADDS     R2,R2,#+1
   \   0000001C   0x800A             STRH     R2,[R1, #+0]
    748              OSTmrFree--;
   \   0000001E   0x....             LDR.N    R1,??DataTable19_5
   \   00000020   0x880A             LDRH     R2,[R1, #+0]
   \   00000022   0x1E52             SUBS     R2,R2,#+1
   \   00000024   0x800A             STRH     R2,[R1, #+0]
    749              return (ptmr);
   \   00000026   0x4770             BX       LR               ;; return
    750          }
    751          #endif
    752          
    753          
    754          /*
    755          ************************************************************************************************************************
    756          *                                             RETURN A TIMER TO THE FREE LIST
    757          *
    758          * Description: This function is called to return a timer object to the free list of timers.
    759          *
    760          * Arguments  : ptmr     is a pointer to the timer to free
    761          *
    762          * Returns    : none
    763          ************************************************************************************************************************
    764          */
    765          
    766          #if OS_TMR_EN > 0

   \                                 In section .text, align 2, keep-with-next
    767          static  void  OSTmr_Free (OS_TMR *ptmr)
    768          {
    769              ptmr->OSTmrState       = OS_TMR_STATE_UNUSED;      /* Clear timer object fields                                   */
   \                     OSTmr_Free: (+1)
   \   00000000   0xF100 0x0121      ADD      R1,R0,#+33
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0x740A             STRB     R2,[R1, #+16]
    770              ptmr->OSTmrOpt         = OS_TMR_OPT_NONE;
   \   00000008   0x73CA             STRB     R2,[R1, #+15]
    771              ptmr->OSTmrPeriod      = 0;
   \   0000000A   0x61C2             STR      R2,[R0, #+28]
    772              ptmr->OSTmrMatch       = 0;
   \   0000000C   0x6142             STR      R2,[R0, #+20]
    773              ptmr->OSTmrCallback    = (OS_TMR_CALLBACK)0;
   \   0000000E   0x6042             STR      R2,[R0, #+4]
    774              ptmr->OSTmrCallbackArg = (void *)0;
   \   00000010   0x6082             STR      R2,[R0, #+8]
    775          #if OS_TMR_CFG_NAME_SIZE > 1
    776              ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
   \   00000012   0x223F             MOVS     R2,#+63
   \   00000014   0xF880 0x2020      STRB     R2,[R0, #+32]
    777              ptmr->OSTmrName[1]     = OS_ASCII_NUL;
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x700A             STRB     R2,[R1, #+0]
    778          #endif
    779          
    780              ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
   \   0000001C   0x4611             MOV      R1,R2
   \   0000001E   0x6101             STR      R1,[R0, #+16]
    781              ptmr->OSTmrNext        = OSTmrFreeList;
   \   00000020   0x....             LDR.N    R1,??DataTable19_3
   \   00000022   0x680A             LDR      R2,[R1, #+0]
   \   00000024   0x60C2             STR      R2,[R0, #+12]
    782              OSTmrFreeList          = ptmr;
   \   00000026   0x6008             STR      R0,[R1, #+0]
    783          
    784              OSTmrUsed--;                                       /* Update timer object statistics                              */
   \   00000028   0x....             LDR.N    R0,??DataTable19_4
   \   0000002A   0x8801             LDRH     R1,[R0, #+0]
   \   0000002C   0x1E49             SUBS     R1,R1,#+1
   \   0000002E   0x8001             STRH     R1,[R0, #+0]
    785              OSTmrFree++;
   \   00000030   0x....             LDR.N    R0,??DataTable19_5
   \   00000032   0x8801             LDRH     R1,[R0, #+0]
   \   00000034   0x1C49             ADDS     R1,R1,#+1
   \   00000036   0x8001             STRH     R1,[R0, #+0]
    786          }
   \   00000038   0x4770             BX       LR               ;; return
    787          #endif
    788          
    789          /*$PAGE*/
    790          /*
    791          ************************************************************************************************************************
    792          *                                                    INITIALIZATION
    793          *                                          INITIALIZE THE FREE LIST OF TIMERS
    794          *
    795          * Description: This function is called by OSInit() to initialize the free list of OS_TMRs.
    796          *
    797          * Arguments  : none
    798          *
    799          * Returns    : none
    800          ************************************************************************************************************************
    801          */
    802          
    803          #if OS_TMR_EN > 0

   \                                 In section .text, align 2, keep-with-next
    804          void  OSTmr_Init (void)
    805          {
   \                     OSTmr_Init: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    806          #if OS_EVENT_NAME_SIZE > 10
    807              INT8U    err;
    808          #endif
    809              INT16U   i;
    810              OS_TMR  *ptmr1;
    811              OS_TMR  *ptmr2;
    812          
    813          
    814              OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
   \   00000002   0x....             LDR.N    R4,??DataTable19_6
   \   00000004   0xF44F 0x7150      MOV      R1,#+832
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0x.... 0x....      BL       OS_MemClr
    815              OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
   \   0000000E   0x2140             MOVS     R1,#+64
   \   00000010   0x....             LDR.N    R0,??DataTable19_7
   \   00000012   0x.... 0x....      BL       OS_MemClr
    816          
    817              ptmr1 = &OSTmrTbl[0];
   \   00000016   0x4620             MOV      R0,R4
    818              ptmr2 = &OSTmrTbl[1];
   \   00000018   0xF104 0x0134      ADD      R1,R4,#+52
    819              for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
   \   0000001C   0x2200             MOVS     R2,#+0
   \   0000001E   0xE00C             B.N      ??OSTmr_Init_0
    820                  ptmr1->OSTmrType    = OS_TMR_TYPE;
   \                     ??OSTmr_Init_1: (+1)
   \   00000020   0x2564             MOVS     R5,#+100
   \   00000022   0x7005             STRB     R5,[R0, #+0]
    821                  ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
   \   00000024   0x2500             MOVS     R5,#+0
   \   00000026   0x741D             STRB     R5,[R3, #+16]
    822                  ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
   \   00000028   0x60C1             STR      R1,[R0, #+12]
    823          #if OS_TMR_CFG_NAME_SIZE > 1
    824                  ptmr1->OSTmrName[0] = '?';                                      /* Unknown name                               */
   \   0000002A   0x253F             MOVS     R5,#+63
   \   0000002C   0xF880 0x5020      STRB     R5,[R0, #+32]
    825                  ptmr1->OSTmrName[1] = OS_ASCII_NUL;
   \   00000030   0x2500             MOVS     R5,#+0
   \   00000032   0x701D             STRB     R5,[R3, #+0]
    826          #endif
    827                  ptmr1++;
   \   00000034   0x3034             ADDS     R0,R0,#+52
    828                  ptmr2++;
   \   00000036   0x3134             ADDS     R1,R1,#+52
    829              }
   \   00000038   0x1C52             ADDS     R2,R2,#+1
   \                     ??OSTmr_Init_0: (+1)
   \   0000003A   0xF100 0x0321      ADD      R3,R0,#+33
   \   0000003E   0x2A0F             CMP      R2,#+15
   \   00000040   0xDBEE             BLT.N    ??OSTmr_Init_1
    830              ptmr1->OSTmrType    = OS_TMR_TYPE;
   \   00000042   0x2164             MOVS     R1,#+100
   \   00000044   0x7001             STRB     R1,[R0, #+0]
    831              ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
   \   00000046   0x2100             MOVS     R1,#+0
   \   00000048   0x7419             STRB     R1,[R3, #+16]
    832              ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
   \   0000004A   0x60C1             STR      R1,[R0, #+12]
    833          #if OS_TMR_CFG_NAME_SIZE > 1
    834              ptmr1->OSTmrName[0] = '?';                                          /* Unknown name                               */
   \   0000004C   0x213F             MOVS     R1,#+63
   \   0000004E   0xF880 0x1020      STRB     R1,[R0, #+32]
    835              ptmr1->OSTmrName[1] = OS_ASCII_NUL;
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x7018             STRB     R0,[R3, #+0]
    836          #endif
    837              OSTmrTime           = 0;
   \   00000056   0x....             LDR.N    R1,??DataTable19_1
   \   00000058   0x6008             STR      R0,[R1, #+0]
    838              OSTmrUsed           = 0;
   \   0000005A   0x....             LDR.N    R1,??DataTable19_4
   \   0000005C   0x8008             STRH     R0,[R1, #+0]
    839              OSTmrFree           = OS_TMR_CFG_MAX;
   \   0000005E   0x2010             MOVS     R0,#+16
   \   00000060   0x....             LDR.N    R1,??DataTable19_5
   \   00000062   0x8008             STRH     R0,[R1, #+0]
    840              OSTmrFreeList       = &OSTmrTbl[0];
   \   00000064   0x....             LDR.N    R0,??DataTable19_3
   \   00000066   0x6004             STR      R4,[R0, #+0]
    841              OSTmrSem            = OSSemCreate(1);
   \   00000068   0x....             LDR.N    R4,??DataTable19_8
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0x.... 0x....      BL       OSSemCreate
   \   00000070   0x6020             STR      R0,[R4, #+0]
    842              OSTmrSemSignal      = OSSemCreate(0);
   \   00000072   0x....             LDR.N    R5,??DataTable19_2
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x.... 0x....      BL       OSSemCreate
   \   0000007A   0x6028             STR      R0,[R5, #+0]
    843          
    844          #if OS_EVENT_NAME_SIZE > 18
    845              OSEventNameSet(OSTmrSem,       (INT8U *)"uC/OS-II TmrLock",   &err);/* Assign names to semaphores                 */
    846          #else
    847          #if OS_EVENT_NAME_SIZE > 10
    848              OSEventNameSet(OSTmrSem,       (INT8U *)"OS-TmrLock",         &err);
   \   0000007C   0xAA00             ADD      R2,SP,#+0
   \   0000007E   0x.... 0x....      ADR.W    R1,?_0
   \   00000082   0x6820             LDR      R0,[R4, #+0]
   \   00000084   0x.... 0x....      BL       OSEventNameSet
    849          #endif
    850          #endif
    851          
    852          #if OS_EVENT_NAME_SIZE > 18
    853              OSEventNameSet(OSTmrSemSignal, (INT8U *)"uC/OS-II TmrSignal", &err);
    854          #else
    855          #if OS_EVENT_NAME_SIZE > 10
    856              OSEventNameSet(OSTmrSemSignal, (INT8U *)"OS-TmrSig",          &err);
   \   00000088   0xAA00             ADD      R2,SP,#+0
   \   0000008A   0x.... 0x....      ADR.W    R1,?_1
   \   0000008E   0x6828             LDR      R0,[R5, #+0]
   \   00000090   0x.... 0x....      BL       OSEventNameSet
    857          #endif
    858          #endif
    859          
    860              OSTmr_InitTask();
   \   00000094   0x.... 0x....      BL       OSTmr_InitTask
    861          }
   \   00000098   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    862          #endif
    863          
    864          /*$PAGE*/
    865          /*
    866          ************************************************************************************************************************
    867          *                                          INITIALIZE THE TIMER MANAGEMENT TASK
    868          *
    869          * Description: This function is called by OSTmrInit() to create the timer management task.
    870          *
    871          * Arguments  : none
    872          *
    873          * Returns    : none
    874          ************************************************************************************************************************
    875          */
    876          
    877          #if OS_TMR_EN > 0

   \                                 In section .text, align 2, keep-with-next
    878          static  void  OSTmr_InitTask (void)
    879          {
   \                     OSTmr_InitTask: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    880          #if OS_TASK_NAME_SIZE > 6
    881              INT8U  err;
    882          #endif
    883          
    884          
    885          #if OS_TASK_CREATE_EXT_EN > 0
    886              #if OS_STK_GROWTH == 1
    887              (void)OSTaskCreateExt(OSTmr_Task,
    888                                    (void *)0,                                       /* No arguments passed to OSTmrTask()      */
    889                                    &OSTmrTaskStk[OS_TASK_TMR_STK_SIZE - 1],         /* Set Top-Of-Stack                        */
    890                                    OS_TASK_TMR_PRIO,
    891                                    OS_TASK_TMR_ID,
    892                                    &OSTmrTaskStk[0],                                /* Set Bottom-Of-Stack                     */
    893                                    OS_TASK_TMR_STK_SIZE,
    894                                    (void *)0,                                       /* No TCB extension                        */
    895                                    OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);      /* Enable stack checking + clear stack     */
   \   00000004   0x....             LDR.N    R0,??DataTable19_9
   \   00000006   0x2103             MOVS     R1,#+3
   \   00000008   0x9104             STR      R1,[SP, #+16]
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x9103             STR      R1,[SP, #+12]
   \   0000000E   0x2180             MOVS     R1,#+128
   \   00000010   0x9102             STR      R1,[SP, #+8]
   \   00000012   0x9001             STR      R0,[SP, #+4]
   \   00000014   0xF64F 0x71FD      MOVW     R1,#+65533
   \   00000018   0x9100             STR      R1,[SP, #+0]
   \   0000001A   0x231D             MOVS     R3,#+29
   \   0000001C   0xF500 0x72FE      ADD      R2,R0,#+508
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x.... 0x....      ADR.W    R0,OSTmr_Task
   \   00000026   0x.... 0x....      BL       OSTaskCreateExt
    896              #else
    897              (void)OSTaskCreateExt(OSTmr_Task,
    898                                    (void *)0,                                       /* No arguments passed to OSTmrTask()      */
    899                                    &OSTmrTaskStk[0],                                /* Set Top-Of-Stack                        */
    900                                    OS_TASK_TMR_PRIO,
    901                                    OS_TASK_TMR_ID,
    902                                    &OSTmrTaskStk[OS_TASK_TMR_STK_SIZE - 1],         /* Set Bottom-Of-Stack                     */
    903                                    OS_TASK_TMR_STK_SIZE,
    904                                    (void *)0,                                       /* No TCB extension                        */
    905                                    OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);      /* Enable stack checking + clear stack     */
    906              #endif
    907          #else
    908              #if OS_STK_GROWTH == 1
    909              (void)OSTaskCreate(OSTmr_Task,
    910                                 (void *)0,
    911                                 &OSTmrTaskStk[OS_TASK_TMR_STK_SIZE - 1],
    912                                 OS_TASK_TMR_PRIO);
    913              #else
    914              (void)OSTaskCreate(OSTmr_Task,
    915                                 (void *)0,
    916                                 &OSTmrTaskStk[0],
    917                                 OS_TASK_TMR_PRIO);
    918              #endif
    919          #endif
    920          
    921          #if OS_TASK_NAME_SIZE > 12
    922              OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"uC/OS-II Tmr", &err);
   \   0000002A   0xAA05             ADD      R2,SP,#+20
   \   0000002C   0x.... 0x....      ADR.W    R1,?_2
   \   00000030   0x201D             MOVS     R0,#+29
   \   00000032   0x.... 0x....      BL       OSTaskNameSet
    923          #else
    924          #if OS_TASK_NAME_SIZE > 6
    925              OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"OS-Tmr", &err);
    926          #endif
    927          #endif
    928          }
   \   00000036   0xB007             ADD      SP,SP,#+28
   \   00000038   0xBD00             POP      {PC}             ;; return
    929          #endif
    930          
    931          /*$PAGE*/
    932          /*
    933          ************************************************************************************************************************
    934          *                                         INSERT A TIMER INTO THE TIMER WHEEL
    935          *
    936          * Description: This function is called to insert the timer into the timer wheel.  The timer is always inserted at the
    937          *              beginning of the list.
    938          *
    939          * Arguments  : ptmr          Is a pointer to the timer to insert.
    940          *
    941          *              type          Is either:
    942          *                               OS_TMR_LINK_PERIODIC    Means to re-insert the timer after a period expired
    943          *                               OS_TMR_LINK_DLY         Means to insert    the timer the first time
    944          *
    945          * Returns    : none
    946          ************************************************************************************************************************
    947          */
    948          
    949          #if OS_TMR_EN > 0

   \                                 In section .text, align 2, keep-with-next
    950          static  void  OSTmr_Link (OS_TMR *ptmr, INT8U type)
    951          {
    952              OS_TMR       *ptmr1;
    953              OS_TMR_WHEEL *pspoke;
    954              INT16U        spoke;
    955          
    956          
    957              ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
   \                     OSTmr_Link: (+1)
   \   00000000   0x2203             MOVS     R2,#+3
   \   00000002   0xF880 0x2031      STRB     R2,[R0, #+49]
    958              if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
   \   00000006   0x2901             CMP      R1,#+1
   \   00000008   0xD002             BEQ.N    ??OSTmr_Link_0
    959                  ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
    960              } else {
    961                  if (ptmr->OSTmrDly == 0) {
   \   0000000A   0x6981             LDR      R1,[R0, #+24]
   \   0000000C   0x2900             CMP      R1,#+0
   \   0000000E   0xD105             BNE.N    ??OSTmr_Link_1
    962                      ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
   \                     ??OSTmr_Link_0: (+1)
   \   00000010   0x69C1             LDR      R1,[R0, #+28]
   \   00000012   0x....             LDR.N    R2,??DataTable19_1
   \   00000014   0x6812             LDR      R2,[R2, #+0]
   \   00000016   0x1851             ADDS     R1,R2,R1
   \   00000018   0x6141             STR      R1,[R0, #+20]
   \   0000001A   0xE003             B.N      ??OSTmr_Link_2
    963                  } else {
    964                      ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
   \                     ??OSTmr_Link_1: (+1)
   \   0000001C   0x....             LDR.N    R2,??DataTable19_1
   \   0000001E   0x6812             LDR      R2,[R2, #+0]
   \   00000020   0x1851             ADDS     R1,R2,R1
   \   00000022   0x6141             STR      R1,[R0, #+20]
    965                  }
    966              }
    967              spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
    968              pspoke = &OSTmrWheelTbl[spoke];
   \                     ??OSTmr_Link_2: (+1)
   \   00000024   0x....             LDR.N    R1,??DataTable19_7
   \   00000026   0x7D02             LDRB     R2,[R0, #+20]
   \   00000028   0xF002 0x0207      AND      R2,R2,#0x7
   \   0000002C   0xEB01 0x01C2      ADD      R1,R1,R2, LSL #+3
    969          
    970              if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
   \   00000030   0x680A             LDR      R2,[R1, #+0]
   \   00000032   0x2A00             CMP      R2,#+0
   \   00000034   0x6008             STR      R0,[R1, #+0]
   \   00000036   0xD104             BNE.N    ??OSTmr_Link_3
    971                  pspoke->OSTmrFirst   = ptmr;
    972                  ptmr->OSTmrNext      = (OS_TMR *)0;
   \   00000038   0x2200             MOVS     R2,#+0
   \   0000003A   0x60C2             STR      R2,[R0, #+12]
    973                  pspoke->OSTmrEntries = 1;
   \   0000003C   0x2201             MOVS     R2,#+1
   \   0000003E   0x808A             STRH     R2,[R1, #+4]
   \   00000040   0xE004             B.N      ??OSTmr_Link_4
    974              } else {
    975                  ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
    976                  pspoke->OSTmrFirst   = ptmr;
    977                  ptmr->OSTmrNext      = (void *)ptmr1;
   \                     ??OSTmr_Link_3: (+1)
   \   00000042   0x60C2             STR      R2,[R0, #+12]
    978                  ptmr1->OSTmrPrev     = (void *)ptmr;
   \   00000044   0x6110             STR      R0,[R2, #+16]
    979                  pspoke->OSTmrEntries++;
   \   00000046   0x888A             LDRH     R2,[R1, #+4]
   \   00000048   0x1C52             ADDS     R2,R2,#+1
   \   0000004A   0x808A             STRH     R2,[R1, #+4]
    980              }
    981              ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
   \                     ??OSTmr_Link_4: (+1)
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0x6101             STR      R1,[R0, #+16]
    982          }
   \   00000050   0x4770             BX       LR               ;; return
    983          #endif
    984          
    985          /*$PAGE*/
    986          /*
    987          ************************************************************************************************************************
    988          *                                         REMOVE A TIMER FROM THE TIMER WHEEL
    989          *
    990          * Description: This function is called to remove the timer from the timer wheel.
    991          *
    992          * Arguments  : ptmr          Is a pointer to the timer to remove.
    993          *
    994          * Returns    : none
    995          ************************************************************************************************************************
    996          */
    997          
    998          #if OS_TMR_EN > 0

   \                                 In section .text, align 2, keep-with-next
    999          static  void  OSTmr_Unlink (OS_TMR *ptmr)
   1000          {
   \                     OSTmr_Unlink: (+1)
   \   00000000   0xB410             PUSH     {R4}
   1001              OS_TMR        *ptmr1;
   1002              OS_TMR        *ptmr2;
   1003              OS_TMR_WHEEL  *pspoke;
   1004              INT16U         spoke;
   1005          
   1006          
   1007              spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
   1008              pspoke = &OSTmrWheelTbl[spoke];
   \   00000002   0xF100 0x010C      ADD      R1,R0,#+12
   \   00000006   0x....             LDR.N    R2,??DataTable19_7
   \   00000008   0x7A0B             LDRB     R3,[R1, #+8]
   \   0000000A   0xF003 0x0307      AND      R3,R3,#0x7
   \   0000000E   0xEB02 0x02C3      ADD      R2,R2,R3, LSL #+3
   1009          
   1010              if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
   \   00000012   0x680B             LDR      R3,[R1, #+0]
   \   00000014   0x6814             LDR      R4,[R2, #+0]
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD105             BNE.N    ??OSTmr_Unlink_0
   1011                  ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
   \   0000001A   0x001C             MOVS     R4,R3
   1012                  pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
   \   0000001C   0x6014             STR      R4,[R2, #+0]
   1013                  if (ptmr1 != (OS_TMR *)0) {
   \   0000001E   0xD007             BEQ.N    ??OSTmr_Unlink_1
   1014                      ptmr1->OSTmrPrev = (void *)0;
   \   00000020   0x2300             MOVS     R3,#+0
   \   00000022   0x6123             STR      R3,[R4, #+16]
   \   00000024   0xE004             B.N      ??OSTmr_Unlink_1
   1015                  }
   1016              } else {
   1017                  ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
   \                     ??OSTmr_Unlink_0: (+1)
   \   00000026   0x684C             LDR      R4,[R1, #+4]
   1018                  ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
   1019                  ptmr1->OSTmrNext = ptmr2;
   \   00000028   0x60E3             STR      R3,[R4, #+12]
   1020                  if (ptmr2 != (OS_TMR *)0) {
   \   0000002A   0x2B00             CMP      R3,#+0
   \   0000002C   0xD000             BEQ.N    ??OSTmr_Unlink_1
   1021                      ptmr2->OSTmrPrev = (void *)ptmr1;
   \   0000002E   0x611C             STR      R4,[R3, #+16]
   1022                  }
   1023              }
   1024              ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
   \                     ??OSTmr_Unlink_1: (+1)
   \   00000030   0x2301             MOVS     R3,#+1
   \   00000032   0xF880 0x3031      STRB     R3,[R0, #+49]
   1025              ptmr->OSTmrNext  = (void *)0;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x6008             STR      R0,[R1, #+0]
   1026              ptmr->OSTmrPrev  = (void *)0;
   \   0000003A   0x6048             STR      R0,[R1, #+4]
   1027              pspoke->OSTmrEntries--;
   \   0000003C   0x8890             LDRH     R0,[R2, #+4]
   \   0000003E   0x1E40             SUBS     R0,R0,#+1
   \   00000040   0x8090             STRH     R0,[R2, #+4]
   1028          }
   \   00000042   0xBC10             POP      {R4}
   \   00000044   0x4770             BX       LR               ;; return
   1029          #endif
   1030          
   1031          /*$PAGE*/
   1032          /*
   1033          ************************************************************************************************************************
   1034          *                                       TIMER MANAGER DATA STRUCTURE LOCKING MECHANISM
   1035          *
   1036          * Description: These functions are used to gain exclusive access to timer management data structures.
   1037          *
   1038          * Arguments  : none
   1039          *
   1040          * Returns    : none
   1041          ************************************************************************************************************************
   1042          */
   1043          
   1044          #if OS_TMR_EN > 0

   \                                 In section .text, align 2, keep-with-next
   1045          static  void  OSTmr_Lock (void)
   1046          {
   \                     OSTmr_Lock: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1047              INT8U  err;
   1048          
   1049          
   1050              OSSemPend(OSTmrSem, 0, &err);
   \   00000002   0xAA00             ADD      R2,SP,#+0
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x....             LDR.N    R0,??DataTable19_8
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x.... 0x....      BL       OSSemPend
   1051              (void)err;
   1052          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
   1053          #endif
   1054          
   1055          
   1056          
   1057          #if OS_TMR_EN > 0

   \                                 In section .text, align 2, keep-with-next
   1058          static  void  OSTmr_Unlock (void)
   1059          {
   1060              (void)OSSemPost(OSTmrSem);
   \                     OSTmr_Unlock: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable19_8
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x.... 0x....      B.W      OSSemPost
   1061          }
   1062          #endif
   1063          
   1064          /*$PAGE*/
   1065          /*
   1066          ************************************************************************************************************************
   1067          *                                                 TIMER MANAGEMENT TASK
   1068          *
   1069          * Description: This task is created by OSTmrInit().
   1070          *
   1071          * Arguments  : none
   1072          *
   1073          * Returns    : none
   1074          ************************************************************************************************************************
   1075          */
   1076          
   1077          #if OS_TMR_EN > 0

   \                                 In section .text, align 4, keep-with-next
   1078          static  void  OSTmr_Task (void *p_arg)
   1079          {
   \                     OSTmr_Task: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   1080              INT8U            err;
   1081              OS_TMR          *ptmr;
   1082              OS_TMR          *ptmr_next;
   1083              OS_TMR_CALLBACK  pfnct;
   1084              OS_TMR_WHEEL    *pspoke;
   1085              INT16U           spoke;
   1086          
   1087          
   1088              (void)p_arg;                                                 /* Not using 'p_arg', prevent compiler warning       */
   \   00000004   0x....             LDR.N    R4,??DataTable19_1
   \   00000006   0xE001             B.N      ??OSTmr_Task_0
   1089              for (;;) {
   1090                  OSSemPend(OSTmrSemSignal, 0, &err);                      /* Wait for signal indicating time to update timers  */
   1091                  OSTmr_Lock();
   1092                  OSTmrTime++;                                             /* Increment the current time                        */
   1093                  spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
   1094                  pspoke = &OSTmrWheelTbl[spoke];
   1095                  ptmr   = pspoke->OSTmrFirst;
   1096                  while (ptmr != (OS_TMR *)0) {
   1097                      ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
   1098                                                                           /* ... timer could get unlinked from the wheel.      */
   1099                      if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
   1100                          pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
   1101                          if (pfnct != (OS_TMR_CALLBACK)0) {
   1102                              (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
   1103                          }
   1104                          OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
   1105                          if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
   1106                              OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
   1107                          } else {
   1108                              ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
   1109                          }
   1110                      }
   1111                      ptmr = ptmr_next;
   1112                  }
   1113                  OSTmr_Unlock();
   \                     ??OSTmr_Task_1: (+1)
   \   00000008   0x.... 0x....      BL       OSTmr_Unlock
   \                     ??OSTmr_Task_0: (+1)
   \   0000000C   0xAA00             ADD      R2,SP,#+0
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x....             LDR.N    R0,??DataTable19_2
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x.... 0x....      BL       OSSemPend
   \   00000018   0x.... 0x....      BL       OSTmr_Lock
   \   0000001C   0x6820             LDR      R0,[R4, #+0]
   \   0000001E   0x1C40             ADDS     R0,R0,#+1
   \   00000020   0x6020             STR      R0,[R4, #+0]
   \   00000022   0x....             LDR.N    R1,??DataTable19_7
   \   00000024   0xF000 0x0007      AND      R0,R0,#0x7
   \   00000028   0xF851 0x6030      LDR      R6,[R1, R0, LSL #+3]
   \   0000002C   0x2E00             CMP      R6,#+0
   \   0000002E   0xE002             B.N      ??OSTmr_Task_2
   \                     ??OSTmr_Task_3: (+1)
   \   00000030   0x2102             MOVS     R1,#+2
   \   00000032   0x7041             STRB     R1,[R0, #+1]
   \                     ??OSTmr_Task_4: (+1)
   \   00000034   0x002E             MOVS     R6,R5
   \                     ??OSTmr_Task_2: (+1)
   \   00000036   0xD0E7             BEQ.N    ??OSTmr_Task_1
   \   00000038   0x1D30             ADDS     R0,R6,#+4
   \   0000003A   0x6885             LDR      R5,[R0, #+8]
   \   0000003C   0x6821             LDR      R1,[R4, #+0]
   \   0000003E   0x6902             LDR      R2,[R0, #+16]
   \   00000040   0x4291             CMP      R1,R2
   \   00000042   0xD1F7             BNE.N    ??OSTmr_Task_4
   \   00000044   0x6802             LDR      R2,[R0, #+0]
   \   00000046   0x0011             MOVS     R1,R2
   \   00000048   0xD002             BEQ.N    ??OSTmr_Task_5
   \   0000004A   0x6841             LDR      R1,[R0, #+4]
   \   0000004C   0x4630             MOV      R0,R6
   \   0000004E   0x4790             BLX      R2
   \                     ??OSTmr_Task_5: (+1)
   \   00000050   0x4630             MOV      R0,R6
   \   00000052   0x.... 0x....      BL       OSTmr_Unlink
   \   00000056   0xF106 0x0030      ADD      R0,R6,#+48
   \   0000005A   0x7801             LDRB     R1,[R0, #+0]
   \   0000005C   0x2902             CMP      R1,#+2
   \   0000005E   0xD1E7             BNE.N    ??OSTmr_Task_3
   \   00000060   0x2101             MOVS     R1,#+1
   \   00000062   0x4630             MOV      R0,R6
   \   00000064   0x.... 0x....      BL       OSTmr_Link
   \   00000068   0xE7E4             B.N      ??OSTmr_Task_4
   1114              }
   1115          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   0x........         DC32     OSIntNesting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_1:
   \   00000000   0x........         DC32     OSTmrTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_2:
   \   00000000   0x........         DC32     OSTmrSemSignal

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_3:
   \   00000000   0x........         DC32     OSTmrFreeList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_4:
   \   00000000   0x........         DC32     OSTmrUsed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_5:
   \   00000000   0x........         DC32     OSTmrFree

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_6:
   \   00000000   0x........         DC32     OSTmrTbl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_7:
   \   00000000   0x........         DC32     OSTmrWheelTbl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_8:
   \   00000000   0x........         DC32     OSTmrSem

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_9:
   \   00000000   0x........         DC32     OSTmrTaskStk

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x4F 0x53          DC8 "OS-TmrLock"
   \              0x2D 0x54    
   \              0x6D 0x72    
   \              0x4C 0x6F    
   \              0x63 0x6B    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x4F 0x53          DC8 "OS-TmrSig"
   \              0x2D 0x54    
   \              0x6D 0x72    
   \              0x53 0x69    
   \              0x67 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x75 0x43          DC8 "uC/OS-II Tmr"
   \              0x2F 0x4F    
   \              0x53 0x2D    
   \              0x49 0x49    
   \              0x20 0x54    
   \              0x6D 0x72    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   1116          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   OSTmrCreate
        32   -> OSTmr_Alloc
        32   -> OSTmr_Lock
        32   -> OSTmr_Unlock
        32   -> OS_StrCopy
        32   -> OS_StrLen
      16   OSTmrDel
        16   -> OSTmr_Free
        16   -> OSTmr_Lock
        16   -> OSTmr_Unlink
        16   -> OSTmr_Unlock
      16   OSTmrNameGet
        16   -> OSTmr_Lock
        16   -> OSTmr_Unlock
        16   -> OS_StrCopy
      16   OSTmrRemainGet
        16   -> OSTmr_Lock
        16   -> OSTmr_Unlock
       0   OSTmrSignal
         0   -> OSSemPost
      16   OSTmrStart
        16   -> OSTmr_Link
        16   -> OSTmr_Lock
        16   -> OSTmr_Unlink
        16   -> OSTmr_Unlock
      16   OSTmrStateGet
        16   -> OSTmr_Lock
        16   -> OSTmr_Unlock
      24   OSTmrStop
        24   -- Indirect call
        24   -> OSTmr_Lock
        24   -> OSTmr_Unlink
        24   -> OSTmr_Unlock
       0   OSTmr_Alloc
       0   OSTmr_Free
      16   OSTmr_Init
        16   -> OSEventNameSet
        16   -> OSSemCreate
        16   -> OSTmr_InitTask
        16   -> OS_MemClr
      32   OSTmr_InitTask
        32   -> OSTaskCreateExt
        32   -> OSTaskNameSet
       0   OSTmr_Link
       8   OSTmr_Lock
         8   -> OSSemPend
      24   OSTmr_Task
        24   -- Indirect call
        24   -> OSSemPend
        24   -> OSTmr_Link
        24   -> OSTmr_Lock
        24   -> OSTmr_Unlink
        24   -> OSTmr_Unlock
       4   OSTmr_Unlink
       0   OSTmr_Unlock
         0   -> OSSemPost


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable19
       4  ??DataTable19_1
       4  ??DataTable19_2
       4  ??DataTable19_3
       4  ??DataTable19_4
       4  ??DataTable19_5
       4  ??DataTable19_6
       4  ??DataTable19_7
       4  ??DataTable19_8
       4  ??DataTable19_9
      12  ?_0
      12  ?_1
      16  ?_2
     144  OSTmrCreate
     126  OSTmrDel
     106  OSTmrNameGet
     154  OSTmrRemainGet
       8  OSTmrSignal
     130  OSTmrStart
      70  OSTmrStateGet
     174  OSTmrStop
      40  OSTmr_Alloc
      58  OSTmr_Free
     154  OSTmr_Init
      58  OSTmr_InitTask
      82  OSTmr_Link
      16  OSTmr_Lock
     106  OSTmr_Task
      70  OSTmr_Unlink
       8  OSTmr_Unlock

 
 1 584 bytes in section .text
 
 1 584 bytes of CODE memory

Errors: none
Warnings: none
