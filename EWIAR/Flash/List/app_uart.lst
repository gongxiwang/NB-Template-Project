###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        12/Jul/2019  09:14:38
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\USER\APP\app_uart.c
#    Command line =  
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\USER\APP\app_uart.c -D
#        LORA_MODULE -lCN
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\Flash\List\ -o
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\Flash\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        D:\Softwares\IAR7.40\arm\INC\c\DLib_Config_Full.h -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\CPU\inc\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-CPU\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-CPU\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-LIB\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-OSII\Ports\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-OSII\Source\
#        -I E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\USER\BSP\
#        -I E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\USER\APP\
#        -Om --use_c++_inline
#    List file    =  
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\Flash\List\app_uart.lst
#    Object file  =  
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\Flash\Obj\app_uart.o
#
###############################################################################

E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\USER\APP\app_uart.c
      1          /** Copyright(c) 2019, XunFang Tech Limited. All rights reserved.
      2            * @file		app_uart.c
      3            * @author		walle
      4            * @version	V1.0.0
      5            * @date		31/5/2019
      6            * @brief		app接口函数文件
      7            */
      8          #include "app_uart.h"
      9          #include "bsp_uart.h"
     10          #include "app_nbiot.h"
     11          #include "stdio.h"
     12          #include <stdarg.h>
     13          #include "bsp.h"
     14          #include "bsp_dma.h"
     15          #include "app_device.h"
     16          #include "App_RF900M.h"
     17          #include "App_RF13P56M.h"
     18          #include "app_watmet.h"
     19          
     20          /**
     21            * @brief 内存块指针
     22           */

   \                                 In section .bss, align 4
     23          static OS_MEM *pmem_debug;
   \                     pmem_debug:
   \   00000000                      DS8 4
   \   00000004                      DS8 1028
     24          static debug_memory_struct USART_MEMORY[debug_memory_blk_number];
     25          
     26          
     27          /**
     28            * @brief 打印数据接口初始化
     29            * @details 可变参数
     30            * @param  pstring 字符参数
     31            * @retval 无
     32           */

   \                                 In section .text, align 2, keep-with-next
     33          void InitDebugPrintf(void)
     34          {
   \                     InitDebugPrintf: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
     35          	u8 err;	
     36          	/* 创建用于打印输出的内存 */
     37          	pmem_debug = OSMemCreate(USART_MEMORY, 
     38          							debug_memory_blk_number, 
     39          							debug_memory_blk_size,
     40          							&err);
   \   00000004   0x....             LDR.N    R4,??DataTable4_1
   \   00000006   0xAB00             ADD      R3,SP,#+0
   \   00000008   0xF240 0x4204      MOVW     R2,#+1028
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x1D20             ADDS     R0,R4,#+4
   \   00000010   0x.... 0x....      BL       OSMemCreate
   \   00000014   0x6020             STR      R0,[R4, #+0]
     41          }
   \   00000016   0xBD13             POP      {R0,R1,R4,PC}    ;; return
     42          
     43          
     44          /**
     45            * @brief 打印数据接口
     46            * @details 可变参数
     47            * @param  pstring 字符参数
     48            * @retval 无
     49           */

   \                                 In section .text, align 2, keep-with-next
     50          void debug_printf(const char *pstring, ...)
     51          {
   \                     debug_printf: (+1)
   \   00000000   0xB40E             PUSH     {R1-R3}
   \   00000002   0xB578             PUSH     {R3-R6,LR}
   \   00000004   0x4604             MOV      R4,R0
     52          	debug_memory_struct *p;
     53              unsigned char err;
     54              va_list args;
     55              
     56              p = OSMemGet(pmem_debug, &err);
   \   00000006   0x....             LDR.N    R5,??DataTable4_1
   \   00000008   0xA900             ADD      R1,SP,#+0
   \   0000000A   0x6828             LDR      R0,[R5, #+0]
   \   0000000C   0x.... 0x....      BL       OSMemGet
   \   00000010   0x0006             MOVS     R6,R0
     57              if(!p) 
   \   00000012   0xD017             BEQ.N    ??debug_printf_0
     58                  return;
     59              va_start(args, pstring);
   \   00000014   0xAB05             ADD      R3,SP,#+20
     60              p->size = vsnprintf(p->buffer, debug_memory_blk_size, pstring, args);
   \   00000016   0x4622             MOV      R2,R4
   \   00000018   0xF240 0x4104      MOVW     R1,#+1028
   \   0000001C   0x.... 0x....      BL       vsnprintf
   \   00000020   0xF8C6 0x0400      STR      R0,[R6, #+1024]
     61              va_end(args);
     62              if(!p->size)
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD104             BNE.N    ??debug_printf_1
     63              {
     64                  OSMemPut(pmem_debug, p);
   \   00000028   0x4631             MOV      R1,R6
   \   0000002A   0x6828             LDR      R0,[R5, #+0]
   \   0000002C   0x.... 0x....      BL       OSMemPut
     65                  return;
   \   00000030   0xE008             B.N      ??debug_printf_0
     66              }
     67              debug_send_data((unsigned char*)p->buffer, p->size);
   \                     ??debug_printf_1: (+1)
   \   00000032   0x4601             MOV      R1,R0
   \   00000034   0xB2C9             UXTB     R1,R1
   \   00000036   0x4630             MOV      R0,R6
   \   00000038   0x.... 0x....      BL       debug_send_data
     68              OSMemPut(pmem_debug, p);
   \   0000003C   0x4631             MOV      R1,R6
   \   0000003E   0x6828             LDR      R0,[R5, #+0]
   \   00000040   0x.... 0x....      BL       OSMemPut
     69              return;
   \                     ??debug_printf_0: (+1)
   \   00000044   0xBC71             POP      {R0,R4-R6}
   \   00000046   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return
     70          }
     71          
     72          /**
     73            * @brief 发送串口数据
     74            * @details 可变参数
     75            * @param  pstring 字符参数
     76            * @retval 无
     77           */

   \                                 In section .text, align 2, keep-with-next
     78          static void debug_send_data(unsigned char* data, unsigned char len)
     79          {
   \                     debug_send_data: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
     80              unsigned char i;
     81          	/* 每次发送前清除发送标志位就能够发送第一个字节了 */
     82          	USART_ClearFlag(USART3, USART_FLAG_TC); 
   \   00000006   0x....             LDR.N    R6,??DataTable4_2  ;; 0x40004800
   \   00000008   0x2140             MOVS     R1,#+64
   \   0000000A   0x4630             MOV      R0,R6
   \   0000000C   0x.... 0x....      BL       USART_ClearFlag
     83              for(i = 0; i < len; i ++)
   \   00000010   0x2700             MOVS     R7,#+0
   \   00000012   0xE00A             B.N      ??debug_send_data_0
     84              {
     85                  USART_SendData(USART3, data[i]);
   \                     ??debug_send_data_1: (+1)
   \   00000014   0x5D39             LDRB     R1,[R7, R4]
   \   00000016   0x4630             MOV      R0,R6
   \   00000018   0x.... 0x....      BL       USART_SendData
     86                  while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);
   \                     ??debug_send_data_2: (+1)
   \   0000001C   0x2140             MOVS     R1,#+64
   \   0000001E   0x4630             MOV      R0,R6
   \   00000020   0x.... 0x....      BL       USART_GetFlagStatus
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD0F9             BEQ.N    ??debug_send_data_2
     87              }
   \   00000028   0x1C7F             ADDS     R7,R7,#+1
   \                     ??debug_send_data_0: (+1)
   \   0000002A   0xB2FF             UXTB     R7,R7
   \   0000002C   0x42AF             CMP      R7,R5
   \   0000002E   0xD3F1             BCC.N    ??debug_send_data_1
     88          }
   \   00000030   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     89          
     90          /**
     91            * @brief HEX转字符串
     92            * @details 可变参数
     93            * @param  pstring 字符参数
     94            * @retval 无
     95           */

   \                                 In section .text, align 2, keep-with-next
     96          static u8 hex_to_string(u8 hex, u8 *pbuffer)
     97          {
     98          	u8 temp;
     99          	temp = (hex & 0xf0) >> 4;
   \                     hex_to_string: (+1)
   \   00000000   0x0902             LSRS     R2,R0,#+4
    100          	if(temp <= 9)
   \   00000002   0x4613             MOV      R3,R2
   \   00000004   0x2B0A             CMP      R3,#+10
   \   00000006   0xDA03             BGE.N    ??hex_to_string_0
    101          		*pbuffer++ = temp + '0';
   \   00000008   0x3230             ADDS     R2,R2,#+48
   \   0000000A   0xF801 0x2B01      STRB     R2,[R1], #+1
   \   0000000E   0xE002             B.N      ??hex_to_string_1
    102          	else
    103          		*pbuffer++ = temp - 10 + 'A';
   \                     ??hex_to_string_0: (+1)
   \   00000010   0x3237             ADDS     R2,R2,#+55
   \   00000012   0xF801 0x2B01      STRB     R2,[R1], #+1
    104          	temp = (hex & 0x0f) >> 0;
   \                     ??hex_to_string_1: (+1)
   \   00000016   0xF000 0x000F      AND      R0,R0,#0xF
    105          	if(temp <= 9)
   \   0000001A   0x4602             MOV      R2,R0
   \   0000001C   0x2A0A             CMP      R2,#+10
   \   0000001E   0xDA03             BGE.N    ??hex_to_string_2
    106          		*pbuffer++ = temp + '0';
   \   00000020   0x3030             ADDS     R0,R0,#+48
   \   00000022   0xF801 0x0B01      STRB     R0,[R1], #+1
   \   00000026   0xE002             B.N      ??hex_to_string_3
    107          	else
    108          		*pbuffer++ = temp  - 10 + 'A';
   \                     ??hex_to_string_2: (+1)
   \   00000028   0x3037             ADDS     R0,R0,#+55
   \   0000002A   0xF801 0x0B01      STRB     R0,[R1], #+1
    109          	*pbuffer++ = ' ';
   \                     ??hex_to_string_3: (+1)
   \   0000002E   0x2020             MOVS     R0,#+32
   \   00000030   0x7008             STRB     R0,[R1, #+0]
    110          	return 3;
   \   00000032   0x2003             MOVS     R0,#+3
   \   00000034   0x4770             BX       LR               ;; return
    111          }
    112          
    113          /**
    114            * @brief 发送串口buffer数据
    115            * @details 可变参数
    116            * @param  pstring 字符参数
    117            * @retval 无
    118           */

   \                                 In section .text, align 2, keep-with-next
    119          void debug_print_buffer(const u8 *buffer, u8 size)
    120          {
   \                     debug_print_buffer: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x4606             MOV      R6,R0
   \   00000008   0x000F             MOVS     R7,R1
    121              debug_memory_struct *p;
    122              u8 err;
    123              int i;
    124          
    125              if(!size)
   \   0000000A   0xD06B             BEQ.N    ??debug_print_buffer_0
    126                  return;
    127              
    128              p = OSMemGet(pmem_debug, &err);
   \   0000000C   0x....             LDR.N    R4,??DataTable4_1
   \   0000000E   0xA900             ADD      R1,SP,#+0
   \   00000010   0x6820             LDR      R0,[R4, #+0]
   \   00000012   0x.... 0x....      BL       OSMemGet
   \   00000016   0x0005             MOVS     R5,R0
    129              if(!p) 
   \   00000018   0xD064             BEQ.N    ??debug_print_buffer_0
    130                  return;
    131              
    132              p->size = 0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xF8C5 0x0400      STR      R0,[R5, #+1024]
    133              for(i = 0; i < size; ++i)
   \   00000020   0x4680             MOV      R8,R0
   \   00000022   0xE00B             B.N      ??debug_print_buffer_1
    134              {
    135                  if(buffer_size - p->size < 6)
    136                  {
    137                      /* not enough memory to fill the buffer, fix the EOF */
    138                      p->buffer[p->size] = '\0';
    139                      p->buffer[p->size - 1] = '\n';
    140                      p->buffer[p->size - 2] = '\r';
    141                      p->buffer[p->size - 3] = '.';
    142                      p->buffer[p->size - 4] = '.';
    143                      p->buffer[p->size - 5] = '.';
    144                      break;  
    145                  }
    146                  p->size += hex_to_string(buffer[i], (u8 *)&p->buffer[p->size]);
   \                     ??debug_print_buffer_2: (+1)
   \   00000024   0x1949             ADDS     R1,R1,R5
   \   00000026   0xF818 0x0006      LDRB     R0,[R8, R6]
   \   0000002A   0x.... 0x....      BL       hex_to_string
   \   0000002E   0xF8D5 0x1400      LDR      R1,[R5, #+1024]
   \   00000032   0x1840             ADDS     R0,R0,R1
   \   00000034   0xF8C5 0x0400      STR      R0,[R5, #+1024]
   \   00000038   0xF108 0x0801      ADD      R8,R8,#+1
   \                     ??debug_print_buffer_1: (+1)
   \   0000003C   0x4638             MOV      R0,R7
   \   0000003E   0x4580             CMP      R8,R0
   \   00000040   0xDA23             BGE.N    ??debug_print_buffer_3
   \   00000042   0xF8D5 0x1400      LDR      R1,[R5, #+1024]
   \   00000046   0xF5C1 0x6280      RSB      R2,R1,#+1024
   \   0000004A   0x2A06             CMP      R2,#+6
   \   0000004C   0xDAEA             BGE.N    ??debug_print_buffer_2
   \   0000004E   0x2200             MOVS     R2,#+0
   \   00000050   0x554A             STRB     R2,[R1, R5]
   \   00000052   0x210A             MOVS     R1,#+10
   \   00000054   0xF8D5 0x2400      LDR      R2,[R5, #+1024]
   \   00000058   0x1952             ADDS     R2,R2,R5
   \   0000005A   0xF802 0x1C01      STRB     R1,[R2, #-1]
   \   0000005E   0x210D             MOVS     R1,#+13
   \   00000060   0xF8D5 0x2400      LDR      R2,[R5, #+1024]
   \   00000064   0x1952             ADDS     R2,R2,R5
   \   00000066   0xF802 0x1C02      STRB     R1,[R2, #-2]
   \   0000006A   0x212E             MOVS     R1,#+46
   \   0000006C   0xF8D5 0x2400      LDR      R2,[R5, #+1024]
   \   00000070   0x1952             ADDS     R2,R2,R5
   \   00000072   0xF802 0x1C03      STRB     R1,[R2, #-3]
   \   00000076   0xF8D5 0x2400      LDR      R2,[R5, #+1024]
   \   0000007A   0x1952             ADDS     R2,R2,R5
   \   0000007C   0xF802 0x1C04      STRB     R1,[R2, #-4]
   \   00000080   0xF8D5 0x2400      LDR      R2,[R5, #+1024]
   \   00000084   0x1952             ADDS     R2,R2,R5
   \   00000086   0xF802 0x1C05      STRB     R1,[R2, #-5]
    147              }
    148              /* all buffer filled to memory */
    149              if(i == size)
   \                     ??debug_print_buffer_3: (+1)
   \   0000008A   0x4580             CMP      R8,R0
   \   0000008C   0xD114             BNE.N    ??debug_print_buffer_4
    150              {
    151                  p->buffer[p->size++] = '\r';
   \   0000008E   0xF8D5 0x0400      LDR      R0,[R5, #+1024]
   \   00000092   0x1C41             ADDS     R1,R0,#+1
   \   00000094   0xF8C5 0x1400      STR      R1,[R5, #+1024]
   \   00000098   0x210D             MOVS     R1,#+13
   \   0000009A   0x5541             STRB     R1,[R0, R5]
    152                  p->buffer[p->size++] = '\n';
   \   0000009C   0xF8D5 0x0400      LDR      R0,[R5, #+1024]
   \   000000A0   0x1C41             ADDS     R1,R0,#+1
   \   000000A2   0xF8C5 0x1400      STR      R1,[R5, #+1024]
   \   000000A6   0x210A             MOVS     R1,#+10
   \   000000A8   0x5541             STRB     R1,[R0, R5]
    153                  p->buffer[p->size++] = '\0';
   \   000000AA   0xF8D5 0x0400      LDR      R0,[R5, #+1024]
   \   000000AE   0x1C41             ADDS     R1,R0,#+1
   \   000000B0   0xF8C5 0x1400      STR      R1,[R5, #+1024]
   \   000000B4   0x2100             MOVS     R1,#+0
   \   000000B6   0x5541             STRB     R1,[R0, R5]
    154              }
    155              
    156              if(!p->size)
   \                     ??debug_print_buffer_4: (+1)
   \   000000B8   0xF8D5 0x0400      LDR      R0,[R5, #+1024]
   \   000000BC   0x2800             CMP      R0,#+0
   \   000000BE   0x4629             MOV      R1,R5
   \   000000C0   0xD103             BNE.N    ??debug_print_buffer_5
    157              {
    158                  OSMemPut(pmem_debug, p);
   \   000000C2   0x6820             LDR      R0,[R4, #+0]
   \   000000C4   0x.... 0x....      BL       OSMemPut
    159                  return;
   \   000000C8   0xE00C             B.N      ??debug_print_buffer_0
    160              }
    161              printf("%s", p->buffer);
   \                     ??debug_print_buffer_5: (+1)
   \   000000CA   0x....             ADR.N    R0,??DataTable4  ;; 0x25, 0x73, 0x00, 0x00
   \   000000CC   0x.... 0x....      BL       printf
    162              debug_send_data((u8*)p->buffer, p->size);
   \   000000D0   0xF8D5 0x1400      LDR      R1,[R5, #+1024]
   \   000000D4   0xB2C9             UXTB     R1,R1
   \   000000D6   0x4628             MOV      R0,R5
   \   000000D8   0x.... 0x....      BL       debug_send_data
    163              OSMemPut(pmem_debug, p);
   \   000000DC   0x4629             MOV      R1,R5
   \   000000DE   0x6820             LDR      R0,[R4, #+0]
   \   000000E0   0x.... 0x....      BL       OSMemPut
    164          }
   \                     ??debug_print_buffer_0: (+1)
   \   000000E4   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}  ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x25 0x73          DC8      0x25, 0x73, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     pmem_debug

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x40004800         DC32     0x40004800

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x25 0x73          DC8 "%s"
   \              0x00         
   \   00000003   0x00               DC8 0
    165          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   InitDebugPrintf
        16   -> OSMemCreate
      32   debug_print_buffer
        32   -> OSMemGet
        32   -> OSMemPut
        32   -> debug_send_data
        32   -> hex_to_string
        32   -> printf
      32   debug_printf
        32   -> OSMemGet
        32   -> OSMemPut
        32   -> debug_send_data
        32   -> vsnprintf
      24   debug_send_data
        24   -> USART_ClearFlag
        24   -> USART_GetFlagStatus
        24   -> USART_SendData
       0   hex_to_string


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ?_0
      24  InitDebugPrintf
     232  debug_print_buffer
      74  debug_printf
      50  debug_send_data
      54  hex_to_string
    1032  pmem_debug
          USART_MEMORY

 
 1 032 bytes in section .bss
     4 bytes in section .rodata
   446 bytes in section .text
 
   446 bytes of CODE  memory
     4 bytes of CONST memory
 1 032 bytes of DATA  memory

Errors: none
Warnings: none
