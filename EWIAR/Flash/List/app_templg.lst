###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        12/Jul/2019  09:14:38
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\USER\APP\app_templg.c
#    Command line =  
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\USER\APP\app_templg.c
#        -D LORA_MODULE -lCN
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\Flash\List\ -o
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\Flash\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        D:\Softwares\IAR7.40\arm\INC\c\DLib_Config_Full.h -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\CPU\inc\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-CPU\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-CPU\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-LIB\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-OSII\Ports\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-OSII\Source\
#        -I E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\USER\BSP\
#        -I E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\USER\APP\
#        -Om --use_c++_inline
#    List file    =  
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\Flash\List\app_templg.lst
#    Object file  =  
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\Flash\Obj\app_templg.o
#
###############################################################################

E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\USER\APP\app_templg.c
      1          /** Copyright(c) 2015, XunFang Tech Limited. All rights reserved.
      2            * @file		app_CO2.c
      3            * @author		walle
      4            * @version	V1.0.0
      5            * @date		31/5/2019
      6            * @brief		CO2传感器应用函数
      7            */
      8          #include "bsp.h"
      9          #include "app_templg.h"
     10          #include "bsp_modbus.h"
     11          #include "bsp_uart.h"
     12          
     13          
     14          /***************************************************
     15          寄存器地址 PLC或组态地址 内容 操作
     16          0000 H 40001 湿度 只读
     17          0001 H 40002 温度 只读
     18          0002 H 40003 光照度
     19          （只在0~200000Lux
     20          启用，单位1Lux）
     21          只读
     22          0003 H 40004
     23          0006 H 40007 光照度
     24          (0~65535单位1Lux
     25          0~200000单位百Lux)
     26          只读
     27          ***************************************************/
     28          
     29          

   \                                 In section .bss, align 4
     30          static ST_TEMPLG_CTL st_Templg_Ctl = {0};			/* CO2控制结构体 		*/
   \                     st_Templg_Ctl:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
     31          static ST_ModBusPack st_ModBusPack = {0};			/* ModBus结构体 		*/
   \                     st_ModBusPack:
   \   00000000                      DS8 24
     32          
     33          /**
     34            * @brief 读取传感器CO2值
     35           */

   \                                 In section .text, align 2, keep-with-next
     36          void ReadTemplgSensorValue(u8 ValueType)
     37          {
   \                     ReadTemplgSensorValue: (+1)
   \   00000000   0xB57F             PUSH     {R0-R6,LR}
   \   00000002   0x4606             MOV      R6,R0
     38          	u8 TempData[16] = {0};					/* 数据缓冲 */
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x2110             MOVS     R1,#+16
   \   00000008   0x.... 0x....      BL       __aeabi_memclr4
     39          	u32 timeout = st_Templg_Ctl.timeout;	/* 等待超时时间 */
   \   0000000C   0x....             LDR.N    R4,??DataTable2
   \   0000000E   0x68E5             LDR      R5,[R4, #+12]
     40          	if(EN_TYPE_LIGHT == ValueType)			/* 光照 */
   \   00000010   0x2E00             CMP      R6,#+0
   \   00000012   0xD11E             BNE.N    ??ReadTemplgSensorValue_0
     41          	{
     42          		/************************************************************
     43          		问询帧
     44          		地址码 功能码 起始地址 数据长度 校验码低位 校验码高位
     45          		0x01 0x03 0x00 0x06 0x00 0x01 0x64 0x0B
     46          		*************************************************************/
     47          		st_Templg_Ctl.TemplgType = EN_TYPE_LIGHT;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x7160             STRB     R0,[R4, #+5]
     48          		st_ModBusPack.data[0] = 0x00;
   \   00000018   0x....             LDR.N    R6,??DataTable2_1
   \   0000001A   0x7130             STRB     R0,[R6, #+4]
     49          		st_ModBusPack.data[1] = 0x06;
   \   0000001C   0x2006             MOVS     R0,#+6
   \   0000001E   0x7170             STRB     R0,[R6, #+5]
     50          		st_ModBusPack.data[2] = 0x00;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x71B0             STRB     R0,[R6, #+6]
     51          		st_ModBusPack.data[3] = 0x01;
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x71F0             STRB     R0,[R6, #+7]
     52          		
     53          		ModBusTxPack(TempData, &st_ModBusPack);							/* 组包发送 */
   \   00000028   0x4631             MOV      R1,R6
   \   0000002A   0xA800             ADD      R0,SP,#+0
   \   0000002C   0x.... 0x....      BL       ModBusTxPack
     54          
     55          		/* 等待接收数据 */
     56          		while(timeout --)/* 5S */
   \                     ??ReadTemplgSensorValue_1: (+1)
   \   00000030   0x4628             MOV      R0,R5
   \   00000032   0x1E45             SUBS     R5,R0,#+1
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD02B             BEQ.N    ??ReadTemplgSensorValue_2
     57          		{
     58          			if(WaitUartDataReceive(TempData, TmeplgSensorRecvLen) == 0x00)	/* 等待接收数据 */
   \   00000038   0x2107             MOVS     R1,#+7
   \   0000003A   0xA800             ADD      R0,SP,#+0
   \   0000003C   0x.... 0x....      BL       WaitUartDataReceive
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD025             BEQ.N    ??ReadTemplgSensorValue_2
     59          			{
     60          				break;
     61          			}
     62          			OSTimeDlyHMSM(0, 0, 0, 1); 									/* 需要延迟10ms */	
   \   00000044   0x2301             MOVS     R3,#+1
   \   00000046   0x2200             MOVS     R2,#+0
   \   00000048   0x4611             MOV      R1,R2
   \   0000004A   0x4608             MOV      R0,R1
   \   0000004C   0x.... 0x....      BL       OSTimeDlyHMSM
   \   00000050   0xE7EE             B.N      ??ReadTemplgSensorValue_1
     63          		}
     64          
     65          	}
     66          	else if(EN_TYPE_TEPHUM == ValueType)	/* 温湿度 */
   \                     ??ReadTemplgSensorValue_0: (+1)
   \   00000052   0x2E01             CMP      R6,#+1
   \   00000054   0xD11C             BNE.N    ??ReadTemplgSensorValue_2
     67          	{
     68          		/************************************************************
     69          		 读取设备地址 0x01 的温湿度值
     70          		问询帧
     71          		地址码 功能码 起始地址 数据长度 校验码低位 校验码高位
     72          		0x01 0x03 0x00 0x00 0x00 0x02 0xC4 0x0B
     73          		*************************************************************/
     74          		st_Templg_Ctl.TemplgType = EN_TYPE_TEPHUM;
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0x7160             STRB     R0,[R4, #+5]
     75          		st_ModBusPack.data[0] = 0x00;
   \   0000005A   0x....             LDR.N    R6,??DataTable2_1
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x80B0             STRH     R0,[R6, #+4]
     76          		st_ModBusPack.data[1] = 0x00;
     77          		st_ModBusPack.data[2] = 0x00;
   \   00000060   0x71B0             STRB     R0,[R6, #+6]
     78          		st_ModBusPack.data[3] = 0x02;
   \   00000062   0x2002             MOVS     R0,#+2
   \   00000064   0x71F0             STRB     R0,[R6, #+7]
     79          		
     80          		ModBusTxPack(TempData, &st_ModBusPack);							/* 组包发送 */
   \   00000066   0x4631             MOV      R1,R6
   \   00000068   0xA800             ADD      R0,SP,#+0
   \   0000006A   0x.... 0x....      BL       ModBusTxPack
   \   0000006E   0xE005             B.N      ??ReadTemplgSensorValue_3
     81          
     82          		/* 等待接收数据 */
     83          		while(timeout --)/* 5S */
     84          		{
     85          			if(WaitUartDataReceive(TempData, TmeplgSensorRecvLen) == 0x00)	/* 等待接收数据 */
     86          			{
     87          				break;
     88          			}
     89          			OSTimeDlyHMSM(0, 0, 0, 1); 									/* 需要延迟10ms */	
   \                     ??ReadTemplgSensorValue_4: (+1)
   \   00000070   0x2301             MOVS     R3,#+1
   \   00000072   0x2200             MOVS     R2,#+0
   \   00000074   0x4611             MOV      R1,R2
   \   00000076   0x4608             MOV      R0,R1
   \   00000078   0x.... 0x....      BL       OSTimeDlyHMSM
   \                     ??ReadTemplgSensorValue_3: (+1)
   \   0000007C   0x4628             MOV      R0,R5
   \   0000007E   0x1E45             SUBS     R5,R0,#+1
   \   00000080   0x2800             CMP      R0,#+0
   \   00000082   0xD005             BEQ.N    ??ReadTemplgSensorValue_2
   \   00000084   0x2107             MOVS     R1,#+7
   \   00000086   0xA800             ADD      R0,SP,#+0
   \   00000088   0x.... 0x....      BL       WaitUartDataReceive
   \   0000008C   0x2800             CMP      R0,#+0
   \   0000008E   0xD1EF             BNE.N    ??ReadTemplgSensorValue_4
     90          		}
     91          	}
     92          
     93          	/* 判断是否是超时退出的循环 */
     94          	if(timeout == 0)
   \                     ??ReadTemplgSensorValue_2: (+1)
   \   00000090   0x2D00             CMP      R5,#+0
   \   00000092   0xD103             BNE.N    ??ReadTemplgSensorValue_5
     95          	{
     96          		st_Templg_Ctl.TryCount ++;
   \   00000094   0x6920             LDR      R0,[R4, #+16]
   \   00000096   0x1C40             ADDS     R0,R0,#+1
   \   00000098   0x6120             STR      R0,[R4, #+16]
   \   0000009A   0xBD7F             POP      {R0-R6,PC}
     97          	}
     98          	else
     99          	{
    100          		ModBusBufToPack(&st_ModBusPack, TempData);					/* 把数据赋值到PACK */
   \                     ??ReadTemplgSensorValue_5: (+1)
   \   0000009C   0x....             LDR.N    R6,??DataTable2_1
   \   0000009E   0xA900             ADD      R1,SP,#+0
   \   000000A0   0x4630             MOV      R0,R6
   \   000000A2   0x.... 0x....      BL       ModBusBufToPack
    101          		CalculaTemplgSensorValue(&st_Templg_Ctl, st_ModBusPack.data, st_ModBusPack.datalen);/* 得出三合一的值 */
   \   000000A6   0x78F2             LDRB     R2,[R6, #+3]
   \   000000A8   0x1D31             ADDS     R1,R6,#+4
   \   000000AA   0x4620             MOV      R0,R4
   \   000000AC   0x.... 0x....      BL       CalculaTemplgSensorValue
    102          	}
    103          
    104          	
    105          }
   \   000000B0   0xBD7F             POP      {R0-R6,PC}       ;; return
    106          
    107          /**
    108            * @brief CO2传感器初始化
    109           */

   \                                 In section .text, align 2, keep-with-next
    110          void InitTemplgSensor(void)
    111          {
   \                     InitTemplgSensor: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    112          	st_Templg_Ctl.timeout = 5000;								/* 5秒左右 */
   \   00000002   0x....             LDR.N    R0,??DataTable2
   \   00000004   0xF241 0x3188      MOVW     R1,#+5000
   \   00000008   0x60C1             STR      R1,[R0, #+12]
    113          	st_Templg_Ctl.TryCount = 5;								/* 尝试发送5次 */
   \   0000000A   0x2105             MOVS     R1,#+5
   \   0000000C   0x6101             STR      R1,[R0, #+16]
    114          	st_Templg_Ctl.Sensor_addr = TemplgSensorAddr;					/* 地址赋值 */
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0x7001             STRB     R1,[R0, #+0]
    115          	st_ModBusPack.address = st_Templg_Ctl.Sensor_addr;			/* ModBus设备地址赋值 */
   \   00000012   0x....             LDR.N    R0,??DataTable2_1
   \   00000014   0x7001             STRB     R1,[R0, #+0]
    116          	st_ModBusPack.function = TEMPLGFUNCODE;						/* 功能码 */
   \   00000016   0x2103             MOVS     R1,#+3
   \   00000018   0x7041             STRB     R1,[R0, #+1]
    117          	OPENRS_485;												/* 打开RS485通信 */
   \   0000001A   0x....             LDR.N    R4,??DataTable2_2  ;; 0x40010c00
   \   0000001C   0x2140             MOVS     R1,#+64
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       GPIO_SetBits
   \   00000024   0x2120             MOVS     R1,#+32
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0x.... 0x....      BL       GPIO_ResetBits
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0xE8BD 0x4010      POP      {R4,LR}
   \   00000032   0x.... 0x....      B.W      SetUSART_MODE
    118          }
    119          
    120          /**
    121            * @brief 解析TemplgSensorValue
    122           */

   \                                 In section .text, align 2, keep-with-next
    123          u16 CalculaTemplgSensorValue(PST_TEMPLG_CTL pst_templgCtl, u8* TemplgData, u32 len) 
    124          {
    125          	if(len > 0)
   \                     CalculaTemplgSensorValue: (+1)
   \   00000000   0x2A00             CMP      R2,#+0
   \   00000002   0xD015             BEQ.N    ??CalculaTemplgSensorValue_0
    126          	{
    127          		switch(pst_templgCtl->TemplgType)
   \   00000004   0x7942             LDRB     R2,[R0, #+5]
   \   00000006   0x2A00             CMP      R2,#+0
   \   00000008   0xD002             BEQ.N    ??CalculaTemplgSensorValue_1
   \   0000000A   0x2A01             CMP      R2,#+1
   \   0000000C   0xD006             BEQ.N    ??CalculaTemplgSensorValue_2
   \   0000000E   0xE00F             B.N      ??CalculaTemplgSensorValue_0
    128          		{
    129          			case EN_TYPE_LIGHT:				/* 光照 */
    130          				pst_templgCtl->LightValue = ((TemplgData[0] << 8) | TemplgData[1]);
   \                     ??CalculaTemplgSensorValue_1: (+1)
   \   00000010   0x780A             LDRB     R2,[R1, #+0]
   \   00000012   0x7849             LDRB     R1,[R1, #+1]
   \   00000014   0xEA41 0x2102      ORR      R1,R1,R2, LSL #+8
   \   00000018   0x8141             STRH     R1,[R0, #+10]
    131          				break;
   \   0000001A   0xE009             B.N      ??CalculaTemplgSensorValue_0
    132          			case EN_TYPE_TEPHUM:			/* 温湿度 */
    133          				pst_templgCtl->HumValue = ((TemplgData[0] << 8) | TemplgData[1]);
   \                     ??CalculaTemplgSensorValue_2: (+1)
   \   0000001C   0x780A             LDRB     R2,[R1, #+0]
   \   0000001E   0x784B             LDRB     R3,[R1, #+1]
   \   00000020   0xEA43 0x2202      ORR      R2,R3,R2, LSL #+8
   \   00000024   0x8102             STRH     R2,[R0, #+8]
    134          				pst_templgCtl->TempValue = ((TemplgData[2] << 8) | TemplgData[3]);
   \   00000026   0x788A             LDRB     R2,[R1, #+2]
   \   00000028   0x78C9             LDRB     R1,[R1, #+3]
   \   0000002A   0xEA41 0x2102      ORR      R1,R1,R2, LSL #+8
   \   0000002E   0x80C1             STRH     R1,[R0, #+6]
    135          				break;
    136          			default:
    137          				break;
    138          		}
    139          	}
    140          	return 0;
   \                     ??CalculaTemplgSensorValue_0: (+1)
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x4770             BX       LR               ;; return
    141          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     st_Templg_Ctl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     st_ModBusPack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x40010C00         DC32     0x40010c00

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   CalculaTemplgSensorValue
       8   InitTemplgSensor
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
         0   -> SetUSART_MODE
      32   ReadTemplgSensorValue
        32   -> CalculaTemplgSensorValue
        32   -> ModBusBufToPack
        32   -> ModBusTxPack
        32   -> OSTimeDlyHMSM
        32   -> WaitUartDataReceive
        32   -> __aeabi_memclr4


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
      16  ?_0
      52  CalculaTemplgSensorValue
      54  InitTemplgSensor
     178  ReadTemplgSensorValue
      24  st_ModBusPack
      20  st_Templg_Ctl

 
  44 bytes in section .bss
  16 bytes in section .rodata
 296 bytes in section .text
 
 296 bytes of CODE  memory
  16 bytes of CONST memory
  44 bytes of DATA  memory

Errors: none
Warnings: none
