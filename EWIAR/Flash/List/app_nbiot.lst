###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        12/Jul/2019  09:14:38
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\USER\APP\app_nbiot.c
#    Command line =  
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\USER\APP\app_nbiot.c -D
#        LORA_MODULE -lCN
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\Flash\List\ -o
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\Flash\Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        D:\Softwares\IAR7.40\arm\INC\c\DLib_Config_Full.h -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\CPU\inc\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-CPU\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-CPU\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-LIB\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-OSII\Ports\
#        -I
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\UCOS-II\uC-OSII\Source\
#        -I E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\USER\BSP\
#        -I E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\..\USER\APP\
#        -Om --use_c++_inline
#    List file    =  
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\Flash\List\app_nbiot.lst
#    Object file  =  
#        E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\EWIAR\Flash\Obj\app_nbiot.o
#
###############################################################################

E:\MYWorkPlace\SVNData\zhouwanli\XF-SXT-N-V1.0\USER\APP\app_nbiot.c
      1          /** @copyright XunFang Communication Tech Limited. All rights reserved. 2019.
      2            * @file  app_nbiot.c
      3            * @author  walle
      4            * @version  V2.0.0
      5            * @date  08/05/2019
      6            * @brief  用户app_nbiot
      7            */ 
      8          #include "app_cfg.h"
      9          #include "app_nbiot.h"
     10          #include "app_uart.h"
     11          #include "bsp_uart.h"

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp char *strchr(char const *, int)
   \                     strchr: (+1)
   \   00000000   0x.... 0x....      B.W      __iar_Strchr

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp char *strstr(char const *, char const *)
   \                     strstr: (+1)
   \   00000000   0x.... 0x....      B.W      __iar_Strstr
     12          #include "bsp.h"
     13          #include "bsp_dma.h"
     14          #include "app_device.h"
     15          #include "string.h"
     16          #include "stdio.h"
     17          #include "stdlib.h"
     18          
     19          #define SENDCOAPIP        "AT+NCDP=49.4.85.232,5683\r\n"   	/* 华为-oceanconnect-COAP连接地址 */
     20          #define NBIOT_CMDEXECUTE_COUNT 	0x03                       	/* BC-35命令执行次数 */
     21          
     22          #define ENABLE_NBIOT_Tick		0x01						/* 使能NBIOT固定时间发送 */
     23          #define DISABLE_NBIOT_Tick   	0x00
     24          
     25          static Device_packet_t NBiotDataPacket = {0};				/* NBIOT数据包 */
     26          static Device_packet_t NBiotTxdaPacket = {0};
     27          u8 commandAT[255];     // 存放指令，包含ip地址和端口和长度
     28          u8 HTTPTCPData[255];   //存放发送信息就是最后发送的命令里面的数据
     29          
     30          
     31          
     32          /* AT Command Description Implementation Status */
     33            
     34          /* 3GPP Commands (27.007)*/
     35          //------------|-----------------------------------------------------| 
     36          // AT+CGMI    | Request Manufacturer Identification B350 or later   
     37          //------------|-----------------------------------------------------|
     38          // AT+CGMM    | Request Manufacturer Model B350 or later            
     39          //------------|-----------------------------------------------------|
     40          // AT+CGMR    | Request Manufacturer Revision B350 or later         
     41          //------------|-----------------------------------------------------|
     42          // AT+CGSN    | Request Product Serial Number B350 or later         
     43          //------------|-----------------------------------------------------|
     44          // AT+CEREG   | EPS Network Registration Status B350 or later       
     45          //------------|-----------------------------------------------------|
     46          // AT+CSCON   | Signalling Connection Status B350 or later
     47          //------------|-----------------------------------------------------|
     48          // AT+CLAC    | List Available Commands B350 or later
     49          //------------|-----------------------------------------------------|
     50          // AT+CSQ     | Get Signal Strength Indicator B350 or later
     51          //------------|-----------------------------------------------------|
     52          // AT+CGPADDR | Show PDP Addresses B350 or later
     53          //------------|-----------------------------------------------------|
     54          // AT+COPS    | PLMN Selection B350 or later
     55          //------------|-----------------------------------------------------|
     56          // AT+CGATT   | PS Attach or Detach B350 or later
     57          //------------|-----------------------------------------------------|
     58          // AT+CGACT   | Activate or Deactivate PDP Context B657SP1 or later
     59          //------------|-----------------------------------------------------|
     60          // AT+CIMI    | Request International Mobile Subscriber Identity B350 or later
     61          //------------|-----------------------------------------------------|
     62          // AT+CGDCONT | Define a PDP Context B350 or later
     63          //------------|-----------------------------------------------------|
     64          // AT+CFUN    | Set Phone Functionality B350 or later
     65          //------------|-----------------------------------------------------|
     66          // AT+CMEE    | Report Mobile Termination Error B600 or later
     67          //------------|-----------------------------------------------------|
     68          // AT+CCLK    | Return Current Date & Time B656 or later
     69          //------------|-----------------------------------------------------|
     70          // AT+CPSMS   | Power Saving Mode Setting B657SP1 or later
     71          //------------|-----------------------------------------------------|
     72          // AT+CEDRXS  | eDRX Setting B657SP1 or later
     73          //------------|-----------------------------------------------------|
     74          // AT+CEER    | Extended Error Report B657SP1 or later
     75          //------------|-----------------------------------------------------|
     76          // AT+CEDRXRDP| eDRX Read Dynamic Parameters B657SP1 or later
     77          //------------|-----------------------------------------------------|
     78          // AT+CTZR    | Time Zone Reporting B657SP1 or later
     79          //------------|-----------------------------------------------------|
     80          
     81          /*   ETSI Commands* (127.005)  <Under development> */
     82          //------------|-----------------------------------------------------|
     83          // AT+CSMS    | Select Message Service B657SP1 or later
     84          //------------|-----------------------------------------------------|
     85          // AT+CNMA    | New Message Acknowledgement to ME/TA B657SP1 or later
     86          //------------|-----------------------------------------------------|
     87          // AT+CSCA    | Service Centre Address B657SP1 or later
     88          //------------|-----------------------------------------------------|
     89          // AT+CMGS    | Send SMS Message B657SP1 or later
     90          //------------|-----------------------------------------------------|
     91          // AT+CMGC    | Send SMS Command B657SP1 or later
     92          //------------|-----------------------------------------------------|
     93          // AT+CSODCP  | Sending of Originating Data via the Control Plane B657SP1 or later
     94          //------------|-----------------------------------------------------|
     95          // AT+CRTDCP  | Reporting of Terminating Data via the Control Plane
     96          //------------|-----------------------------------------------------|
     97          
     98          /*   General Commands  */
     99          //--------------|-----------------------------------------------------|
    100          // AT+NMGS      | Send a Message B350 or later
    101          //--------------|-----------------------------------------------------|
    102          // AT+NMGR      | Get a Message B350 or later
    103          //--------------|-----------------------------------------------------|
    104          // AT+NNMI      | New Message Indications B350 or later
    105          //--------------|-----------------------------------------------------|
    106          // AT+NSMI      | Sent message Indications B350 or later
    107          //--------------|-----------------------------------------------------|
    108          // AT+NQMGR     | Query Messages Received B350 or later
    109          //--------------|-----------------------------------------------------|
    110          // AT+NQMGS     | Query Messages Sent B350 or later
    111          //--------------|-----------------------------------------------------|
    112          // AT+NMSTATUS  | Message Registration Status B657SP1 or later
    113          //--------------|-----------------------------------------------------|
    114          // AT+NRB       | Reboot B350 or later
    115          //--------------|-----------------------------------------------------|
    116          // AT+NCDP      | Configure and Query CDP Server Settings B350 or later
    117          //--------------|-----------------------------------------------------|
    118          // AT+NUESTATS  | Query UE Statistics B350 or later
    119          //--------------|-----------------------------------------------------|
    120          // AT+NEARFCN   | Specify Search Frequencies B350 or later
    121          //--------------|-----------------------------------------------------|
    122          // AT+NSOCR     | Create a Socket B350 or later
    123          //--------------|-----------------------------------------------------|
    124          // AT+NSOST     | SendTo Command (UDP Only) B350 or later
    125          //--------------|-----------------------------------------------------|
    126          // AT+NSOSTF    | SendTo Command with Flags (UDP Only) B656 or later
    127          //--------------|-----------------------------------------------------|
    128          // AT+NSORF     | Receive Command (UDP only) B350 or later
    129          //--------------|-----------------------------------------------------|
    130          // AT+NSOCL     | Close a Socket B350 or later
    131          //--------------|-----------------------------------------------------|
    132          // +NSONMI      | Socket Message Arrived Indicator (Response Only) B350 or later
    133          //--------------|-----------------------------------------------------|
    134          // AT+NPING     | Test IP Network Connectivity to a Remote Host B350 or later
    135          //--------------|-----------------------------------------------------|
    136          // AT+NBAND     | Set Supported Bands B600 or later
    137          //--------------|-----------------------------------------------------|
    138          // AT+NLOGLEVEL | Set Debug Logging Level B600 or later
    139          //--------------|-----------------------------------------------------|
    140          // AT+NCONFIG   | Configure UE Behaviour B650 or later
    141          //--------------|-----------------------------------------------------|
    142          // AT+NATSPEED  | Configure UART Port Baud Rate B656 or later
    143          //--------------|-----------------------------------------------------|
    144          // AT+NCCID     | Card Identification B657SP1 or later
    145          //--------------|-----------------------------------------------------|
    146          // AT+NFWUPD    | Firmware Update via UART B657SP1 or later
    147          //--------------|-----------------------------------------------------|
    148          // AT+NRDCTRL   | Control Radio Configurations B657SP1 or later
    149          //--------------|-----------------------------------------------------|
    150          // AT+NCHIPINFO | Read System Information B657SP1 or later
    151          //--------------|-----------------------------------------------------|
    152            
    153          /*  Temporary Commands     */
    154          //--------------|-----------------------------------------------------|
    155          // AT+NTSETID   | Set ID B350 or later
    156          //--------------|-----------------------------------------------------|
    157          
    158          /* NB模块操作结构体 */
    159          static ST_NB_OPERAION st_nb_operation = {0};
    160          
    161          /**
    162            * @brief  NBIOT任务
    163           */

   \                                 In section .text, align 2, keep-with-next
    164          void App_NBIOT_TASK(void)
    165          {
   \                     App_NBIOT_TASK: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    166          	u8 err;
    167          	OS_TMR  *NBSystickTmr; 												/* 软件定时器 */ 
    168              NBSystickTmr = OSTmrCreate(0, 500, OS_TMR_OPT_PERIODIC, 
    169          								(OS_TMR_CALLBACK)NBSystickTmr_callback, /* 定时器回调函数 */
    170          								0, "NBSystickTmr", &err);				/* 500ms执行一次 */
   \   00000004   0xA803             ADD      R0,SP,#+12
   \   00000006   0x9002             STR      R0,[SP, #+8]
   \   00000008   0x.... 0x....      ADR.W    R0,?_0
   \   0000000C   0x9001             STR      R0,[SP, #+4]
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x9000             STR      R0,[SP, #+0]
   \   00000012   0x.... 0x....      ADR.W    R3,NBSystickTmr_callback
   \   00000016   0x2202             MOVS     R2,#+2
   \   00000018   0xF44F 0x71FA      MOV      R1,#+500
   \   0000001C   0x.... 0x....      BL       OSTmrCreate
    171              OSTmrStart(NBSystickTmr, &err);										/* 启动软件定时器 */
   \   00000020   0xA903             ADD      R1,SP,#+12
   \   00000022   0x.... 0x....      BL       OSTmrStart
    172          	NBIOT_MODULE_INIT(&st_nb_operation);								/* NB_IOT模块初始化 */
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable42
   \   0000002A   0x.... 0x....      BL       NBIOT_MODULE_INIT
    173          	debug_printf("[%s] enter.\r\n", __func__ );
   \   0000002E   0x.... 0x....      ADR.W    R1,??__func__
   \   00000032   0x.... 0x....      ADR.W    R0,?_1
   \   00000036   0x.... 0x....      BL       debug_printf
    174          	while(1)
    175          	{
    176          		//NBIOT_MODULE_PROCESS(&st_nb_operation);							/* NB_IOT模块处理 */
    177          		//OSTimeDlyHMSM(0, 0, 0, 1);  									/* 调用延时函数释放CPU控制权 */ 
    178          		
    179          		NBIOT_send_cmd("+++", 0);
   \                     ??App_NBIOT_TASK_0: (+1)
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0x....             ADR.N    R0,??DataTable41  ;; "+++"
   \   0000003E   0x.... 0x....      BL       NBIOT_send_cmd
    180          		OSTimeDlyHMSM(0, 0, 5, 0);  		
   \   00000042   0x2300             MOVS     R3,#+0
   \   00000044   0x2205             MOVS     R2,#+5
   \   00000046   0x4619             MOV      R1,R3
   \   00000048   0x4608             MOV      R0,R1
   \   0000004A   0x.... 0x....      BL       OSTimeDlyHMSM
   \   0000004E   0xE7F4             B.N      ??App_NBIOT_TASK_0
    181          	}
    182          }
    183          
    184          
    185          /**
    186            * @brief 向NB发送命令
    187           */

   \                                 In section .text, align 2, keep-with-next
    188          u8 NBIOT_send_cmd(char* ucCMD, u16 waittime)
    189          {
   \                     NBIOT_send_cmd: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x460C             MOV      R4,R1
    190          	NBiotDMA_Send_Data((char *)ucCMD);
   \   00000004   0x.... 0x....      BL       NBiotDMA_Send_Data
    191          	OSTimeDlyHMSM(0, 0, 0, waittime);
   \   00000008   0x4623             MOV      R3,R4
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x4611             MOV      R1,R2
   \   0000000E   0x4608             MOV      R0,R1
   \   00000010   0x.... 0x....      BL       OSTimeDlyHMSM
    192              return 0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    193          }
    194          
    195          /**
    196            * @brief NB处理状态函数
    197           */

   \                                 In section .text, align 2, keep-with-next
    198          u8 NBIOT_MODULE_PROCESS(PST_NB_OPERATION pst_nb_operation)
    199          {
   \                     NBIOT_MODULE_PROCESS: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    200          	if(pst_nb_operation != NULL)
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD00B             BEQ.N    ??NBIOT_MODULE_PROCESS_0
    201          	{
    202          		if(EN_NBPROCESS_IDLE == pst_nb_operation->CurProcState)			/* 模块空闲 */
   \   00000006   0x7981             LDRB     R1,[R0, #+6]
   \   00000008   0x2904             CMP      R1,#+4
   \   0000000A   0xD008             BEQ.N    ??NBIOT_MODULE_PROCESS_0
    203          		{
    204          			/* TODO SOMETHINGS */
    205          		}
    206          		else if(EN_NBPROCESS_OPEN == pst_nb_operation->CurProcState)	/* NB_IOT模块打开流程 */
   \   0000000C   0x2901             CMP      R1,#+1
   \   0000000E   0xD102             BNE.N    ??NBIOT_MODULE_PROCESS_1
    207          		{
    208          			NBIOT_MODULE_OPEN(pst_nb_operation);
   \   00000010   0x.... 0x....      BL       NBIOT_MODULE_OPEN
   \   00000014   0xE003             B.N      ??NBIOT_MODULE_PROCESS_0
    209          		}
    210          		else if(EN_NBPROCESS_HANDLE == pst_nb_operation->CurProcState)	/* NB_IOT模块处理流程 */
   \                     ??NBIOT_MODULE_PROCESS_1: (+1)
   \   00000016   0x2902             CMP      R1,#+2
   \   00000018   0xD101             BNE.N    ??NBIOT_MODULE_PROCESS_0
    211          		{
    212          			NBIOT_MODULE_HANDLE(pst_nb_operation);						/* TODO SOMETHINGS */
   \   0000001A   0x.... 0x....      BL       NBIOT_MODULE_HANDLE
    213          		}
    214          	}
    215              return 0;
   \                     ??NBIOT_MODULE_PROCESS_0: (+1)
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xBD02             POP      {R1,PC}          ;; return
    216          }
    217          
    218          /**
    219            * @brief NB操作初始化
    220           */

   \                                 In section .text, align 2, keep-with-next
    221          static u8 NBIOT_MODULE_INIT(PST_NB_OPERATION pst_nb_operation)
    222          {
    223          	pst_nb_operation->CurProcState = EN_NBPROCESS_OPEN;		/* 打开状态 */
   \                     NBIOT_MODULE_INIT: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0x7181             STRB     R1,[R0, #+6]
    224          	pst_nb_operation->CurOperateState = EN_NBOPEN_NCFG;		/* 首先重启模块 */
   \   00000004   0x2102             MOVS     R1,#+2
   \   00000006   0x7201             STRB     R1,[R0, #+8]
    225          	pst_nb_operation->WAIT_TIME = 1000;						/* 延迟时间 */
   \   00000008   0xF44F 0x717A      MOV      R1,#+1000
   \   0000000C   0x60C1             STR      R1,[R0, #+12]
    226              return 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x4770             BX       LR               ;; return
    227          }
    228          
    229          /**
    230            * @brief NB操作打开
    231           */

   \                                 In section .text, align 2, keep-with-next
    232          u8 NBIOT_MODULE_OPEN(PST_NB_OPERATION pst_nb_operation)
    233          {
   \                     NBIOT_MODULE_OPEN: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    234          	if(pst_nb_operation != NULL)
   \   00000004   0xD012             BEQ.N    ??NBIOT_MODULE_OPEN_0
    235          	{
    236          		/* 设置手动入网 */
    237          		if(EN_NBOPEN_NCFG == pst_nb_operation->CurOperateState)
   \   00000006   0x7A20             LDRB     R0,[R4, #+8]
   \   00000008   0x4601             MOV      R1,R0
   \   0000000A   0x2902             CMP      R1,#+2
   \   0000000C   0xD110             BNE.N    ??NBIOT_MODULE_OPEN_1
    238          		{
    239          			pst_nb_operation->CurCMD = "AT+NCONFIG=AUTOCONNECT,FALSE\r\n";
   \   0000000E   0x.... 0x....      ADR.W    R0,?_3
   \   00000012   0x6020             STR      R0,[R4, #+0]
    240          			pst_nb_operation->ExpectRcv = "OK";
   \   00000014   0x....             ADR.N    R0,??DataTable41_1  ;; 0x4F, 0x4B, 0x00, 0x00
   \   00000016   0x6160             STR      R0,[R4, #+20]
    241          			NBIOT_send_cmd((char *)pst_nb_operation->CurCMD, pst_nb_operation->WAIT_TIME);
   \   00000018   0x68E1             LDR      R1,[R4, #+12]
   \   0000001A   0xB289             UXTH     R1,R1
   \   0000001C   0x6820             LDR      R0,[R4, #+0]
   \   0000001E   0x.... 0x....      BL       NBIOT_send_cmd
    242          			SetNB_OperatStrState(pst_nb_operation, EN_NBOPEN_IDLE, EN_NBOPEN_CFGIP);
   \   00000022   0x220E             MOVS     R2,#+14
   \   00000024   0x2100             MOVS     R1,#+0
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0x.... 0x....      BL       SetNB_OperatStrState
    243          		}
    244          		/* 配置华为OC平台IP地址 */
    245          		else if(EN_NBOPEN_CFGIP == pst_nb_operation->CurOperateState)
    246          		{
    247          			pst_nb_operation->CurCMD = SENDCOAPIP;
    248          			pst_nb_operation->ExpectRcv = "OK";
    249          			NBIOT_send_cmd((char *)pst_nb_operation->CurCMD, pst_nb_operation->WAIT_TIME);
    250          			SetNB_OperatStrState(pst_nb_operation, EN_NBOPEN_IDLE, EN_NBOPEN_REBOOT);	
    251          		}
    252          		/* 重启模块 */
    253          		else if(EN_NBOPEN_REBOOT == pst_nb_operation->CurOperateState)
    254          		{
    255          			pst_nb_operation->CurCMD = "AT+NRB\r\n";
    256          			pst_nb_operation->ExpectRcv = "OK";
    257          			NBIOT_send_cmd((char *)pst_nb_operation->CurCMD, pst_nb_operation->WAIT_TIME);
    258          			SetNB_OperatStrState(pst_nb_operation, EN_NBOPEN_IDLE, EN_NBOPEN_CFUN1);
    259          		}
    260          #if 0
    261          		/* AT测试指令 */
    262          		else if(EN_NBOPEN_AT == pst_nb_operation->CurOperateState)
    263          		{
    264          			pst_nb_operation->CurCMD = "AT\r\n";
    265          			pst_nb_operation->ExpectRcv = "OK";
    266          			NBIOT_send_cmd(pst_nb_operation->CurCMD, pst_nb_operation->WAIT_TIME);
    267          			SetNB_OperatStrState(pst_nb_operation, EN_NBOPEN_IDLE, EN_NBOPEN_CMEE);
    268          		}
    269          		/* 禁用报告错误使用ERROR代替 */
    270          		else if(EN_NBOPEN_CMEE == pst_nb_operation->CurOperateState)
    271          		{
    272          			pst_nb_operation->CurCMD = "AT+CMEE=1\r\n";
    273          			pst_nb_operation->ExpectRcv = "OK";
    274          			NBIOT_send_cmd(pst_nb_operation->CurCMD, pst_nb_operation->WAIT_TIME);
    275          			SetNB_OperatStrState(pst_nb_operation, EN_NBOPEN_IDLE, EN_NBOPEN_CGSN);	
    276          		}
    277          		/* 获取设备IMEI码 */
    278          		else if(EN_NBOPEN_CGSN == pst_nb_operation->CurOperateState)
    279          		{
    280          			pst_nb_operation->CurCMD = "AT+CGSN=1\r\n";
    281          			pst_nb_operation->ExpectRcv = "OK";
    282          			NBIOT_send_cmd(pst_nb_operation->CurCMD, pst_nb_operation->WAIT_TIME);
    283          			SetNB_OperatStrState(pst_nb_operation, EN_NBOPEN_IDLE, EN_NBOPEN_CGMI);
    284          		}
    285          		/* 获取设备CGMI */
    286          		else if(EN_NBOPEN_CGMI == pst_nb_operation->CurOperateState)
    287          		{
    288          			pst_nb_operation->CurCMD = "AT+CGMI\r\n";
    289          			pst_nb_operation->ExpectRcv = "OK";
    290          			NBIOT_send_cmd(pst_nb_operation->CurCMD, pst_nb_operation->WAIT_TIME);
    291          			SetNB_OperatStrState(pst_nb_operation, EN_NBOPEN_IDLE, EN_NBOPEN_CGMM);
    292          		}
    293          		/* CIMI测试指令 */
    294          		else if(EN_NBOPEN_CGMM == pst_nb_operation->CurOperateState)
    295          		{
    296          			pst_nb_operation->CurCMD = "AT+CGMM\r\n";
    297          			pst_nb_operation->ExpectRcv = "OK";
    298          			NBIOT_send_cmd(pst_nb_operation->CurCMD, pst_nb_operation->WAIT_TIME);
    299          			SetNB_OperatStrState(pst_nb_operation, EN_NBOPEN_IDLE, EN_NBOPEN_CFUN1);
    300          		}
    301          
    302          #if 0
    303          		/* 配置IP前需要关闭模块功能 */
    304          		else if(EN_NBOPEN_CFUN0 == pst_nb_operation->CurOperateState)
    305          		{
    306          			pst_nb_operation->CurCMD = "AT+CFUN=0\r\n";
    307          			pst_nb_operation->ExpectRcv = "OK";
    308          			NBIOT_send_cmd(pst_nb_operation->CurCMD, pst_nb_operation->WAIT_TIME);
    309          			SetNB_OperatStrState(pst_nb_operation, EN_NBOPEN_IDLE, EN_NBOPEN_CFGIP);
    310          		}
    311          #endif
    312          
    313          #endif
    314          		/* 打开最大模块功能 */
    315          		else if(EN_NBOPEN_CFUN1 == pst_nb_operation->CurOperateState)
    316          		{
    317          			pst_nb_operation->CurCMD = "AT+CFUN=1\r\n";
    318          			pst_nb_operation->ExpectRcv = "OK";
    319          			NBIOT_send_cmd((char *)pst_nb_operation->CurCMD, pst_nb_operation->WAIT_TIME);
    320          			SetNB_OperatStrState(pst_nb_operation, EN_NBOPEN_IDLE, EN_NBOPEN_CIMI);
    321          		}
    322          		/* CIMI测试指令 */
    323          		else if(EN_NBOPEN_CIMI == pst_nb_operation->CurOperateState)
    324          		{
    325          			pst_nb_operation->CurCMD = "AT+CIMI\r\n";
    326          			pst_nb_operation->ExpectRcv = "OK";
    327          			NBIOT_send_cmd((char *)pst_nb_operation->CurCMD, pst_nb_operation->WAIT_TIME);
    328          			SetNB_OperatStrState(pst_nb_operation, EN_NBOPEN_IDLE, EN_NBOPEN_eDRX0);
    329          		}
    330          		/* 关闭eDRX */
    331          		else if(EN_NBOPEN_eDRX0 == pst_nb_operation->CurOperateState)
    332          		{
    333          			pst_nb_operation->CurCMD = "AT+CEDRXS=0,5\r\n";
    334          			pst_nb_operation->ExpectRcv = "OK";
    335          			NBIOT_send_cmd((char *)pst_nb_operation->CurCMD, pst_nb_operation->WAIT_TIME);
    336          			SetNB_OperatStrState(pst_nb_operation, EN_NBOPEN_IDLE, EN_NBOPEN_CPSMS0);
    337          		}	
    338          		/* 关闭默认睡眠设置 */
    339          		else if(EN_NBOPEN_CPSMS0 == pst_nb_operation->CurOperateState)
    340          		{
    341          			pst_nb_operation->CurCMD = "AT+CPSMS=0\r\n";
    342          			pst_nb_operation->ExpectRcv = "OK";
    343          			NBIOT_send_cmd((char *)pst_nb_operation->CurCMD, pst_nb_operation->WAIT_TIME);
    344          			SetNB_OperatStrState(pst_nb_operation, EN_NBOPEN_IDLE, EN_NBOPEN_NNMI1);
    345          		}
    346          		/* 自动接收消息 */
    347          		else if(EN_NBOPEN_NNMI1 == pst_nb_operation->CurOperateState)
    348          		{
    349          			pst_nb_operation->CurCMD = "AT+NNMI=1\r\n";
    350          			pst_nb_operation->ExpectRcv = "OK";
    351          			NBIOT_send_cmd((char *)pst_nb_operation->CurCMD, pst_nb_operation->WAIT_TIME);
    352          			SetNB_OperatStrState(pst_nb_operation, EN_NBOPEN_IDLE, EN_NBOPEN_NSMI1);
    353          		}
    354          		/* 打开发送开关 */
    355          		else if(EN_NBOPEN_NSMI1 == pst_nb_operation->CurOperateState)
    356          		{
    357          			pst_nb_operation->CurCMD = "AT+NSMI=1\r\n";
    358          			pst_nb_operation->ExpectRcv = "OK";
    359          			NBIOT_send_cmd((char *)pst_nb_operation->CurCMD, pst_nb_operation->WAIT_TIME);
    360          			SetNB_OperatStrState(pst_nb_operation, EN_NBOPEN_IDLE, EN_NBOPEN_CGATT1);
    361          		}
    362          		/* 打开网络附着 */
    363          		else if(EN_NBOPEN_CGATT1 == pst_nb_operation->CurOperateState)
    364          		{
    365          			pst_nb_operation->CurCMD = "AT+CGATT=1\r\n";
    366          			pst_nb_operation->ExpectRcv = "OK";
    367          			NBIOT_send_cmd((char *)pst_nb_operation->CurCMD, pst_nb_operation->WAIT_TIME);
    368          			SetNB_OperatStrState(pst_nb_operation, EN_NBOPEN_IDLE, EN_NBOPEN_CEREG1);
    369          		}
    370          		/* 使能网络注册 */
    371          		else if(EN_NBOPEN_CEREG1 == pst_nb_operation->CurOperateState)
    372          		{
    373          			pst_nb_operation->CurCMD = "AT+CEREG=1\r\n";
    374          			pst_nb_operation->ExpectRcv = "OK";
    375          			NBIOT_send_cmd((char *)pst_nb_operation->CurCMD, pst_nb_operation->WAIT_TIME);
    376          			SetNB_OperatStrState(pst_nb_operation, EN_NBOPEN_IDLE, EN_NBOPEN_END);
    377          		}
    378          		/* 结束状态 */
    379          		else if(EN_NBOPEN_END == pst_nb_operation->CurOperateState)
    380          		{
    381          			/* 设置NB操作结构体处理状态 */
    382          			debug_printf("EN_NBOPEN_END is END\r\n");
    383          			SetNB_ProceStrState(pst_nb_operation, EN_NBPROCESS_HANDLE, EN_NBPROCESS_IDLE);
    384          			pst_nb_operation->NBTick_Flag = ENABLE_NBIOT_Tick;		/* 使能定时发送 */
    385          		}
    386          		/* 空闲等待接收NB-IOT模块回应 */
    387          		else if(EN_NBOPEN_IDLE == pst_nb_operation->CurOperateState)
    388          		{
    389          			/* 跳出状态循环，等待接收NB_IOT模块的回应 */
    390          			NBIOT_MODULE_WAITRX(pst_nb_operation);
    391          			return 0;
    392          		}
    393          		/* 空闲等待接收NB-IOT模块回应 */
    394          		else if(EN_NBOPEN_ERROR == pst_nb_operation->CurOperateState)
    395          		{
    396          			/* TODO：错误状态下发送错误码到串口 */
    397          			
    398          			return 0;
    399          		}
    400          	}
    401              return 0;
   \                     ??NBIOT_MODULE_OPEN_0: (+1)
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
   \                     ??NBIOT_MODULE_OPEN_1: (+1)
   \   00000030   0x290E             CMP      R1,#+14
   \   00000032   0xD10F             BNE.N    ??NBIOT_MODULE_OPEN_2
   \   00000034   0x.... 0x....      ADR.W    R0,?_5
   \   00000038   0x6020             STR      R0,[R4, #+0]
   \   0000003A   0x....             ADR.N    R0,??DataTable41_1  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000003C   0x6160             STR      R0,[R4, #+20]
   \   0000003E   0x68E1             LDR      R1,[R4, #+12]
   \   00000040   0xB289             UXTH     R1,R1
   \   00000042   0x6820             LDR      R0,[R4, #+0]
   \   00000044   0x.... 0x....      BL       NBIOT_send_cmd
   \   00000048   0x2201             MOVS     R2,#+1
   \   0000004A   0x2100             MOVS     R1,#+0
   \   0000004C   0x4620             MOV      R0,R4
   \   0000004E   0x.... 0x....      BL       SetNB_OperatStrState
   \   00000052   0xE7EB             B.N      ??NBIOT_MODULE_OPEN_0
   \                     ??NBIOT_MODULE_OPEN_2: (+1)
   \   00000054   0x2901             CMP      R1,#+1
   \   00000056   0xD10F             BNE.N    ??NBIOT_MODULE_OPEN_3
   \   00000058   0x.... 0x....      ADR.W    R0,?_6
   \   0000005C   0x6020             STR      R0,[R4, #+0]
   \   0000005E   0x....             ADR.N    R0,??DataTable41_1  ;; 0x4F, 0x4B, 0x00, 0x00
   \   00000060   0x6160             STR      R0,[R4, #+20]
   \   00000062   0x68E1             LDR      R1,[R4, #+12]
   \   00000064   0xB289             UXTH     R1,R1
   \   00000066   0x6820             LDR      R0,[R4, #+0]
   \   00000068   0x.... 0x....      BL       NBIOT_send_cmd
   \   0000006C   0x220D             MOVS     R2,#+13
   \   0000006E   0x2100             MOVS     R1,#+0
   \   00000070   0x4620             MOV      R0,R4
   \   00000072   0x.... 0x....      BL       SetNB_OperatStrState
   \   00000076   0xE7D9             B.N      ??NBIOT_MODULE_OPEN_0
   \                     ??NBIOT_MODULE_OPEN_3: (+1)
   \   00000078   0x290D             CMP      R1,#+13
   \   0000007A   0xD10F             BNE.N    ??NBIOT_MODULE_OPEN_4
   \   0000007C   0x.... 0x....      ADR.W    R0,?_7
   \   00000080   0x6020             STR      R0,[R4, #+0]
   \   00000082   0x....             ADR.N    R0,??DataTable41_1  ;; 0x4F, 0x4B, 0x00, 0x00
   \   00000084   0x6160             STR      R0,[R4, #+20]
   \   00000086   0x68E1             LDR      R1,[R4, #+12]
   \   00000088   0xB289             UXTH     R1,R1
   \   0000008A   0x6820             LDR      R0,[R4, #+0]
   \   0000008C   0x.... 0x....      BL       NBIOT_send_cmd
   \   00000090   0x2209             MOVS     R2,#+9
   \   00000092   0x2100             MOVS     R1,#+0
   \   00000094   0x4620             MOV      R0,R4
   \   00000096   0x.... 0x....      BL       SetNB_OperatStrState
   \   0000009A   0xE7C7             B.N      ??NBIOT_MODULE_OPEN_0
   \                     ??NBIOT_MODULE_OPEN_4: (+1)
   \   0000009C   0x2909             CMP      R1,#+9
   \   0000009E   0xD10F             BNE.N    ??NBIOT_MODULE_OPEN_5
   \   000000A0   0x.... 0x....      ADR.W    R0,?_8
   \   000000A4   0x6020             STR      R0,[R4, #+0]
   \   000000A6   0x....             ADR.N    R0,??DataTable41_1  ;; 0x4F, 0x4B, 0x00, 0x00
   \   000000A8   0x6160             STR      R0,[R4, #+20]
   \   000000AA   0x68E1             LDR      R1,[R4, #+12]
   \   000000AC   0xB289             UXTH     R1,R1
   \   000000AE   0x6820             LDR      R0,[R4, #+0]
   \   000000B0   0x.... 0x....      BL       NBIOT_send_cmd
   \   000000B4   0x2210             MOVS     R2,#+16
   \   000000B6   0x2100             MOVS     R1,#+0
   \   000000B8   0x4620             MOV      R0,R4
   \   000000BA   0x.... 0x....      BL       SetNB_OperatStrState
   \   000000BE   0xE7B5             B.N      ??NBIOT_MODULE_OPEN_0
   \                     ??NBIOT_MODULE_OPEN_5: (+1)
   \   000000C0   0x2910             CMP      R1,#+16
   \   000000C2   0xD10F             BNE.N    ??NBIOT_MODULE_OPEN_6
   \   000000C4   0x.... 0x....      ADR.W    R0,?_9
   \   000000C8   0x6020             STR      R0,[R4, #+0]
   \   000000CA   0x....             ADR.N    R0,??DataTable41_1  ;; 0x4F, 0x4B, 0x00, 0x00
   \   000000CC   0x6160             STR      R0,[R4, #+20]
   \   000000CE   0x68E1             LDR      R1,[R4, #+12]
   \   000000D0   0xB289             UXTH     R1,R1
   \   000000D2   0x6820             LDR      R0,[R4, #+0]
   \   000000D4   0x.... 0x....      BL       NBIOT_send_cmd
   \   000000D8   0x220F             MOVS     R2,#+15
   \   000000DA   0x2100             MOVS     R1,#+0
   \   000000DC   0x4620             MOV      R0,R4
   \   000000DE   0x.... 0x....      BL       SetNB_OperatStrState
   \   000000E2   0xE7A3             B.N      ??NBIOT_MODULE_OPEN_0
   \                     ??NBIOT_MODULE_OPEN_6: (+1)
   \   000000E4   0x290F             CMP      R1,#+15
   \   000000E6   0xD10F             BNE.N    ??NBIOT_MODULE_OPEN_7
   \   000000E8   0x.... 0x....      ADR.W    R0,?_10
   \   000000EC   0x6020             STR      R0,[R4, #+0]
   \   000000EE   0x....             ADR.N    R0,??DataTable41_1  ;; 0x4F, 0x4B, 0x00, 0x00
   \   000000F0   0x6160             STR      R0,[R4, #+20]
   \   000000F2   0x68E1             LDR      R1,[R4, #+12]
   \   000000F4   0xB289             UXTH     R1,R1
   \   000000F6   0x6820             LDR      R0,[R4, #+0]
   \   000000F8   0x.... 0x....      BL       NBIOT_send_cmd
   \   000000FC   0x2211             MOVS     R2,#+17
   \   000000FE   0x2100             MOVS     R1,#+0
   \   00000100   0x4620             MOV      R0,R4
   \   00000102   0x.... 0x....      BL       SetNB_OperatStrState
   \   00000106   0xE791             B.N      ??NBIOT_MODULE_OPEN_0
   \                     ??NBIOT_MODULE_OPEN_7: (+1)
   \   00000108   0x2911             CMP      R1,#+17
   \   0000010A   0xD10F             BNE.N    ??NBIOT_MODULE_OPEN_8
   \   0000010C   0x.... 0x....      ADR.W    R0,?_11
   \   00000110   0x6020             STR      R0,[R4, #+0]
   \   00000112   0x....             ADR.N    R0,??DataTable41_1  ;; 0x4F, 0x4B, 0x00, 0x00
   \   00000114   0x6160             STR      R0,[R4, #+20]
   \   00000116   0x68E1             LDR      R1,[R4, #+12]
   \   00000118   0xB289             UXTH     R1,R1
   \   0000011A   0x6820             LDR      R0,[R4, #+0]
   \   0000011C   0x.... 0x....      BL       NBIOT_send_cmd
   \   00000120   0x2212             MOVS     R2,#+18
   \   00000122   0x2100             MOVS     R1,#+0
   \   00000124   0x4620             MOV      R0,R4
   \   00000126   0x.... 0x....      BL       SetNB_OperatStrState
   \   0000012A   0xE77F             B.N      ??NBIOT_MODULE_OPEN_0
   \                     ??NBIOT_MODULE_OPEN_8: (+1)
   \   0000012C   0x2912             CMP      R1,#+18
   \   0000012E   0xD10F             BNE.N    ??NBIOT_MODULE_OPEN_9
   \   00000130   0x.... 0x....      ADR.W    R0,?_12
   \   00000134   0x6020             STR      R0,[R4, #+0]
   \   00000136   0x....             ADR.N    R0,??DataTable41_1  ;; 0x4F, 0x4B, 0x00, 0x00
   \   00000138   0x6160             STR      R0,[R4, #+20]
   \   0000013A   0x68E1             LDR      R1,[R4, #+12]
   \   0000013C   0xB289             UXTH     R1,R1
   \   0000013E   0x6820             LDR      R0,[R4, #+0]
   \   00000140   0x.... 0x....      BL       NBIOT_send_cmd
   \   00000144   0x2213             MOVS     R2,#+19
   \   00000146   0x2100             MOVS     R1,#+0
   \   00000148   0x4620             MOV      R0,R4
   \   0000014A   0x.... 0x....      BL       SetNB_OperatStrState
   \   0000014E   0xE76D             B.N      ??NBIOT_MODULE_OPEN_0
   \                     ??NBIOT_MODULE_OPEN_9: (+1)
   \   00000150   0x2913             CMP      R1,#+19
   \   00000152   0xD10F             BNE.N    ??NBIOT_MODULE_OPEN_10
   \   00000154   0x.... 0x....      ADR.W    R0,?_13
   \   00000158   0x6020             STR      R0,[R4, #+0]
   \   0000015A   0x....             ADR.N    R0,??DataTable41_1  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000015C   0x6160             STR      R0,[R4, #+20]
   \   0000015E   0x68E1             LDR      R1,[R4, #+12]
   \   00000160   0xB289             UXTH     R1,R1
   \   00000162   0x6820             LDR      R0,[R4, #+0]
   \   00000164   0x.... 0x....      BL       NBIOT_send_cmd
   \   00000168   0x220A             MOVS     R2,#+10
   \   0000016A   0x2100             MOVS     R1,#+0
   \   0000016C   0x4620             MOV      R0,R4
   \   0000016E   0x.... 0x....      BL       SetNB_OperatStrState
   \   00000172   0xE75B             B.N      ??NBIOT_MODULE_OPEN_0
   \                     ??NBIOT_MODULE_OPEN_10: (+1)
   \   00000174   0x290A             CMP      R1,#+10
   \   00000176   0xD10F             BNE.N    ??NBIOT_MODULE_OPEN_11
   \   00000178   0x.... 0x....      ADR.W    R0,?_14
   \   0000017C   0x6020             STR      R0,[R4, #+0]
   \   0000017E   0x....             ADR.N    R0,??DataTable41_1  ;; 0x4F, 0x4B, 0x00, 0x00
   \   00000180   0x6160             STR      R0,[R4, #+20]
   \   00000182   0x68E1             LDR      R1,[R4, #+12]
   \   00000184   0xB289             UXTH     R1,R1
   \   00000186   0x6820             LDR      R0,[R4, #+0]
   \   00000188   0x.... 0x....      BL       NBIOT_send_cmd
   \   0000018C   0x2216             MOVS     R2,#+22
   \   0000018E   0x2100             MOVS     R1,#+0
   \   00000190   0x4620             MOV      R0,R4
   \   00000192   0x.... 0x....      BL       SetNB_OperatStrState
   \   00000196   0xE749             B.N      ??NBIOT_MODULE_OPEN_0
   \                     ??NBIOT_MODULE_OPEN_11: (+1)
   \   00000198   0x2916             CMP      R1,#+22
   \   0000019A   0xD10B             BNE.N    ??NBIOT_MODULE_OPEN_12
   \   0000019C   0x.... 0x....      ADR.W    R0,?_15
   \   000001A0   0x.... 0x....      BL       debug_printf
   \   000001A4   0x2204             MOVS     R2,#+4
   \   000001A6   0x2102             MOVS     R1,#+2
   \   000001A8   0x4620             MOV      R0,R4
   \   000001AA   0x.... 0x....      BL       SetNB_ProceStrState
   \   000001AE   0x2001             MOVS     R0,#+1
   \   000001B0   0x7420             STRB     R0,[R4, #+16]
   \   000001B2   0xE73B             B.N      ??NBIOT_MODULE_OPEN_0
   \                     ??NBIOT_MODULE_OPEN_12: (+1)
   \   000001B4   0x2800             CMP      R0,#+0
   \   000001B6   0xF47F 0xAF39      BNE.W    ??NBIOT_MODULE_OPEN_0
   \   000001BA   0x4620             MOV      R0,R4
   \   000001BC   0x.... 0x....      BL       NBIOT_MODULE_WAITRX
   \   000001C0   0x2000             MOVS     R0,#+0
   \   000001C2   0xBD10             POP      {R4,PC}
    402          }
    403          
    404          /**
    405            * @brief NB模块处理
    406           */

   \                                 In section .text, align 2, keep-with-next
    407          static u8 NBIOT_MODULE_HANDLE(PST_NB_OPERATION pst_nb_operation)
    408          {
   \                     NBIOT_MODULE_HANDLE: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB0CB             SUB      SP,SP,#+300
    409          	char Tempbuf[300] = {0};						/* 缓冲接收buf */
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0xF44F 0x7196      MOV      R1,#+300
   \   0000000A   0x.... 0x....      BL       __aeabi_memclr4
    410          	if(NBUartRecvData((u8 *)Tempbuf) > 0)			/* 一直检查平台接收 */
   \   0000000E   0xA800             ADD      R0,SP,#+0
   \   00000010   0x.... 0x....      BL       NBUartRecvData
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD011             BEQ.N    ??NBIOT_MODULE_HANDLE_0
    411          	{
    412          		/* 判断接收的是否是数据 */
    413          		if(strstr(Tempbuf, "+NNMI") != NULL)
   \   00000018   0x.... 0x....      ADR.W    R1,?_17
   \   0000001C   0xA800             ADD      R0,SP,#+0
   \   0000001E   0x.... 0x....      BL       strstr
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD00A             BEQ.N    ??NBIOT_MODULE_HANDLE_0
    414          		{
    415          			/* Test:分析接收的数据并显示 */
    416          			debug_printf("%s\r\n", Tempbuf);
   \   00000026   0xA900             ADD      R1,SP,#+0
   \   00000028   0x.... 0x....      ADR.W    R0,?_18
   \   0000002C   0x.... 0x....      BL       debug_printf
    417          			AnalysisCoapMsg(&NBiotDataPacket, Tempbuf, &NBiotTxdaPacket);				/* 分析接收的COAP数据 */
   \   00000030   0x....             LDR.N    R2,??DataTable42_1
   \   00000032   0xA900             ADD      R1,SP,#+0
   \   00000034   0xF102 0x0050      ADD      R0,R2,#+80
   \   00000038   0x.... 0x....      BL       AnalysisCoapMsg
    418          		}	
    419          	}
    420          	return 0;
   \                     ??NBIOT_MODULE_HANDLE_0: (+1)
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xB04B             ADD      SP,SP,#+300
   \   00000040   0xBD00             POP      {PC}             ;; return
    421          }
    422          
    423          /**
    424            * @brief NB模块等待接收消息
    425           */

   \                                 In section .text, align 2, keep-with-next
    426          static u8 NBIOT_MODULE_WAITRX(PST_NB_OPERATION pst_nb_operation)
    427          {
   \                     NBIOT_MODULE_WAITRX: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB0CB             SUB      SP,SP,#+300
   \   00000004   0x4604             MOV      R4,R0
    428          	static u32 TimeCount = 0;
    429          	char lpbuf[300] = {0};			/* 临时接收的数据存放位置 */
   \   00000006   0xA800             ADD      R0,SP,#+0
   \   00000008   0xF44F 0x7196      MOV      R1,#+300
   \   0000000C   0x.... 0x....      BL       __aeabi_memclr4
    430          	if(++ TimeCount <= 300000)		/* BC35模块官方给出的数据是300s超时时间 */
   \   00000010   0x....             LDR.N    R5,??DataTable42_1
   \   00000012   0x6CE8             LDR      R0,[R5, #+76]
   \   00000014   0x1C40             ADDS     R0,R0,#+1
   \   00000016   0x64E8             STR      R0,[R5, #+76]
   \   00000018   0x....             LDR.N    R1,??DataTable42_2  ;; 0x493e1
   \   0000001A   0x4288             CMP      R0,R1
   \   0000001C   0xD252             BCS.N    ??NBIOT_MODULE_WAITRX_0
    431          	{
    432          		if(NBUartRecvData((u8 *)lpbuf) > 0)
   \   0000001E   0xA800             ADD      R0,SP,#+0
   \   00000020   0x.... 0x....      BL       NBUartRecvData
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD04A             BEQ.N    ??NBIOT_MODULE_WAITRX_1
    433          		{
    434          			/* 判断接收到的数据中是否有期望接收到的数据 */
    435          			if(strstr(lpbuf, (char *)pst_nb_operation->ExpectRcv) != NULL)
   \   00000028   0x6961             LDR      R1,[R4, #+20]
   \   0000002A   0xA800             ADD      R0,SP,#+0
   \   0000002C   0x.... 0x....      BL       strstr
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD010             BEQ.N    ??NBIOT_MODULE_WAITRX_2
    436          			{
    437          				pst_nb_operation->CurOperateState = pst_nb_operation->NextOperateState;
   \   00000034   0x7A60             LDRB     R0,[R4, #+9]
   \   00000036   0x7220             STRB     R0,[R4, #+8]
    438          				pst_nb_operation->ExecuCount = 0;										/* 每次命令执行成功，则命令执行次数清零 */
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x7120             STRB     R0,[R4, #+4]
    439          				debug_printf("%s:success\r\n", pst_nb_operation->CurCMD);
   \   0000003C   0x6821             LDR      R1,[R4, #+0]
   \   0000003E   0x.... 0x....      ADR.W    R0,?_20
   \   00000042   0x.... 0x....      BL       debug_printf
    440          				debug_printf("Enter The Next Operate State\r\n");
   \   00000046   0x.... 0x....      ADR.W    R0,?_21
   \   0000004A   0x.... 0x....      BL       debug_printf
    441          				TimeCount = 0;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x64E8             STR      R0,[R5, #+76]
    442          				return NBIOT_RESPONSE_SUCCESS;
   \   00000052   0x20A0             MOVS     R0,#+160
   \   00000054   0xE034             B.N      ??NBIOT_MODULE_WAITRX_3
    443          			}
    444          				
    445          			/* 如果接收到错误消息 */
    446          			else if(strstr(lpbuf, "ERROR") != NULL)
   \                     ??NBIOT_MODULE_WAITRX_2: (+1)
   \   00000056   0x.... 0x....      ADR.W    R1,?_22
   \   0000005A   0xA800             ADD      R0,SP,#+0
   \   0000005C   0x.... 0x....      BL       strstr
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD01A             BEQ.N    ??NBIOT_MODULE_WAITRX_4
    447          			{
    448          				pst_nb_operation->CurOperateState = pst_nb_operation->LastOperateState;
   \   00000064   0x7960             LDRB     R0,[R4, #+5]
   \   00000066   0x7220             STRB     R0,[R4, #+8]
    449          				debug_printf("!!!Attempt excute:%s-->count=%d!!!\r\n", pst_nb_operation->CurCMD, pst_nb_operation->ExecuCount);	/* debug */
   \   00000068   0x7922             LDRB     R2,[R4, #+4]
   \   0000006A   0x6821             LDR      R1,[R4, #+0]
   \   0000006C   0x.... 0x....      ADR.W    R0,?_23
   \   00000070   0x.... 0x....      BL       debug_printf
    450          				if(++pst_nb_operation->ExecuCount >= 3)
   \   00000074   0x7920             LDRB     R0,[R4, #+4]
   \   00000076   0x1C40             ADDS     R0,R0,#+1
   \   00000078   0x7120             STRB     R0,[R4, #+4]
   \   0000007A   0xB2C0             UXTB     R0,R0
   \   0000007C   0x2803             CMP      R0,#+3
   \   0000007E   0xDB0C             BLT.N    ??NBIOT_MODULE_WAITRX_4
    451          				{
    452          					pst_nb_operation->ExecuCount = 0;										/* 尝试次数清零 */
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0x7120             STRB     R0,[R4, #+4]
    453          					pst_nb_operation->CurOperateState = EN_NBOPEN_ERROR;
   \   00000084   0x2017             MOVS     R0,#+23
   \   00000086   0x7220             STRB     R0,[R4, #+8]
    454          					TimeCount = 0;
   \   00000088   0x2000             MOVS     R0,#+0
   \   0000008A   0x64E8             STR      R0,[R5, #+76]
    455          					debug_printf("%s:No Response!!!\r\n", pst_nb_operation->CurCMD);		/* debug */
   \   0000008C   0x6821             LDR      R1,[R4, #+0]
   \   0000008E   0x.... 0x....      ADR.W    R0,?_24
   \   00000092   0x.... 0x....      BL       debug_printf
    456          					return NBIOT_ERROR_NORESPONSE; 											/* 尝试次数过多无响应 */
   \   00000096   0x20F0             MOVS     R0,#+240
   \   00000098   0xE012             B.N      ??NBIOT_MODULE_WAITRX_3
    457          				}
    458          			}
    459          
    460          			/* 判断接收的是否是数据 */
    461          			if(strstr(lpbuf, "+NNMI") != NULL)
   \                     ??NBIOT_MODULE_WAITRX_4: (+1)
   \   0000009A   0x.... 0x....      ADR.W    R1,?_17
   \   0000009E   0xA800             ADD      R0,SP,#+0
   \   000000A0   0x.... 0x....      BL       strstr
   \   000000A4   0x2800             CMP      R0,#+0
   \   000000A6   0xD00A             BEQ.N    ??NBIOT_MODULE_WAITRX_1
    462          			{
    463          				/* Test:分析接收的数据并显示 */
    464          				debug_printf("%s\r\n", lpbuf);
   \   000000A8   0xA900             ADD      R1,SP,#+0
   \   000000AA   0x.... 0x....      ADR.W    R0,?_18
   \   000000AE   0x.... 0x....      BL       debug_printf
    465          				AnalysisCoapMsg(&NBiotDataPacket, lpbuf, &NBiotTxdaPacket);
   \   000000B2   0x462A             MOV      R2,R5
   \   000000B4   0xA900             ADD      R1,SP,#+0
   \   000000B6   0xF105 0x0050      ADD      R0,R5,#+80
   \   000000BA   0x.... 0x....      BL       AnalysisCoapMsg
    466          			}
    467          		}
    468          	}
    469          	else		/* 如果在规定时间内没有收到数据 */
    470          	{
    471          		pst_nb_operation->CurOperateState = pst_nb_operation->LastOperateState;			/* 尝试重新执行一次 */
    472          		debug_printf("!!!Attempt excute:%s-->count=%d!!!\r\n", pst_nb_operation->CurCMD, pst_nb_operation->ExecuCount);	/* debug */
    473          		if(++pst_nb_operation->ExecuCount >= 3)											
    474          		{
    475          			pst_nb_operation->ExecuCount = 0;			/* 尝试次数清零 */
    476          			TimeCount = 0;
    477          			debug_printf("%s:Timeout!!!\r\n", pst_nb_operation->CurCMD);	/* debug */
    478          			return NBIOT_ERROR_TIMEOUT; 				/* 返回超时 */
    479          		}
    480          	}
    481          	return -1;
   \                     ??NBIOT_MODULE_WAITRX_1: (+1)
   \   000000BE   0x20FF             MOVS     R0,#+255
   \                     ??NBIOT_MODULE_WAITRX_3: (+1)
   \   000000C0   0xB04B             ADD      SP,SP,#+300
   \   000000C2   0xBD30             POP      {R4,R5,PC}       ;; return
   \                     ??NBIOT_MODULE_WAITRX_0: (+1)
   \   000000C4   0x7960             LDRB     R0,[R4, #+5]
   \   000000C6   0x7220             STRB     R0,[R4, #+8]
   \   000000C8   0x7922             LDRB     R2,[R4, #+4]
   \   000000CA   0x6821             LDR      R1,[R4, #+0]
   \   000000CC   0x.... 0x....      ADR.W    R0,?_23
   \   000000D0   0x.... 0x....      BL       debug_printf
   \   000000D4   0x7920             LDRB     R0,[R4, #+4]
   \   000000D6   0x1C40             ADDS     R0,R0,#+1
   \   000000D8   0x7120             STRB     R0,[R4, #+4]
   \   000000DA   0xB2C0             UXTB     R0,R0
   \   000000DC   0x2803             CMP      R0,#+3
   \   000000DE   0xDBEE             BLT.N    ??NBIOT_MODULE_WAITRX_1
   \   000000E0   0x2000             MOVS     R0,#+0
   \   000000E2   0x7120             STRB     R0,[R4, #+4]
   \   000000E4   0x64E8             STR      R0,[R5, #+76]
   \   000000E6   0x6821             LDR      R1,[R4, #+0]
   \   000000E8   0x.... 0x....      ADR.W    R0,?_25
   \   000000EC   0x.... 0x....      BL       debug_printf
   \   000000F0   0x20FF             MOVS     R0,#+255
   \   000000F2   0xE7E5             B.N      ??NBIOT_MODULE_WAITRX_3
    482          }

   \                                 In section .bss, align 4
   \                     NBiotTxdaPacket:
   \   00000000                      DS8 76
   \   0000004C                      DS8 4
   \   00000050                      DS8 76

   \                                 In section .bss, align 4
   \                     commandAT:
   \   00000000                      DS8 256

   \                                 In section .bss, align 4
   \                     HTTPTCPData:
   \   00000000                      DS8 256

   \                                 In section .bss, align 4
   \                     st_nb_operation:
   \   00000000                      DS8 28
    483          
    484          /**
    485            * @brief NB模块设置结构体执行操作状态
    486           */

   \                                 In section .text, align 2, keep-with-next
    487          static void SetNB_OperatStrState(PST_NB_OPERATION pst_nb_operation, u8 curState, u8 nextState)
    488          {
    489          	pst_nb_operation->LastOperateState = pst_nb_operation->CurOperateState;
   \                     SetNB_OperatStrState: (+1)
   \   00000000   0x7A03             LDRB     R3,[R0, #+8]
   \   00000002   0x7143             STRB     R3,[R0, #+5]
    490          	pst_nb_operation->CurOperateState = curState;
   \   00000004   0x7201             STRB     R1,[R0, #+8]
    491          	pst_nb_operation->NextOperateState = nextState;
   \   00000006   0x7242             STRB     R2,[R0, #+9]
    492          	debug_printf("%s:send!!!\r\n", pst_nb_operation->CurCMD);
   \   00000008   0x6801             LDR      R1,[R0, #+0]
   \   0000000A   0x.... 0x....      ADR.W    R0,?_26
   \   0000000E   0x.... 0x....      B.W      debug_printf
    493          }
    494          
    495          /**
    496            * @brief NB模块设置结构体执行处理状态
    497           */

   \                                 In section .text, align 2, keep-with-next
    498          static void SetNB_ProceStrState(PST_NB_OPERATION pst_nb_operation, u8 curState, u8 nextState)
    499          {
    500          	pst_nb_operation->CurProcState =  curState;
   \                     SetNB_ProceStrState: (+1)
   \   00000000   0x7181             STRB     R1,[R0, #+6]
    501          	pst_nb_operation->NextProcState = nextState;
   \   00000002   0x71C2             STRB     R2,[R0, #+7]
    502          }
   \   00000004   0x4770             BX       LR               ;; return
    503          
    504          /**
    505            * @brief 分析平台发送的数据并显示
    506           */

   \                                 In section .text, align 2, keep-with-next
    507          static void AnalysisCoapMsg(P_Device_packet_t p_device_packet, char* MSG, P_Device_packet_t ptx_device_packet)
    508          {
   \                     AnalysisCoapMsg: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
    509          	char* TempMsg = NULL;
    510          	u32 NBdataLen = GetCoapMsgDataLen(MSG);				/* 获取平台发送了多少长度的数据 */
   \   00000008   0x4628             MOV      R0,R5
   \   0000000A   0x.... 0x....      BL       GetCoapMsgDataLen
   \   0000000E   0x4607             MOV      R7,R0
    511          	debug_printf("NBdataLen = %d\n", NBdataLen);		/* 测试打印长度 */
   \   00000010   0x4639             MOV      R1,R7
   \   00000012   0x.... 0x....      ADR.W    R0,?_27
   \   00000016   0x.... 0x....      BL       debug_printf
    512          	TempMsg = strchr(&MSG[0], '+');
    513          	if(TempMsg)											/* 截取逗号以后的数据地址 */
   \   0000001A   0x212B             MOVS     R1,#+43
   \   0000001C   0x4628             MOV      R0,R5
   \   0000001E   0x.... 0x....      BL       strchr
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD005             BEQ.N    ??AnalysisCoapMsg_0
    514          	{
    515          		TempMsg = strchr(&MSG[7], ','); 
   \   00000026   0x212C             MOVS     R1,#+44
   \   00000028   0x1DE8             ADDS     R0,R5,#+7
   \   0000002A   0x.... 0x....      BL       strchr
   \   0000002E   0x4605             MOV      R5,R0
   \   00000030   0xE004             B.N      ??AnalysisCoapMsg_1
    516          	}
    517          	else
    518          	{
    519          		TempMsg = strchr(&MSG[0], ',');  
   \                     ??AnalysisCoapMsg_0: (+1)
   \   00000032   0x212C             MOVS     R1,#+44
   \   00000034   0x4628             MOV      R0,R5
   \   00000036   0x.... 0x....      BL       strchr
   \   0000003A   0x4605             MOV      R5,R0
    520          	}
    521          	
    522          	if(TempMsg)
   \                     ??AnalysisCoapMsg_1: (+1)
   \   0000003C   0x2D00             CMP      R5,#+0
   \   0000003E   0xD01F             BEQ.N    ??AnalysisCoapMsg_2
    523          	{
    524          		TempMsg++;													
   \   00000040   0x1C6D             ADDS     R5,R5,#+1
    525          		NB_HexStrToNum(TempMsg);														/* 把十六进制转换为数字 */
   \   00000042   0x4628             MOV      R0,R5
   \   00000044   0x.... 0x....      BL       NB_HexStrToNum
    526          		SplitCoapData(p_device_packet, (u8 *)TempMsg, NBdataLen, ptx_device_packet);	/* 拆分数据到数据包 */
   \   00000048   0x4633             MOV      R3,R6
   \   0000004A   0x463A             MOV      R2,R7
   \   0000004C   0x4629             MOV      R1,R5
   \   0000004E   0x4620             MOV      R0,R4
   \   00000050   0x.... 0x....      BL       SplitCoapData
    527          		/* Test */
    528          		for(int i = 0; i < NBdataLen; i ++)
   \   00000054   0x2600             MOVS     R6,#+0
   \   00000056   0xE006             B.N      ??AnalysisCoapMsg_3
    529          		{
    530          			debug_printf("MSG[%d] = %d\r\n", i, TempMsg[i]);		
   \                     ??AnalysisCoapMsg_4: (+1)
   \   00000058   0x5D72             LDRB     R2,[R6, R5]
   \   0000005A   0x4631             MOV      R1,R6
   \   0000005C   0x.... 0x....      ADR.W    R0,?_28
   \   00000060   0x.... 0x....      BL       debug_printf
    531          		}
   \   00000064   0x1C76             ADDS     R6,R6,#+1
   \                     ??AnalysisCoapMsg_3: (+1)
   \   00000066   0x42BE             CMP      R6,R7
   \   00000068   0xD3F6             BCC.N    ??AnalysisCoapMsg_4
    532          		if(p_device_packet != NULL)														
   \   0000006A   0x2C00             CMP      R4,#+0
   \   0000006C   0xD008             BEQ.N    ??AnalysisCoapMsg_2
    533          		{
    534          			debug_printf("NBiot Pack Post\r\n");
   \   0000006E   0x.... 0x....      ADR.W    R0,?_29
   \   00000072   0x.... 0x....      BL       debug_printf
    535          			DevicePacket_post(p_device_packet);											/* 发送设备控制数据到设备管理任务 */
   \   00000076   0x4620             MOV      R0,R4
   \   00000078   0xE8BD 0x40F2      POP      {R1,R4-R7,LR}
   \   0000007C   0x.... 0x....      B.W      DevicePacket_post
    536          		}																			
    537          	}
    538          }
   \                     ??AnalysisCoapMsg_2: (+1)
   \   00000080   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    539          
    540          
    541          /**
    542            * @brief NB-IOT软件定时发回调函数送
    543           */

   \                                 In section .text, align 4, keep-with-next
    544          void NBSystickTmr_callback(OS_TMR *ptmr, void *p_arg)
    545          {
    546          	if(ENABLE_NBIOT_Tick == st_nb_operation.NBTick_Flag)		/* NBIOT定时发送 */
   \                     NBSystickTmr_callback: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable42
   \   00000002   0x7C00             LDRB     R0,[R0, #+16]
   \   00000004   0x2801             CMP      R0,#+1
   \   00000006   0xD103             BNE.N    ??NBSystickTmr_callback_0
    547          	{
    548          		NBIOT_send_cmd("AT+NMGS=10,5A03E807FF360000A3CA\r\n", 0);/* 节点心跳命令直接发送 */
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x.... 0x....      ADR.W    R0,?_30
   \   0000000E   0x....             B.N      NBIOT_send_cmd
    549          	}
    550          }
   \                     ??NBSystickTmr_callback_0: (+1)
   \   00000010   0x4770             BX       LR               ;; return
    551          
    552          /**
    553            * @brief 数据组包
    554           */

   \                                 In section .text, align 4, keep-with-next
    555          void GropPackNBMsgSend(u8* Data, u32 DataLen, u8 ack)
    556          {
   \                     GropPackNBMsgSend: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    557          	NBiotTxdaPacket.ack = ack;
   \   00000002   0x4C01             LDR.N    R4,??GropPackNBMsgSend_0
   \   00000004   0xE002             B.N      ??GropPackNBMsgSend_1
   \   00000006   0xBF00             Nop      
   \                     ??GropPackNBMsgSend_0:
   \   00000008   0x........         DC32     NBiotTxdaPacket
   \                     ??GropPackNBMsgSend_1: (+1)
   \   0000000C   0x71E2             STRB     R2,[R4, #+7]
    558          	NBiotTxdaPacket.data_size = DataLen;					/* 赋值长度 */
   \   0000000E   0x7221             STRB     R1,[R4, #+8]
    559          	//NBiotTxdaPacket.data = Data;
    560          	memcpy(NBiotTxdaPacket.data, Data, DataLen);
   \   00000010   0x460A             MOV      R2,R1
   \   00000012   0x4601             MOV      R1,R0
   \   00000014   0xF104 0x0009      ADD      R0,R4,#+9
   \   00000018   0x.... 0x....      BL       __aeabi_memcpy
    561          	SendNBMsgPack(&NBiotTxdaPacket); 						/* 数据包发送 */
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0xE8BD 0x4010      POP      {R4,LR}
   \   00000022                      REQUIRE SendNBMsgPack
   \   00000022                      ;; // Fall through to label SendNBMsgPack
    562          }
    563          
    564          /**
    565            * @brief 发送数据到平台
    566           */

   \                                 In section .text, align 2, keep-with-next
    567          void SendNBMsgPack(P_Device_packet_t p_device_packet)
    568          {
   \                     SendNBMsgPack: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB0D8             SUB      SP,SP,#+352
   \   00000004   0x4604             MOV      R4,R0
    569          	u8 sendbuf[32] = {0};				/* NBIOT Data发送缓冲区 */
   \   00000006   0xA800             ADD      R0,SP,#+0
   \   00000008   0x2120             MOVS     R1,#+32
   \   0000000A   0x.... 0x....      BL       __aeabi_memclr4
    570          	u8 TxNBiotLen = 0;					/* 总的NB消息长度 */
    571          	char NBIOTSendBuf[64] = {0};		/* 总的NB发送消息缓冲区--AT+NMGS=... */
   \   0000000E   0xA848             ADD      R0,SP,#+288
   \   00000010   0x2140             MOVS     R1,#+64
   \   00000012   0x.... 0x....      BL       __aeabi_memclr4
    572          	char NBDataBuf[255] = {0};			/* NBIOT发送数据缓冲区--保存发送数据用 */
   \   00000016   0xA808             ADD      R0,SP,#+32
   \   00000018   0xF44F 0x7180      MOV      R1,#+256
   \   0000001C   0x.... 0x....      BL       __aeabi_memclr4
    573          	memset(NBIOTSendBuf, 0, 64);
   \   00000020   0x2200             MOVS     R2,#+0
   \   00000022   0x2140             MOVS     R1,#+64
   \   00000024   0xA848             ADD      R0,SP,#+288
   \   00000026   0x.... 0x....      BL       __aeabi_memset4
    574          	memset(NBDataBuf, 0, 255);
   \   0000002A   0x2200             MOVS     R2,#+0
   \   0000002C   0x21FF             MOVS     R1,#+255
   \   0000002E   0xA808             ADD      R0,SP,#+32
   \   00000030   0x.... 0x....      BL       __aeabi_memset4
    575          	if(p_device_packet != NULL)			/* 打包赋值 */
   \   00000034   0x2C00             CMP      R4,#+0
   \   00000036   0xD044             BEQ.N    ??SendNBMsgPack_0
    576          	{	
    577          		sendbuf[0] = p_device_packet->Starting_mark;
   \   00000038   0x7820             LDRB     R0,[R4, #+0]
   \   0000003A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    578          		sendbuf[1] = (p_device_packet->Message_number & 0xFF00) >> 8;
   \   0000003E   0xA800             ADD      R0,SP,#+0
   \   00000040   0x8861             LDRH     R1,[R4, #+2]
   \   00000042   0x0A09             LSRS     R1,R1,#+8
   \   00000044   0x7041             STRB     R1,[R0, #+1]
    579          		sendbuf[2] = p_device_packet->Message_number & 0x00FF;
   \   00000046   0x8861             LDRH     R1,[R4, #+2]
   \   00000048   0x7081             STRB     R1,[R0, #+2]
    580          		sendbuf[3] = p_device_packet->Node_type;
   \   0000004A   0x7921             LDRB     R1,[R4, #+4]
   \   0000004C   0xF88D 0x1003      STRB     R1,[SP, #+3]
    581          		sendbuf[4] = p_device_packet->Device_type;
   \   00000050   0x7961             LDRB     R1,[R4, #+5]
   \   00000052   0x7101             STRB     R1,[R0, #+4]
    582          		sendbuf[5] = p_device_packet->Command_code;
   \   00000054   0x79A1             LDRB     R1,[R4, #+6]
   \   00000056   0x7141             STRB     R1,[R0, #+5]
    583          		sendbuf[6] = p_device_packet->ack;
   \   00000058   0x79E1             LDRB     R1,[R4, #+7]
   \   0000005A   0x7181             STRB     R1,[R0, #+6]
    584          		sendbuf[7] = p_device_packet->data_size;
   \   0000005C   0x7A21             LDRB     R1,[R4, #+8]
   \   0000005E   0x71C1             STRB     R1,[R0, #+7]
    585          		memcpy(&sendbuf[8], p_device_packet->data, p_device_packet->data_size);
   \   00000060   0x7A22             LDRB     R2,[R4, #+8]
   \   00000062   0xF104 0x0109      ADD      R1,R4,#+9
   \   00000066   0xA802             ADD      R0,SP,#+8
   \   00000068   0x.... 0x....      BL       __aeabi_memcpy
    586          		sendbuf[8 + p_device_packet->data_size] = p_device_packet->Check_code;
   \   0000006C   0xF104 0x0049      ADD      R0,R4,#+73
   \   00000070   0x7801             LDRB     R1,[R0, #+0]
   \   00000072   0xAA00             ADD      R2,SP,#+0
   \   00000074   0x7A23             LDRB     R3,[R4, #+8]
   \   00000076   0x189A             ADDS     R2,R3,R2
   \   00000078   0x7211             STRB     R1,[R2, #+8]
    587          		sendbuf[9 + p_device_packet->data_size] = p_device_packet->End_mark;
   \   0000007A   0x7840             LDRB     R0,[R0, #+1]
   \   0000007C   0xA900             ADD      R1,SP,#+0
   \   0000007E   0x7A22             LDRB     R2,[R4, #+8]
   \   00000080   0x1851             ADDS     R1,R2,R1
   \   00000082   0x7248             STRB     R0,[R1, #+9]
    588          		TxNBiotLen = p_device_packet->data_size + 10;
   \   00000084   0x7A20             LDRB     R0,[R4, #+8]
   \   00000086   0xF100 0x040A      ADD      R4,R0,#+10
   \   0000008A   0xB2E4             UXTB     R4,R4
    589          		HexToAscii(sendbuf, (u8 *)NBDataBuf, TxNBiotLen);
   \   0000008C   0x4622             MOV      R2,R4
   \   0000008E   0xA908             ADD      R1,SP,#+32
   \   00000090   0xA800             ADD      R0,SP,#+0
   \   00000092   0x.... 0x....      BL       HexToAscii
    590          		sprintf(NBIOTSendBuf,"AT+NMGS=%d,%s\r\n", TxNBiotLen, NBDataBuf);		
   \   00000096   0xAB08             ADD      R3,SP,#+32
   \   00000098   0x4622             MOV      R2,R4
   \   0000009A   0x.... 0x....      ADR.W    R1,?_34
   \   0000009E   0xA848             ADD      R0,SP,#+288
   \   000000A0   0x.... 0x....      BL       sprintf
    591          		debug_printf("Back Show!!!:%s", NBIOTSendBuf);							/* debug */
   \   000000A4   0xA948             ADD      R1,SP,#+288
   \   000000A6   0x.... 0x....      ADR.W    R0,?_35
   \   000000AA   0x.... 0x....      BL       debug_printf
    592          		OSTimeDlyHMSM(0, 0, 0, 1);											/* 延迟5ms */
   \   000000AE   0x2301             MOVS     R3,#+1
   \   000000B0   0x2200             MOVS     R2,#+0
   \   000000B2   0x4611             MOV      R1,R2
   \   000000B4   0x4608             MOV      R0,R1
   \   000000B6   0x.... 0x....      BL       OSTimeDlyHMSM
    593          		NBIOT_send_cmd(NBIOTSendBuf, 0);									/* 启动数据发送 */		
   \   000000BA   0x2100             MOVS     R1,#+0
   \   000000BC   0xA848             ADD      R0,SP,#+288
   \   000000BE   0x.... 0x....      BL       NBIOT_send_cmd
    594          	}
    595          }
   \                     ??SendNBMsgPack_0: (+1)
   \   000000C2   0xB058             ADD      SP,SP,#+352
   \   000000C4   0xBD10             POP      {R4,PC}          ;; return
    596          
    597          /**
    598            * @brief 解包平台数据
    599           */

   \                                 In section .text, align 2, keep-with-next
    600          static void SplitCoapData(P_Device_packet_t p_device_packet, u8* ReceiveBuf, u32 DataLen, P_Device_packet_t ptx_device_packet)
    601          {
   \                     SplitCoapData: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460E             MOV      R6,R1
   \   00000006   0x4617             MOV      R7,R2
   \   00000008   0x461D             MOV      R5,R3
    602          	p_device_packet->Starting_mark 	= 	ReceiveBuf[0];						/* 起始标志 */
   \   0000000A   0x7830             LDRB     R0,[R6, #+0]
   \   0000000C   0x7020             STRB     R0,[R4, #+0]
    603          	p_device_packet->Message_number =	ReceiveBuf[1] << 8 | ReceiveBuf[2];	/* 消息序列号占两个字节 */
   \   0000000E   0x7870             LDRB     R0,[R6, #+1]
   \   00000010   0x78B1             LDRB     R1,[R6, #+2]
   \   00000012   0xEA41 0x2000      ORR      R0,R1,R0, LSL #+8
   \   00000016   0x8060             STRH     R0,[R4, #+2]
    604          	p_device_packet->Node_type 		= 	ReceiveBuf[3];
   \   00000018   0x78F0             LDRB     R0,[R6, #+3]
   \   0000001A   0x7120             STRB     R0,[R4, #+4]
    605          	p_device_packet->Device_type 	= 	ReceiveBuf[4];
   \   0000001C   0x7930             LDRB     R0,[R6, #+4]
   \   0000001E   0x7160             STRB     R0,[R4, #+5]
    606          	p_device_packet->Command_code 	= 	ReceiveBuf[5];
   \   00000020   0x7970             LDRB     R0,[R6, #+5]
   \   00000022   0x71A0             STRB     R0,[R4, #+6]
    607          	p_device_packet->ack 			=	ReceiveBuf[6];
   \   00000024   0x79B0             LDRB     R0,[R6, #+6]
   \   00000026   0x71E0             STRB     R0,[R4, #+7]
    608          	p_device_packet->data_size 		= 	ReceiveBuf[7];
   \   00000028   0x79F2             LDRB     R2,[R6, #+7]
   \   0000002A   0x7222             STRB     R2,[R4, #+8]
    609          	//p_device_packet->data 			=	(u8*)&ReceiveBuf[DataLen - 2 - p_device_packet->data_size];
    610          	memcpy(p_device_packet->data, &ReceiveBuf[8], p_device_packet->data_size);
   \   0000002C   0xF106 0x0108      ADD      R1,R6,#+8
   \   00000030   0xF104 0x0009      ADD      R0,R4,#+9
   \   00000034   0x.... 0x....      BL       __aeabi_memcpy
    611          	p_device_packet->Check_code 	= 	ReceiveBuf[DataLen - 2];
   \   00000038   0x19B8             ADDS     R0,R7,R6
   \   0000003A   0x1E80             SUBS     R0,R0,#+2
   \   0000003C   0xF104 0x0149      ADD      R1,R4,#+73
   \   00000040   0x7802             LDRB     R2,[R0, #+0]
   \   00000042   0x700A             STRB     R2,[R1, #+0]
    612          	p_device_packet->End_mark 		=	ReceiveBuf[DataLen - 1];					/* 协议中结束标志是0xCA */
   \   00000044   0x7840             LDRB     R0,[R0, #+1]
   \   00000046   0x7048             STRB     R0,[R1, #+1]
    613          
    614          	/* 发送固定数据赋值 */
    615          	ptx_device_packet->Starting_mark 	= p_device_packet->Starting_mark;
   \   00000048   0x7820             LDRB     R0,[R4, #+0]
   \   0000004A   0x7028             STRB     R0,[R5, #+0]
    616          	ptx_device_packet->Message_number 	= p_device_packet->Message_number;
   \   0000004C   0x8860             LDRH     R0,[R4, #+2]
   \   0000004E   0x8068             STRH     R0,[R5, #+2]
    617          	ptx_device_packet->Node_type 		= p_device_packet->Node_type;
   \   00000050   0x7920             LDRB     R0,[R4, #+4]
   \   00000052   0x7128             STRB     R0,[R5, #+4]
    618          	ptx_device_packet->Device_type 		= p_device_packet->Device_type;
   \   00000054   0x7960             LDRB     R0,[R4, #+5]
   \   00000056   0x7168             STRB     R0,[R5, #+5]
    619          	ptx_device_packet->Command_code 	= p_device_packet->Command_code;
   \   00000058   0x79A0             LDRB     R0,[R4, #+6]
   \   0000005A   0x71A8             STRB     R0,[R5, #+6]
    620          	ptx_device_packet->ack 				= p_device_packet->ack;
   \   0000005C   0x79E0             LDRB     R0,[R4, #+7]
   \   0000005E   0x71E8             STRB     R0,[R5, #+7]
    621          	ptx_device_packet->Check_code 		= p_device_packet->Check_code ;
   \   00000060   0xF105 0x0049      ADD      R0,R5,#+73
   \   00000064   0x780A             LDRB     R2,[R1, #+0]
   \   00000066   0x7002             STRB     R2,[R0, #+0]
    622          	ptx_device_packet->End_mark 		= p_device_packet->End_mark;
   \   00000068   0x7849             LDRB     R1,[R1, #+1]
   \   0000006A   0x7041             STRB     R1,[R0, #+1]
    623          
    624          	/*  测试接收到的数据 */
    625          	GropPackNBMsgSend(p_device_packet->data, p_device_packet->data_size, 0x00);	/* debug--回显NBIOT数据测试 */
   \   0000006C   0x2200             MOVS     R2,#+0
   \   0000006E   0x7A21             LDRB     R1,[R4, #+8]
   \   00000070   0xF104 0x0009      ADD      R0,R4,#+9
   \   00000074   0xE8BD 0x40F8      POP      {R3-R7,LR}
   \   00000078   0x....             B.N      GropPackNBMsgSend
    626          	
    627          }
    628          
    629          /**
    630            * @brief 获取coap msg数据长度
    631           */

   \                                 In section .text, align 2, keep-with-next
    632          static unsigned long GetCoapMsgDataLen(char *coapMsg)
    633          {
   \                     GetCoapMsgDataLen: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
   \   00000004   0x4604             MOV      R4,R0
    634          	char* TempCoapMsg = NULL;
    635          	u32 CoapDataLen = 0;
   \   00000006   0x2500             MOVS     R5,#+0
    636          	char RSCoapData[32] = {0};
   \   00000008   0xA800             ADD      R0,SP,#+0
   \   0000000A   0x2120             MOVS     R1,#+32
   \   0000000C   0x.... 0x....      BL       __aeabi_memclr4
    637          	if(coapMsg != NULL)
   \   00000010   0x2C00             CMP      R4,#+0
   \   00000012   0xD00E             BEQ.N    ??GetCoapMsgDataLen_0
    638          	{
    639          		strncpy(RSCoapData, coapMsg, 11);				/* 把coap数据前八个字符复制到RSCoapData中--包含\0 */
   \   00000014   0x220B             MOVS     R2,#+11
   \   00000016   0x4621             MOV      R1,R4
   \   00000018   0xA800             ADD      R0,SP,#+0
   \   0000001A   0x.... 0x....      BL       strncpy
    640          		TempCoapMsg = strchr(&RSCoapData[5], ':');		/* 把：之后的地址赋值给TempCoapMsg */
   \   0000001E   0x213A             MOVS     R1,#+58
   \   00000020   0xF10D 0x0005      ADD      R0,SP,#+5
   \   00000024   0x.... 0x....      BL       strchr
    641          		TempCoapMsg ++;
    642          		CoapDataLen = NB_Strtoul(TempCoapMsg, 10);		/* 将字符型数字转换位十进制数值型数字--长度 */
   \   00000028   0x210A             MOVS     R1,#+10
   \   0000002A   0x1C40             ADDS     R0,R0,#+1
   \   0000002C   0x.... 0x....      BL       NB_Strtoul
   \   00000030   0x4605             MOV      R5,R0
    643          	}
    644          	return CoapDataLen;
   \                     ??GetCoapMsgDataLen_0: (+1)
   \   00000032   0x4628             MOV      R0,R5
   \   00000034   0xB009             ADD      SP,SP,#+36
   \   00000036   0xBD30             POP      {R4,R5,PC}       ;; return
    645          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41:
   \   00000000   0x2B 0x2B          DC8      "+++"
   \              0x2B 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_1:
   \   00000000   0x4F 0x4B          DC8      0x4F, 0x4B, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42:
   \   00000000   0x........         DC32     st_nb_operation

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42_1:
   \   00000000   0x........         DC32     NBiotTxdaPacket

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42_2:
   \   00000000   0x000493E1         DC32     0x493e1

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x2B 0x2B          DC8 "+++"
   \              0x2B 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x4F 0x4B          DC8 "OK"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_16:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000017   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000002E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000045   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000005C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000073   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000008A   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000A1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000CF   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000E6   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000FD   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000114   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000012B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_19:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000017   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000002E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000045   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000005C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000073   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000008A   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000A1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000CF   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000E6   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000FD   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000114   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000012B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_31:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000017   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_32:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000017   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000002E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_33:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000017   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000002E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000045   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000005C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000073   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000008A   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000A1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000CF   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000E6   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000FD   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_36:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000017   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x4E 0x42          DC8 "NBSystickTmr"
   \              0x53 0x79    
   \              0x73 0x74    
   \              0x69 0x63    
   \              0x6B 0x54    
   \              0x6D 0x72    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x5B 0x25          DC8 "[%s] enter.\015\012"
   \              0x73 0x5D    
   \              0x20 0x65    
   \              0x6E 0x74    
   \              0x65 0x72    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x41 0x54          DC8 "AT+NCONFIG=AUTOCONNECT,FALSE\015\012"
   \              0x2B 0x4E    
   \              0x43 0x4F    
   \              0x4E 0x46    
   \              0x49 0x47    
   \              0x3D 0x41    
   \              0x55 0x54    
   \              0x4F 0x43    
   \              0x4F 0x4E    
   \              0x4E 0x45    
   \              0x43 0x54    
   \              0x2C 0x46    
   \              0x41 0x4C    
   \              0x53 0x45    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x41 0x54          DC8 "AT+NCDP=49.4.85.232,5683\015\012"
   \              0x2B 0x4E    
   \              0x43 0x44    
   \              0x50 0x3D    
   \              0x34 0x39    
   \              0x2E 0x34    
   \              0x2E 0x38    
   \              0x35 0x2E    
   \              0x32 0x33    
   \              0x32 0x2C    
   \              0x35 0x36    
   \              0x38 0x33    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x41 0x54          DC8 "AT+NRB\015\012"
   \              0x2B 0x4E    
   \              0x52 0x42    
   \              0x0D 0x0A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x41 0x54          DC8 "AT+CFUN=1\015\012"
   \              0x2B 0x43    
   \              0x46 0x55    
   \              0x4E 0x3D    
   \              0x31 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x41 0x54          DC8 "AT+CIMI\015\012"
   \              0x2B 0x43    
   \              0x49 0x4D    
   \              0x49 0x0D    
   \              0x0A 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_9:
   \   00000000   0x41 0x54          DC8 "AT+CEDRXS=0,5\015\012"
   \              0x2B 0x43    
   \              0x45 0x44    
   \              0x52 0x58    
   \              0x53 0x3D    
   \              0x30 0x2C    
   \              0x35 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_10:
   \   00000000   0x41 0x54          DC8 "AT+CPSMS=0\015\012"
   \              0x2B 0x43    
   \              0x50 0x53    
   \              0x4D 0x53    
   \              0x3D 0x30    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_11:
   \   00000000   0x41 0x54          DC8 "AT+NNMI=1\015\012"
   \              0x2B 0x4E    
   \              0x4E 0x4D    
   \              0x49 0x3D    
   \              0x31 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_12:
   \   00000000   0x41 0x54          DC8 "AT+NSMI=1\015\012"
   \              0x2B 0x4E    
   \              0x53 0x4D    
   \              0x49 0x3D    
   \              0x31 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_13:
   \   00000000   0x41 0x54          DC8 "AT+CGATT=1\015\012"
   \              0x2B 0x43    
   \              0x47 0x41    
   \              0x54 0x54    
   \              0x3D 0x31    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_14:
   \   00000000   0x41 0x54          DC8 "AT+CEREG=1\015\012"
   \              0x2B 0x43    
   \              0x45 0x52    
   \              0x45 0x47    
   \              0x3D 0x31    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_15:
   \   00000000   0x45 0x4E          DC8 "EN_NBOPEN_END is END\015\012"
   \              0x5F 0x4E    
   \              0x42 0x4F    
   \              0x50 0x45    
   \              0x4E 0x5F    
   \              0x45 0x4E    
   \              0x44 0x20    
   \              0x69 0x73    
   \              0x20 0x45    
   \              0x4E 0x44    
   \              0x0D 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_17:
   \   00000000   0x2B 0x4E          DC8 "+NNMI"
   \              0x4E 0x4D    
   \              0x49 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_18:
   \   00000000   0x25 0x73          DC8 "%s\015\012"
   \              0x0D 0x0A    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_20:
   \   00000000   0x25 0x73          DC8 "%s:success\015\012"
   \              0x3A 0x73    
   \              0x75 0x63    
   \              0x63 0x65    
   \              0x73 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_21:
   \   00000000   0x45 0x6E          DC8 "Enter The Next Operate State\015\012"
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x54 0x68    
   \              0x65 0x20    
   \              0x4E 0x65    
   \              0x78 0x74    
   \              0x20 0x4F    
   \              0x70 0x65    
   \              0x72 0x61    
   \              0x74 0x65    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x65    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_22:
   \   00000000   0x45 0x52          DC8 "ERROR"
   \              0x52 0x4F    
   \              0x52 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_23:
   \   00000000   0x21 0x21          DC8 "!!!Attempt excute:%s-->count=%d!!!\015\012"
   \              0x21 0x41    
   \              0x74 0x74    
   \              0x65 0x6D    
   \              0x70 0x74    
   \              0x20 0x65    
   \              0x78 0x63    
   \              0x75 0x74    
   \              0x65 0x3A    
   \              0x25 0x73    
   \              0x2D 0x2D    
   \              0x3E 0x63    
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x3D 0x25    
   \              0x64 0x21    
   \              0x21 0x21    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_24:
   \   00000000   0x25 0x73          DC8 "%s:No Response!!!\015\012"
   \              0x3A 0x4E    
   \              0x6F 0x20    
   \              0x52 0x65    
   \              0x73 0x70    
   \              0x6F 0x6E    
   \              0x73 0x65    
   \              0x21 0x21    
   \              0x21 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_25:
   \   00000000   0x25 0x73          DC8 "%s:Timeout!!!\015\012"
   \              0x3A 0x54    
   \              0x69 0x6D    
   \              0x65 0x6F    
   \              0x75 0x74    
   \              0x21 0x21    
   \              0x21 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_26:
   \   00000000   0x25 0x73          DC8 "%s:send!!!\015\012"
   \              0x3A 0x73    
   \              0x65 0x6E    
   \              0x64 0x21    
   \              0x21 0x21    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_27:
   \   00000000   0x4E 0x42          DC8 "NBdataLen = %d\012"
   \              0x64 0x61    
   \              0x74 0x61    
   \              0x4C 0x65    
   \              0x6E 0x20    
   \              0x3D 0x20    
   \              0x25 0x64    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_28:
   \   00000000   0x4D 0x53          DC8 "MSG[%d] = %d\015\012"
   \              0x47 0x5B    
   \              0x25 0x64    
   \              0x5D 0x20    
   \              0x3D 0x20    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_29:
   \   00000000   0x4E 0x42          DC8 "NBiot Pack Post\015\012"
   \              0x69 0x6F    
   \              0x74 0x20    
   \              0x50 0x61    
   \              0x63 0x6B    
   \              0x20 0x50    
   \              0x6F 0x73    
   \              0x74 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_30:
   \   00000000   0x41 0x54          DC8 "AT+NMGS=10,5A03E807FF360000A3CA\015\012"
   \              0x2B 0x4E    
   \              0x4D 0x47    
   \              0x53 0x3D    
   \              0x31 0x30    
   \              0x2C 0x35    
   \              0x41 0x30    
   \              0x33 0x45    
   \              0x38 0x30    
   \              0x37 0x46    
   \              0x46 0x33    
   \              0x36 0x30    
   \              0x30 0x30    
   \              0x30 0x41    
   \              0x33 0x43    
   \              0x41 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_34:
   \   00000000   0x41 0x54          DC8 "AT+NMGS=%d,%s\015\012"
   \              0x2B 0x4E    
   \              0x4D 0x47    
   \              0x53 0x3D    
   \              0x25 0x64    
   \              0x2C 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_35:
   \   00000000   0x42 0x61          DC8 "Back Show!!!:%s"
   \              0x63 0x6B    
   \              0x20 0x53    
   \              0x68 0x6F    
   \              0x77 0x21    
   \              0x21 0x21    
   \              0x3A 0x25    
   \              0x73 0x00    
    646          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   AnalysisCoapMsg
        24   -> GetCoapMsgDataLen
        24   -> NB_HexStrToNum
        24   -> SplitCoapData
        24   -> debug_printf
        24   -> strchr
      24   App_NBIOT_TASK
        24   -> NBIOT_MODULE_INIT
        24   -> NBIOT_send_cmd
        24   -> OSTimeDlyHMSM
        24   -> OSTmrCreate
        24   -> OSTmrStart
        24   -> debug_printf
      48   GetCoapMsgDataLen
        48   -> NB_Strtoul
        48   -> __aeabi_memclr4
        48   -> strchr
        48   -> strncpy
       8   GropPackNBMsgSend
         0   -> SendNBMsgPack
         8   -> __aeabi_memcpy
     304   NBIOT_MODULE_HANDLE
       304   -> AnalysisCoapMsg
       304   -> NBUartRecvData
       304   -> __aeabi_memclr4
       304   -> debug_printf
       304   -> strstr
       0   NBIOT_MODULE_INIT
       8   NBIOT_MODULE_OPEN
         8   -> NBIOT_MODULE_WAITRX
         8   -> NBIOT_send_cmd
         8   -> SetNB_OperatStrState
         8   -> SetNB_ProceStrState
         8   -> debug_printf
       8   NBIOT_MODULE_PROCESS
         8   -> NBIOT_MODULE_HANDLE
         8   -> NBIOT_MODULE_OPEN
     312   NBIOT_MODULE_WAITRX
       312   -> AnalysisCoapMsg
       312   -> NBUartRecvData
       312   -> __aeabi_memclr4
       312   -> debug_printf
       312   -> strstr
       8   NBIOT_send_cmd
         8   -> NBiotDMA_Send_Data
         8   -> OSTimeDlyHMSM
       0   NBSystickTmr_callback
     360   SendNBMsgPack
       360   -> HexToAscii
       360   -> NBIOT_send_cmd
       360   -> OSTimeDlyHMSM
       360   -> __aeabi_memclr4
       360   -> __aeabi_memcpy
       360   -> __aeabi_memset4
       360   -> debug_printf
       360   -> sprintf
       0   SetNB_OperatStrState
         0   -> debug_printf
       0   SetNB_ProceStrState
      24   SplitCoapData
         0   -> GropPackNBMsgSend
        24   -> __aeabi_memcpy
       0   strchr
         0   -> __iar_Strchr
       0   strstr
         0   -> __iar_Strstr


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable41
       4  ??DataTable41_1
       4  ??DataTable42
       4  ??DataTable42_1
       4  ??DataTable42_2
      16  ?_0
      16  ?_1
      16  ?_10
      12  ?_11
      12  ?_12
      16  ?_13
      16  ?_14
      24  ?_15
     300  ?_16
       8  ?_17
       8  ?_18
     300  ?_19
       4  ?_2
      16  ?_20
      32  ?_21
       8  ?_22
      40  ?_23
      20  ?_24
      16  ?_25
      16  ?_26
      16  ?_27
      16  ?_28
      20  ?_29
      32  ?_3
      36  ?_30
      32  ?_31
      64  ?_32
     256  ?_33
      16  ?_34
      16  ?_35
      32  ?_36
       4  ?_4
      28  ?_5
      12  ?_6
      12  ?_7
      12  ?_8
      16  ?_9
     130  AnalysisCoapMsg
      80  App_NBIOT_TASK
      56  GetCoapMsgDataLen
      34  GropPackNBMsgSend
     256  HTTPTCPData
      66  NBIOT_MODULE_HANDLE
      18  NBIOT_MODULE_INIT
     452  NBIOT_MODULE_OPEN
      34  NBIOT_MODULE_PROCESS
     244  NBIOT_MODULE_WAITRX
      24  NBIOT_send_cmd
      18  NBSystickTmr_callback
     156  NBiotTxdaPacket
          TimeCount
          NBiotDataPacket
     198  SendNBMsgPack
      18  SetNB_OperatStrState
       6  SetNB_ProceStrState
     122  SplitCoapData
     256  commandAT
      28  st_nb_operation
       4  strchr
       4  strstr
      16  -- Other

 
   696 bytes in section .bss
   992 bytes in section .rodata
 2 068 bytes in section .text
 
 2 060 bytes of CODE  memory (+ 8 bytes shared)
   992 bytes of CONST memory
   696 bytes of DATA  memory

Errors: none
Warnings: none
